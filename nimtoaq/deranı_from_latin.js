/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI436208959 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI436208958 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI436207639 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI436207636 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI436207633 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI436208039 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1509950698 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1509949535 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1509949532 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1509949529 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI436208040 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI436208084 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI436208081 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI436208078 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1258291610 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1258291212 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1325400816 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519056 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400070 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1325400601 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1325400468 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174406355 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519218 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI838862344 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI838872505 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1191182342 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1191182340 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1224738058 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1224736852 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1191182341 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1191182339 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555132 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1140850705 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1224738411 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1224738412 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1224738154 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1174406494 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1258291715 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519058 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519047 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519057 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519046 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519048 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519055 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519044 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519054 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519086 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519085 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519077 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519075 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519072 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519069 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519050 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1090519063 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519052 = {size: 0,kind: 33,base: null,node: null,finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI1090519062 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI838860803 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1090519051 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1090519053 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519059 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519049 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1241514194 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1241513991 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1241513990 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1241514197 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI973078531 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1224736912 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1224736909 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1224736906 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1358954500 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1358954682 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1241514501 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1241514500 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1241514499 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1241514496 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1241514593 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1241514595 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1241514594 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731734 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1375731728 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1375731717 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375733542 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1375732993 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1375732390 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1241514195 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1375732290 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI33554458 = {size: 0,kind: 33,base: null,node: null,finalizer: null};
var NTI1090519307 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687865917 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1241513987 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1241514493 = {size: 0,kind: 33,base: null,node: null,finalizer: null};
var NTI1241514495 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1241514531 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI436207754 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1426063612 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1124073475 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1426063620 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063621 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1107296301 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI33554459 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI1426063503 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1426063497 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI805306440 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI805306447 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555919 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI620757662 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
NTI620757662.base = NTI33554439;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555919 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554440, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554440, name: "Field2", sons: null}]};
NTI33555919.node = NNI33555919;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
var NNI805306447 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI805306440, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI805306447.node = NNI805306447;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
NTI1426063503.base = NTI33554459;
var NNI1426063497 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1426063503, name: "data", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI33554456, name: "pos", sons: null}]};
NTI1426063497.node = NNI1426063497;
NTI1107296301.base = NTI33554459;
var NNI1124073475 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"1": {kind: 1, offset: 1, typ: NTI1124073475, name: "nfcQcNo", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1124073475, name: "nfcQcMaybe", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1124073475, name: "nfkcQcNo", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1124073475, name: "nfkcQcMaybe", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI1124073475, name: "nfdQcNo", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI1124073475, name: "nfkdQcNo", len: 0, sons: null}}};
NTI1124073475.node = NNI1124073475;
var NNI1426063612 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI1426063612, name: "qcsYes", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1426063612, name: "qcsNo", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1426063612, name: "qcsMaybe", len: 0, sons: null}}};
NTI1426063612.node = NNI1426063612;
var NNI1426063620 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1124073475, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1426063612, name: "Field1", sons: null}]};
NTI1426063620.node = NNI1426063620;
NTI1426063621.base = NTI1426063620;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI436207754 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI436207754.node = NNI436207754;
var NNI687865917 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI687865917.node = NNI687865917;
var NNI1241514495 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1241514493, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1241513987, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI687865917, name: "Field2", sons: null}]};
NTI1241514495.node = NNI1241514495;
NTI1241514531.base = NTI1241514495;
NTI1090519307.base = NTI33554458;
var NNI1241514195 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI1241514195, name: "mfShortestMatch", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1241514195, name: "mfNoCaptures", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1241514195, name: "mfFindMatch", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1241514195, name: "mfFindMatchOpt", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1241514195, name: "mfAnchored", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1241514195, name: "mfBwMatch", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1241514195, name: "mfReverseCapts", len: 0, sons: null}}};
NTI1241514195.node = NNI1241514195;
NTI1375732290.base = NTI1241514195;
NTI1375732390.base = NTI1241514195;
NTI1375732993.base = NTI1241514195;
NTI1375733542.base = NTI1241514195;
NTI1241514500.base = NTI1241514495;
NTI1241514501.base = NTI33554458;
var NNI1241514499 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "sx", len: 0, typ: NTI1241514500, name: "sx", sons: null}, 
{kind: 1, offset: "ss", len: 0, typ: NTI1241514501, name: "ss", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI33554458, name: "si", sons: null}]};
NTI1241514499.node = NNI1241514499;
NTI1241514496.base = NTI1241514499;
var NNI1241514593 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1241514496, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1241514496, name: "b", sons: null}]};
NTI1241514593.node = NNI1241514593;
NTI1241514595.base = NTI1241514593;
var NNI1241514594 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI1241514595, name: "s", sons: null}, 
{kind: 1, offset: "i", len: 0, typ: NTI33554456, name: "i", sons: null}]};
NTI1241514594.node = NNI1241514594;
var NNI1375731717 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ahead", len: 0, typ: NTI1375731728, name: "ahead", sons: null}, 
{kind: 1, offset: "behind", len: 0, typ: NTI1375731734, name: "behind", sons: null}, 
{kind: 1, offset: "smL", len: 0, typ: NTI1241514594, name: "smL", sons: null}]};
NTI1375731717.node = NNI1375731717;
NTI1358954682.base = NTI1241514195;
var NNI1358954500 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1241513987, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI687865917, name: "Field1", sons: null}]};
NTI1358954500.node = NNI1358954500;
var NNI1224736912 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI973078531, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI33554458, name: "Field3", sons: null}]};
NTI1224736912.node = NNI1224736912;
NTI1224736909.base = NTI1224736912;
var NNI1224736906 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1224736909, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI33554456, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI33554456, name: "last", sons: null}]};
NTI1224736906.node = NNI1224736906;
NTI1241513991.base = NTI687865917;
NTI1241513990.base = NTI1241513991;
var NNI1241514197 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "captures", len: 0, typ: NTI1241513990, name: "captures", sons: null}, 
{kind: 1, offset: "namedGroups", len: 0, typ: NTI1224736906, name: "namedGroups", sons: null}, 
{kind: 1, offset: "boundaries", len: 0, typ: NTI687865917, name: "boundaries", sons: null}]};
NTI1241514197.node = NNI1241514197;
var NNI1090519051 = {kind: 2, offset: 0, typ: null, name: null, len: 47, sons: {"0": {kind: 1, offset: 0, typ: NTI1090519051, name: "reChar", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1090519051, name: "reCharCi", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1090519051, name: "reJoiner", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1090519051, name: "reGroupStart", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1090519051, name: "reGroupEnd", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1090519051, name: "reFlags", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1090519051, name: "reOr", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1090519051, name: "reZeroOrMore", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1090519051, name: "reOneOrMore", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1090519051, name: "reZeroOrOne", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1090519051, name: "reRepRange", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1090519051, name: "reStartSym", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI1090519051, name: "reEndSym", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI1090519051, name: "reStartSymML", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI1090519051, name: "reEndSymML", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI1090519051, name: "reStart", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI1090519051, name: "reEnd", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI1090519051, name: "reWordBoundary", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI1090519051, name: "reNotWordBoundary", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI1090519051, name: "reWord", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI1090519051, name: "reDigit", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI1090519051, name: "reWhiteSpace", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI1090519051, name: "reUCC", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI1090519051, name: "reNotAlphaNum", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI1090519051, name: "reNotDigit", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI1090519051, name: "reNotWhiteSpace", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI1090519051, name: "reNotUCC", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI1090519051, name: "reAny", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI1090519051, name: "reAnyNl", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI1090519051, name: "reWordBoundaryAscii", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI1090519051, name: "reNotWordBoundaryAscii", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI1090519051, name: "reWordAscii", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI1090519051, name: "reDigitAscii", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI1090519051, name: "reWhiteSpaceAscii", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI1090519051, name: "reNotAlphaNumAscii", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI1090519051, name: "reNotDigitAscii", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI1090519051, name: "reNotWhiteSpaceAscii", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI1090519051, name: "reAnyAscii", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI1090519051, name: "reAnyNlAscii", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI1090519051, name: "reInSet", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI1090519051, name: "reNotSet", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI1090519051, name: "reLookahead", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI1090519051, name: "reLookbehind", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI1090519051, name: "reNotLookahead", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI1090519051, name: "reNotLookbehind", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI1090519051, name: "reSkip", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI1090519051, name: "reEoe", len: 0, sons: null}}};
NTI1090519051.node = NNI1090519051;
NTI1090519062.base = NTI33554458;
var NNI1090519050 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"0": {kind: 1, offset: 0, typ: NTI1090519050, name: "flagCaseInsensitive", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1090519050, name: "flagNotCaseInsensitive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1090519050, name: "flagMultiLine", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1090519050, name: "flagNotMultiLine", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1090519050, name: "flagAnyMatchNewLine", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1090519050, name: "flagNotAnyMatchNewLine", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1090519050, name: "flagUnGreedy", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1090519050, name: "flagNotUnGreedy", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1090519050, name: "flagUnicode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1090519050, name: "flagNotUnicode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1090519050, name: "flagVerbose", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1090519050, name: "flagNotVerbose", len: 0, sons: null}}};
NTI1090519050.node = NNI1090519050;
NTI1090519063.base = NTI1090519050;
var NNI1090519075 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI973078531, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI838860803, name: "Field1", sons: null}]};
NTI1090519075.node = NNI1090519075;
NTI1090519072.base = NTI1090519075;
var NNI1090519069 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1090519072, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}]};
NTI1090519069.node = NNI1090519069;
var NNI1090519085 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI838860803, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI838860803, name: "b", sons: null}]};
NTI1090519085.node = NNI1090519085;
NTI1090519077.base = NTI1090519085;
NTI1090519086.base = NTI1090519053;
NTI1090519055.base = NTI1090519053;
var NNI1090519044 = {kind: 1, offset: "s", len: 0, typ: NTI1090519055, name: "s", sons: null};
NTI1090519044.node = NNI1090519044;
var NNI1090519054 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nfa", len: 0, typ: NTI1090519049, name: "nfa", sons: null}, 
{kind: 1, offset: "rpn", len: 0, typ: NTI1090519044, name: "rpn", sons: null}, 
{kind: 1, offset: "reverseCapts", len: 0, typ: NTI33554466, name: "reverseCapts", sons: null}]};
NTI1090519054.node = NNI1090519054;
var NNI1090519053 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI1090519051, name: "kind", sons: null}, 
{kind: 1, offset: "cp", len: 0, typ: NTI838860803, name: "cp", sons: null}, 
{kind: 1, offset: "next", len: 0, typ: NTI1090519062, name: "next", sons: null}, 
{kind: 1, offset: "isGreedy", len: 0, typ: NTI33554466, name: "isGreedy", sons: null}, 
{kind: 1, offset: "uid", len: 0, typ: NTI1090519052, name: "uid", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI33554458, name: "idx", sons: null}, 
{kind: 1, offset: "isCapturing", len: 0, typ: NTI33554466, name: "isCapturing", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "flags", len: 0, typ: NTI1090519063, name: "flags", sons: null}, 
{kind: 1, offset: "min", len: 0, typ: NTI33554458, name: "min", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI33554458, name: "max", sons: null}, 
{kind: 1, offset: "cps", len: 0, typ: NTI1090519069, name: "cps", sons: null}, 
{kind: 1, offset: "ranges", len: 0, typ: NTI1090519077, name: "ranges", sons: null}, 
{kind: 1, offset: "shorthands", len: 0, typ: NTI1090519086, name: "shorthands", sons: null}, 
{kind: 1, offset: "cc", len: 0, typ: NTI33554459, name: "cc", sons: null}, 
{kind: 1, offset: "subExp", len: 0, typ: NTI1090519054, name: "subExp", sons: null}]};
NTI1090519053.node = NNI1090519053;
NTI1090519059.base = NTI1090519053;
NTI1090519057.base = NTI33554458;
NTI1090519046.base = NTI1090519057;
NTI1090519058.base = NTI1090519053;
NTI1090519047.base = NTI1090519058;
var NNI1090519048 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "allZ", len: 0, typ: NTI1090519046, name: "allZ", sons: null}, 
{kind: 1, offset: "z", len: 0, typ: NTI1090519047, name: "z", sons: null}]};
NTI1090519048.node = NNI1090519048;
var NNI1090519049 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI1090519059, name: "s", sons: null}, 
{kind: 1, offset: "t", len: 0, typ: NTI1090519048, name: "t", sons: null}]};
NTI1090519049.node = NNI1090519049;
var NNI1258291715 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lit", len: 0, typ: NTI838860803, name: "lit", sons: null}, 
{kind: 1, offset: "nfa", len: 0, typ: NTI1090519049, name: "nfa", sons: null}]};
NTI1258291715.node = NNI1258291715;
var NNI1241514194 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nfa", len: 0, typ: NTI1090519049, name: "nfa", sons: null}, 
{kind: 1, offset: "groupsCount", len: 0, typ: NTI33554458, name: "groupsCount", sons: null}, 
{kind: 1, offset: "namedGroups", len: 0, typ: NTI1224736906, name: "namedGroups", sons: null}, 
{kind: 1, offset: "litOpt", len: 0, typ: NTI1258291715, name: "litOpt", sons: null}]};
NTI1241514194.node = NNI1241514194;
NTI1174406494.base = NTI1090519053;
NTI1224738154.base = NTI1090519053;
var NNI1224738411 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1224738411, name: "asyRight", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1224738411, name: "asyLeft", len: 0, sons: null}}};
NTI1224738411.node = NNI1224738411;
var NNI1224738412 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1224738411, name: "Field1", sons: null}]};
NTI1224738412.node = NNI1224738412;
var NNI1140850705 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1140850705.node = NNI1140850705;
NTI1140850705.base = NTI33555125;
var NNI33555132 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555132.node = NNI33555132;
NTI33555132.base = NTI33555113;
NTI1191182341.base = NTI1090519053;
var NNI1191182339 = {kind: 1, offset: "s", len: 0, typ: NTI1191182341, name: "s", sons: null};
NTI1191182339.node = NNI1191182339;
NTI1224736852.base = NTI1090519053;
NTI1224738058.base = NTI1090519050;
NTI1191182342.base = NTI1090519053;
var NNI1191182340 = {kind: 1, offset: "s", len: 0, typ: NTI1191182342, name: "s", sons: null};
NTI1191182340.node = NNI1191182340;
NTI838872505.base = NTI838860803;
var NNI838862344 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI838862344.node = NNI838862344;
NTI1090519218.base = NTI1090519050;
NTI1174406355.base = NTI1090519050;
NTI1325400468.base = NTI33554458;
NTI1325400601.base = NTI1090519053;
NTI1325400070.base = NTI33554458;
NTI1090519056.base = NTI1090519053;
var NNI1090519045 = {kind: 1, offset: "s", len: 0, typ: NTI1090519056, name: "s", sons: null};
NTI1090519045.node = NNI1090519045;
var NNI1325400816 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554458, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554458, name: "Field1", sons: null}]};
NTI1325400816.node = NNI1325400816;
NTI1258291212.base = NTI33554458;
var NNI1258291610 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554458, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554458, name: "Field1", sons: null}]};
NTI1258291610.node = NNI1258291610;
var NNI436208084 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI973078531, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI436208040, name: "Field2", sons: null}]};
NTI436208084.node = NNI436208084;
NTI436208081.base = NTI436208084;
var NNI436208078 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI436208081, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}]};
NTI436208078.node = NNI436208078;
var NNI1509949535 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI973078531, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI1509949535.node = NNI1509949535;
NTI1509949532.base = NTI1509949535;
var NNI1509949529 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1509949532, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}]};
NTI1509949529.node = NNI1509949529;
NTI1509950698.base = NTI838860803;
var NNI436208039 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI436208040, name: "Field1", sons: null}]};
NTI436208039.node = NNI436208039;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
NTI33555126.base = NTI33555125;
var NNI436207639 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI973078531, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}]};
NTI436207639.node = NNI436207639;
NTI436207636.base = NTI436207639;
var NNI436207633 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI436207636, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554456, name: "counter", sons: null}]};
NTI436207633.node = NNI436207633;
var NNI436208958 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI436207633, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI436208959, name: "Field1", sons: null}]};
NTI436208958.node = NNI436208958;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function arrayConstr(len_33557179, value_33557180, typ_33557181) {
        var result = new Array(len_33557179);
    for (var i = 0; i < len_33557179; ++i) result[i] = nimCopy(null, value_33557180, typ_33557181);
    return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    e_33556667.trace = nimCopy(null, rawWriteStackTrace_33556631(), NTI33554439);
    throw e_33556667;

  
}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function eqStrings(a_33556931, b_33556932) {
        if (a_33556931 == b_33556932) return true;
    if (a_33556931 === null && b_33556932.length == 0) return true;
    if (b_33556932 === null && a_33556931.length == 0) return true;
    if ((!a_33556931) || (!b_33556932)) return false;
    var alen = a_33556931.length;
    if (alen != b_33556932.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556931[i] != b_33556932[i]) return false;
    return true;
  

  
}

function nimMax(a_33556998, b_33556999) {
    var Temporary1;

  var result_33557000 = 0;

  BeforeRet: do {
    if ((b_33556999 <= a_33556998)) {
    Temporary1 = a_33556998;
    }
    else {
    Temporary1 = b_33556999;
    }
    
    result_33557000 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557000;

}

function nimMin(a_33556994, b_33556995) {
    var Temporary1;

  var result_33556996 = 0;

  BeforeRet: do {
    if ((a_33556994 <= b_33556995)) {
    Temporary1 = a_33556994;
    }
    else {
    Temporary1 = b_33556995;
    }
    
    result_33556996 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556996;

}

function divInt(a_33556952, b_33556953) {
        if (b_33556953 == 0) raiseDivByZero();
    if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556952 / b_33556953);
  

  
}

function modInt(a_33556956, b_33556957) {
        if (b_33556957 == 0) raiseDivByZero();
    if (b_33556957 == -1 && a_33556956 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556956 % b_33556957);
  

  
}

function mulInt(a_33556948, b_33556949) {
        var result = a_33556948 * b_33556949;
    checkOverflowInt(result);
    return result;
  

  
}
                        var decompsOffsets_1493172225 = new Int8Array([0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 16, 7, 17, 18, 19, 20, 21, 22, 23, 24, 7, 7, 7, 7, 7, 25, 7, 26, 27, 28, 29, 30, 31, 32, 33, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 34, 35, 7, 7, 7, 36, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 37, 38, 39, 40, 41, 42, 43, 7, 7, 7, 7, 7, 7, 7, 44, 7, 7, 7, 7, 7, 7, 7, 7, 45, 46, 7, 47, 48, 49, 7, 7, 7, 50, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 51, 7, 7, 52, 53, 54, 55, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 56, 7, 7, 57, 58, 7, 7, 7, 7, 7, 7, 7, 7, 59, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 60, 61, 62, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]);
                        var decompsIndices_1493172226 = new Int16Array
                        var decompsData_1493172227 = new Int32Array([2, 32, 4, 32, 776, 2, 97, 4, 32, 772, 2, 50, 2, 51, 4, 32, 769, 2, 956, 4, 32, 807, 2, 49, 2, 111, 6, 49, 8260, 52, 6, 49, 8260, 50, 6, 51, 8260, 52, 5, 65, 768, 5, 65, 769, 5, 65, 770, 5, 65, 771, 5, 65, 776, 5, 65, 778, 5, 67, 807, 5, 69, 768, 5, 69, 769, 5, 69, 770, 5, 69, 776, 5, 73, 768, 5, 73, 769, 5, 73, 770, 5, 73, 776, 5, 78, 771, 5, 79, 768, 5, 79, 769, 5, 79, 770, 5, 79, 771, 5, 79, 776, 5, 85, 768, 5, 85, 769, 5, 85, 770, 5, 85, 776, 5, 89, 769, 5, 97, 768, 5, 97, 769, 5, 97, 770, 5, 97, 771, 5, 97, 776, 5, 97, 778, 5, 99, 807, 5, 101, 768, 5, 101, 769, 5, 101, 770, 5, 101, 776, 5, 105, 768, 5, 105, 769, 5, 105, 770, 5, 105, 776, 5, 110, 771, 5, 111, 768, 5, 111, 769, 5, 111, 770, 5, 111, 771, 5, 111, 776, 5, 117, 768, 5, 117, 769, 5, 117, 770, 5, 117, 776, 5, 121, 769, 5, 121, 776, 5, 65, 772, 5, 97, 772, 5, 65, 774, 5, 97, 774, 5, 65, 808, 5, 97, 808, 5, 67, 769, 5, 99, 769, 5, 67, 770, 5, 99, 770, 5, 67, 775, 5, 99, 775, 5, 67, 780, 5, 99, 780, 5, 68, 780, 5, 100, 780, 5, 69, 772, 5, 101, 772, 5, 69, 774, 5, 101, 774, 5, 69, 775, 5, 101, 775, 5, 69, 808, 5, 101, 808, 5, 69, 780, 5, 101, 780, 5, 71, 770, 5, 103, 770, 5, 71, 774, 5, 103, 774, 5, 71, 775, 5, 103, 775, 5, 71, 807, 5, 103, 807, 5, 72, 770, 5, 104, 770, 5, 73, 771, 5, 105, 771, 5, 73, 772, 5, 105, 772, 5, 73, 774, 5, 105, 774, 5, 73, 808, 5, 105, 808, 5, 73, 775, 4, 73, 74, 4, 105, 106, 5, 74, 770, 5, 106, 770, 5, 75, 807, 5, 107, 807, 5, 76, 769, 5, 108, 769, 5, 76, 807, 5, 108, 807, 5, 76, 780, 5, 108, 780, 4, 76, 183, 4, 108, 183, 5, 78, 769, 5, 110, 769, 5, 78, 807, 5, 110, 807, 5, 78, 780, 5, 110, 780, 4, 700, 110, 5, 79, 772, 5, 111, 772, 5, 79, 774, 5, 111, 774, 5, 79, 779, 5, 111, 779, 5, 82, 769, 5, 114, 769, 5, 82, 807, 5, 114, 807, 5, 82, 780, 5, 114, 780, 5, 83, 769, 5, 115, 769, 5, 83, 770, 5, 115, 770, 5, 83, 807, 5, 115, 807, 5, 83, 780, 5, 115, 780, 5, 84, 807, 5, 116, 807, 5, 84, 780, 5, 116, 780, 5, 85, 771, 5, 117, 771, 5, 85, 772, 5, 117, 772, 5, 85, 774, 5, 117, 774, 5, 85, 778, 5, 117, 778, 5, 85, 779, 5, 117, 779, 5, 85, 808, 5, 117, 808, 5, 87, 770, 5, 119, 770, 5, 89, 770, 5, 121, 770, 5, 89, 776, 5, 90, 769, 5, 122, 769, 5, 90, 775, 5, 122, 775, 5, 90, 780, 5, 122, 780, 2, 115, 5, 79, 795, 5, 111, 795, 5, 85, 795, 5, 117, 795, 4, 68, 381, 4, 68, 382, 4, 100, 382, 4, 76, 74, 4, 76, 106, 4, 108, 106, 4, 78, 74, 4, 78, 106, 4, 110, 106, 5, 65, 780, 5, 97, 780, 5, 73, 780, 5, 105, 780, 5, 79, 780, 5, 111, 780, 5, 85, 780, 5, 117, 780, 5, 220, 772, 5, 252, 772, 5, 220, 769, 5, 252, 769, 5, 220, 780, 5, 252, 780, 5, 220, 768, 5, 252, 768, 5, 196, 772, 5, 228, 772, 5, 550, 772, 5, 551, 772, 5, 198, 772, 5, 230, 772, 5, 71, 780, 5, 103, 780, 5, 75, 780, 5, 107, 780, 5, 79, 808, 5, 111, 808, 5, 490, 772, 5, 491, 772, 5, 439, 780, 5, 658, 780, 5, 106, 780, 4, 68, 90, 4, 68, 122, 4, 100, 122, 5, 71, 769, 5, 103, 769, 5, 78, 768, 5, 110, 768, 5, 197, 769, 5, 229, 769, 5, 198, 769, 5, 230, 769, 5, 216, 769, 5, 248, 769, 5, 65, 783, 5, 97, 783, 5, 65, 785, 5, 97, 785, 5, 69, 783, 5, 101, 783, 5, 69, 785, 5, 101, 785, 5, 73, 783, 5, 105, 783, 5, 73, 785, 5, 105, 785, 5, 79, 783, 5, 111, 783, 5, 79, 785, 5, 111, 785, 5, 82, 783, 5, 114, 783, 5, 82, 785, 5, 114, 785, 5, 85, 783, 5, 117, 783, 5, 85, 785, 5, 117, 785, 5, 83, 806, 5, 115, 806, 5, 84, 806, 5, 116, 806, 5, 72, 780, 5, 104, 780, 5, 65, 775, 5, 97, 775, 5, 69, 807, 5, 101, 807, 5, 214, 772, 5, 246, 772, 5, 213, 772, 5, 245, 772, 5, 79, 775, 5, 111, 775, 5, 558, 772, 5, 559, 772, 5, 89, 772, 5, 121, 772, 2, 104, 2, 614, 2, 106, 2, 114, 2, 633, 2, 635, 2, 641, 2, 119, 2, 121, 4, 32, 774, 4, 32, 775, 4, 32, 778, 4, 32, 808, 4, 32, 771, 4, 32, 779, 2, 611, 2, 108, 2, 115, 2, 120, 2, 661, 3, 768, 3, 769, 3, 787, 5, 776, 769, 3, 697, 4, 32, 837, 3, 59, 4, 32, 769, 5, 168, 769, 5, 913, 769, 3, 183, 5, 917, 769, 5, 919, 769, 5, 921, 769, 5, 927, 769, 5, 933, 769, 5, 937, 769, 5, 970, 769, 5, 921, 776, 5, 933, 776, 5, 945, 769, 5, 949, 769, 5, 951, 769, 5, 953, 769, 5, 971, 769, 5, 953, 776, 5, 965, 776, 5, 959, 769, 5, 965, 769, 5, 969, 769, 2, 946, 2, 952, 2, 933, 5, 978, 769, 5, 978, 776, 2, 966, 2, 960, 2, 954, 2, 961, 2, 962, 2, 920, 2, 949, 2, 931, 5, 1045, 768, 5, 1045, 776, 5, 1043, 769, 5, 1030, 776, 5, 1050, 769, 5, 1048, 768, 5, 1059, 774, 5, 1048, 774, 5, 1080, 774, 5, 1077, 768, 5, 1077, 776, 5, 1075, 769, 5, 1110, 776, 5, 1082, 769, 5, 1080, 768, 5, 1091, 774, 5, 1140, 783, 5, 1141, 783, 5, 1046, 774, 5, 1078, 774, 5, 1040, 774, 5, 1072, 774, 5, 1040, 776, 5, 1072, 776, 5, 1045, 774, 5, 1077, 774, 5, 1240, 776, 5, 1241, 776, 5, 1046, 776, 5, 1078, 776, 5, 1047, 776, 5, 1079, 776, 5, 1048, 772, 5, 1080, 772, 5, 1048, 776, 5, 1080, 776, 5, 1054, 776, 5, 1086, 776, 5, 1256, 776, 5, 1257, 776, 5, 1069, 776, 5, 1101, 776, 5, 1059, 772, 5, 1091, 772, 5, 1059, 776, 5, 1091, 776, 5, 1059, 779, 5, 1091, 779, 5, 1063, 776, 5, 1095, 776, 5, 1067, 776, 5, 1099, 776, 4, 1381, 1410, 5, 1575, 1619, 5, 1575, 1620, 5, 1608, 1620, 5, 1575, 1621, 5, 1610, 1620, 4, 1575, 1652, 4, 1608, 1652, 4, 1735, 1652, 4, 1610, 1652, 5, 1749, 1620, 5, 1729, 1620, 5, 1746, 1620, 5, 2344, 2364, 5, 2352, 2364, 5, 2355, 2364, 5, 2325, 2364, 5, 2326, 2364, 5, 2327, 2364, 5, 2332, 2364, 5, 2337, 2364, 5, 2338, 2364, 5, 2347, 2364, 5, 2351, 2364, 5, 2503, 2494, 5, 2503, 2519, 5, 2465, 2492, 5, 2466, 2492, 5, 2479, 2492, 5, 2610, 2620, 5, 2616, 2620, 5, 2582, 2620, 5, 2583, 2620, 5, 2588, 2620, 5, 2603, 2620, 5, 2887, 2902, 5, 2887, 2878, 5, 2887, 2903, 5, 2849, 2876, 5, 2850, 2876, 5, 2962, 3031, 5, 3014, 3006, 5, 3015, 3006, 5, 3014, 3031, 5, 3142, 3158, 5, 3263, 3285, 5, 3270, 3285, 5, 3270, 3286, 5, 3270, 3266, 5, 3274, 3285, 5, 3398, 3390, 5, 3399, 3390, 5, 3398, 3415, 5, 3545, 3530, 5, 3545, 3535, 5, 3548, 3530, 5, 3545, 3551, 4, 3661, 3634, 4, 3789, 3762, 4, 3755, 3737, 4, 3755, 3745, 2, 3851, 5, 3906, 4023, 5, 3916, 4023, 5, 3921, 4023, 5, 3926, 4023, 5, 3931, 4023, 5, 3904, 4021, 5, 3953, 3954, 5, 3953, 3956, 5, 4018, 3968, 4, 4018, 3969, 5, 4019, 3968, 4, 4019, 3969, 5, 3953, 3968, 5, 3986, 4023, 5, 3996, 4023, 5, 4001, 4023, 5, 4006, 4023, 5, 4011, 4023, 5, 3984, 4021, 5, 4133, 4142, 2, 4316, 5, 6917, 6965, 5, 6919, 6965, 5, 6921, 6965, 5, 6923, 6965, 5, 6925, 6965, 5, 6929, 6965, 5, 6970, 6965, 5, 6972, 6965, 5, 6974, 6965, 5, 6975, 6965, 5, 6978, 6965, 2, 65, 2, 198, 2, 66, 2, 68, 2, 69, 2, 398, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 546, 2, 80, 2, 82, 2, 84, 2, 85, 2, 87, 2, 97, 2, 592, 2, 593, 2, 7426, 2, 98, 2, 100, 2, 101, 2, 601, 2, 603, 2, 604, 2, 103, 2, 107, 2, 109, 2, 331, 2, 111, 2, 596, 2, 7446, 2, 7447, 2, 112, 2, 116, 2, 117, 2, 7453, 2, 623, 2, 118, 2, 7461, 2, 946, 2, 947, 2, 948, 2, 966, 2, 967, 2, 105, 2, 114, 2, 117, 2, 118, 2, 946, 2, 947, 2, 961, 2, 966, 2, 967, 2, 1085, 2, 594, 2, 99, 2, 597, 2, 240, 2, 604, 2, 102, 2, 607, 2, 609, 2, 613, 2, 616, 2, 617, 2, 618, 2, 7547, 2, 669, 2, 621, 2, 7557, 2, 671, 2, 625, 2, 624, 2, 626, 2, 627, 2, 628, 2, 629, 2, 632, 2, 642, 2, 643, 2, 427, 2, 649, 2, 650, 2, 7452, 2, 651, 2, 652, 2, 122, 2, 656, 2, 657, 2, 658, 2, 952, 5, 65, 805, 5, 97, 805, 5, 66, 775, 5, 98, 775, 5, 66, 803, 5, 98, 803, 5, 66, 817, 5, 98, 817, 5, 199, 769, 5, 231, 769, 5, 68, 775, 5, 100, 775, 5, 68, 803, 5, 100, 803, 5, 68, 817, 5, 100, 817, 5, 68, 807, 5, 100, 807, 5, 68, 813, 5, 100, 813, 5, 274, 768, 5, 275, 768, 5, 274, 769, 5, 275, 769, 5, 69, 813, 5, 101, 813, 5, 69, 816, 5, 101, 816, 5, 552, 774, 5, 553, 774, 5, 70, 775, 5, 102, 775, 5, 71, 772, 5, 103, 772, 5, 72, 775, 5, 104, 775, 5, 72, 803, 5, 104, 803, 5, 72, 776, 5, 104, 776, 5, 72, 807, 5, 104, 807, 5, 72, 814, 5, 104, 814, 5, 73, 816, 5, 105, 816, 5, 207, 769, 5, 239, 769, 5, 75, 769, 5, 107, 769, 5, 75, 803, 5, 107, 803, 5, 75, 817, 5, 107, 817, 5, 76, 803, 5, 108, 803, 5, 7734, 772, 5, 7735, 772, 5, 76, 817, 5, 108, 817, 5, 76, 813, 5, 108, 813, 5, 77, 769, 5, 109, 769, 5, 77, 775, 5, 109, 775, 5, 77, 803, 5, 109, 803, 5, 78, 775, 5, 110, 775, 5, 78, 803, 5, 110, 803, 5, 78, 817, 5, 110, 817, 5, 78, 813, 5, 110, 813, 5, 213, 769, 5, 245, 769, 5, 213, 776, 5, 245, 776, 5, 332, 768, 5, 333, 768, 5, 332, 769, 5, 333, 769, 5, 80, 769, 5, 112, 769, 5, 80, 775, 5, 112, 775, 5, 82, 775, 5, 114, 775, 5, 82, 803, 5, 114, 803, 5, 7770, 772, 5, 7771, 772, 5, 82, 817, 5, 114, 817, 5, 83, 775, 5, 115, 775, 5, 83, 803, 5, 115, 803, 5, 346, 775, 5, 347, 775, 5, 352, 775, 5, 353, 775, 5, 7778, 775, 5, 7779, 775, 5, 84, 775, 5, 116, 775, 5, 84, 803, 5, 116, 803, 5, 84, 817, 5, 116, 817, 5, 84, 813, 5, 116, 813, 5, 85, 804, 5, 117, 804, 5, 85, 816, 5, 117, 816, 5, 85, 813, 5, 117, 813, 5, 360, 769, 5, 361, 769, 5, 362, 776, 5, 363, 776, 5, 86, 771, 5, 118, 771, 5, 86, 803, 5, 118, 803, 5, 87, 768, 5, 119, 768, 5, 87, 769, 5, 119, 769, 5, 87, 776, 5, 119, 776, 5, 87, 775, 5, 119, 775, 5, 87, 803, 5, 119, 803, 5, 88, 775, 5, 120, 775, 5, 88, 776, 5, 120, 776, 5, 89, 775, 5, 121, 775, 5, 90, 770, 5, 122, 770, 5, 90, 803, 5, 122, 803, 5, 90, 817, 5, 122, 817, 5, 104, 817, 5, 116, 776, 5, 119, 778, 5, 121, 778, 4, 97, 702, 5, 383, 775, 5, 65, 803, 5, 97, 803, 5, 65, 777, 5, 97, 777, 5, 194, 769, 5, 226, 769, 5, 194, 768, 5, 226, 768, 5, 194, 777, 5, 226, 777, 5, 194, 771, 5, 226, 771, 5, 7840, 770, 5, 7841, 770, 5, 258, 769, 5, 259, 769, 5, 258, 768, 5, 259, 768, 5, 258, 777, 5, 259, 777, 5, 258, 771, 5, 259, 771, 5, 7840, 774, 5, 7841, 774, 5, 69, 803, 5, 101, 803, 5, 69, 777, 5, 101, 777, 5, 69, 771, 5, 101, 771, 5, 202, 769, 5, 234, 769, 5, 202, 768, 5, 234, 768, 5, 202, 777, 5, 234, 777, 5, 202, 771, 5, 234, 771, 5, 7864, 770, 5, 7865, 770, 5, 73, 777, 5, 105, 777, 5, 73, 803, 5, 105, 803, 5, 79, 803, 5, 111, 803, 5, 79, 777, 5, 111, 777, 5, 212, 769, 5, 244, 769, 5, 212, 768, 5, 244, 768, 5, 212, 777, 5, 244, 777, 5, 212, 771, 5, 244, 771, 5, 7884, 770, 5, 7885, 770, 5, 416, 769, 5, 417, 769, 5, 416, 768, 5, 417, 768, 5, 416, 777, 5, 417, 777, 5, 416, 771, 5, 417, 771, 5, 416, 803, 5, 417, 803, 5, 85, 803, 5, 117, 803, 5, 85, 777, 5, 117, 777, 5, 431, 769, 5, 432, 769, 5, 431, 768, 5, 432, 768, 5, 431, 777, 5, 432, 777, 5, 431, 771, 5, 432, 771, 5, 431, 803, 5, 432, 803, 5, 89, 768, 5, 121, 768, 5, 89, 803, 5, 121, 803, 5, 89, 777, 5, 121, 777, 5, 89, 771, 5, 121, 771, 5, 945, 787, 5, 945, 788, 5, 7936, 768, 5, 7937, 768, 5, 7936, 769, 5, 7937, 769, 5, 7936, 834, 5, 7937, 834, 5, 913, 787, 5, 913, 788, 5, 7944, 768, 5, 7945, 768, 5, 7944, 769, 5, 7945, 769, 5, 7944, 834, 5, 7945, 834, 5, 949, 787, 5, 949, 788, 5, 7952, 768, 5, 7953, 768, 5, 7952, 769, 5, 7953, 769, 5, 917, 787, 5, 917, 788, 5, 7960, 768, 5, 7961, 768, 5, 7960, 769, 5, 7961, 769, 5, 951, 787, 5, 951, 788, 5, 7968, 768, 5, 7969, 768, 5, 7968, 769, 5, 7969, 769, 5, 7968, 834, 5, 7969, 834, 5, 919, 787, 5, 919, 788, 5, 7976, 768, 5, 7977, 768, 5, 7976, 769, 5, 7977, 769, 5, 7976, 834, 5, 7977, 834, 5, 953, 787, 5, 953, 788, 5, 7984, 768, 5, 7985, 768, 5, 7984, 769, 5, 7985, 769, 5, 7984, 834, 5, 7985, 834, 5, 921, 787, 5, 921, 788, 5, 7992, 768, 5, 7993, 768, 5, 7992, 769, 5, 7993, 769, 5, 7992, 834, 5, 7993, 834, 5, 959, 787, 5, 959, 788, 5, 8000, 768, 5, 8001, 768, 5, 8000, 769, 5, 8001, 769, 5, 927, 787, 5, 927, 788, 5, 8008, 768, 5, 8009, 768, 5, 8008, 769, 5, 8009, 769, 5, 965, 787, 5, 965, 788, 5, 8016, 768, 5, 8017, 768, 5, 8016, 769, 5, 8017, 769, 5, 8016, 834, 5, 8017, 834, 5, 933, 788, 5, 8025, 768, 5, 8025, 769, 5, 8025, 834, 5, 969, 787, 5, 969, 788, 5, 8032, 768, 5, 8033, 768, 5, 8032, 769, 5, 8033, 769, 5, 8032, 834, 5, 8033, 834, 5, 937, 787, 5, 937, 788, 5, 8040, 768, 5, 8041, 768, 5, 8040, 769, 5, 8041, 769, 5, 8040, 834, 5, 8041, 834, 5, 945, 768, 3, 940, 5, 949, 768, 3, 941, 5, 951, 768, 3, 942, 5, 953, 768, 3, 943, 5, 959, 768, 3, 972, 5, 965, 768, 3, 973, 5, 969, 768, 3, 974, 5, 7936, 837, 5, 7937, 837, 5, 7938, 837, 5, 7939, 837, 5, 7940, 837, 5, 7941, 837, 5, 7942, 837, 5, 7943, 837, 5, 7944, 837, 5, 7945, 837, 5, 7946, 837, 5, 7947, 837, 5, 7948, 837, 5, 7949, 837, 5, 7950, 837, 5, 7951, 837, 5, 7968, 837, 5, 7969, 837, 5, 7970, 837, 5, 7971, 837, 5, 7972, 837, 5, 7973, 837, 5, 7974, 837, 5, 7975, 837, 5, 7976, 837, 5, 7977, 837, 5, 7978, 837, 5, 7979, 837, 5, 7980, 837, 5, 7981, 837, 5, 7982, 837, 5, 7983, 837, 5, 8032, 837, 5, 8033, 837, 5, 8034, 837, 5, 8035, 837, 5, 8036, 837, 5, 8037, 837, 5, 8038, 837, 5, 8039, 837, 5, 8040, 837, 5, 8041, 837, 5, 8042, 837, 5, 8043, 837, 5, 8044, 837, 5, 8045, 837, 5, 8046, 837, 5, 8047, 837, 5, 945, 774, 5, 945, 772, 5, 8048, 837, 5, 945, 837, 5, 940, 837, 5, 945, 834, 5, 8118, 837, 5, 913, 774, 5, 913, 772, 5, 913, 768, 3, 902, 5, 913, 837, 4, 32, 787, 3, 953, 4, 32, 787, 4, 32, 834, 5, 168, 834, 5, 8052, 837, 5, 951, 837, 5, 942, 837, 5, 951, 834, 5, 8134, 837, 5, 917, 768, 3, 904, 5, 919, 768, 3, 905, 5, 919, 837, 5, 8127, 768, 5, 8127, 769, 5, 8127, 834, 5, 953, 774, 5, 953, 772, 5, 970, 768, 3, 912, 5, 953, 834, 5, 970, 834, 5, 921, 774, 5, 921, 772, 5, 921, 768, 3, 906, 5, 8190, 768, 5, 8190, 769, 5, 8190, 834, 5, 965, 774, 5, 965, 772, 5, 971, 768, 3, 944, 5, 961, 787, 5, 961, 788, 5, 965, 834, 5, 971, 834, 5, 933, 774, 5, 933, 772, 5, 933, 768, 3, 910, 5, 929, 788, 5, 168, 768, 3, 901, 3, 96, 5, 8060, 837, 5, 969, 837, 5, 974, 837, 5, 969, 834, 5, 8182, 837, 5, 927, 768, 3, 908, 5, 937, 768, 3, 911, 5, 937, 837, 3, 180, 4, 32, 788, 3, 8194, 3, 8195, 2, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 8208, 4, 32, 819, 2, 46, 4, 46, 46, 6, 46, 46, 46, 2, 32, 4, 8242, 8242, 6, 8242, 8242, 8242, 4, 8245, 8245, 6, 8245, 8245, 8245, 4, 33, 33, 4, 32, 773, 4, 63, 63, 4, 63, 33, 4, 33, 63, 8, 8242, 8242, 8242, 8242, 2, 32, 2, 48, 2, 105, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 43, 2, 8722, 2, 61, 2, 40, 2, 41, 2, 110, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 43, 2, 8722, 2, 61, 2, 40, 2, 41, 2, 97, 2, 101, 2, 111, 2, 120, 2, 601, 2, 104, 2, 107, 2, 108, 2, 109, 2, 110, 2, 112, 2, 115, 2, 116, 4, 82, 115, 6, 97, 47, 99, 6, 97, 47, 115, 2, 67, 4, 176, 67, 6, 99, 47, 111, 6, 99, 47, 117, 2, 400, 4, 176, 70, 2, 103, 2, 72, 2, 72, 2, 72, 2, 104, 2, 295, 2, 73, 2, 73, 2, 76, 2, 108, 2, 78, 4, 78, 111, 2, 80, 2, 81, 2, 82, 2, 82, 2, 82, 4, 83, 77, 6, 84, 69, 76, 4, 84, 77, 2, 90, 3, 937, 2, 90, 3, 75, 3, 197, 2, 66, 2, 67, 2, 101, 2, 69, 2, 70, 2, 77, 2, 111, 2, 1488, 2, 1489, 2, 1490, 2, 1491, 2, 105, 6, 70, 65, 88, 2, 960, 2, 947, 2, 915, 2, 928, 2, 8721, 2, 68, 2, 100, 2, 101, 2, 105, 2, 106, 6, 49, 8260, 55, 6, 49, 8260, 57, 8, 49, 8260, 49, 48, 6, 49, 8260, 51, 6, 50, 8260, 51, 6, 49, 8260, 53, 6, 50, 8260, 53, 6, 51, 8260, 53, 6, 52, 8260, 53, 6, 49, 8260, 54, 6, 53, 8260, 54, 6, 49, 8260, 56, 6, 51, 8260, 56, 6, 53, 8260, 56, 6, 55, 8260, 56, 4, 49, 8260, 2, 73, 4, 73, 73, 6, 73, 73, 73, 4, 73, 86, 2, 86, 4, 86, 73, 6, 86, 73, 73, 8, 86, 73, 73, 73, 4, 73, 88, 2, 88, 4, 88, 73, 6, 88, 73, 73, 2, 76, 2, 67, 2, 68, 2, 77, 2, 105, 4, 105, 105, 6, 105, 105, 105, 4, 105, 118, 2, 118, 4, 118, 105, 6, 118, 105, 105, 8, 118, 105, 105, 105, 4, 105, 120, 2, 120, 4, 120, 105, 6, 120, 105, 105, 2, 108, 2, 99, 2, 100, 2, 109, 6, 48, 8260, 51, 5, 8592, 824, 5, 8594, 824, 5, 8596, 824, 5, 8656, 824, 5, 8660, 824, 5, 8658, 824, 5, 8707, 824, 5, 8712, 824, 5, 8715, 824, 5, 8739, 824, 5, 8741, 824, 4, 8747, 8747, 6, 8747, 8747, 8747, 4, 8750, 8750, 6, 8750, 8750, 8750, 5, 8764, 824, 5, 8771, 824, 5, 8773, 824, 5, 8776, 824, 5, 61, 824, 5, 8801, 824, 5, 8781, 824, 5, 60, 824, 5, 62, 824, 5, 8804, 824, 5, 8805, 824, 5, 8818, 824, 5, 8819, 824, 5, 8822, 824, 5, 8823, 824, 5, 8826, 824, 5, 8827, 824, 5, 8834, 824, 5, 8835, 824, 5, 8838, 824, 5, 8839, 824, 5, 8866, 824, 5, 8872, 824, 5, 8873, 824, 5, 8875, 824, 5, 8828, 824, 5, 8829, 824, 5, 8849, 824, 5, 8850, 824, 5, 8882, 824, 5, 8883, 824, 5, 8884, 824, 5, 8885, 824, 3, 12296, 3, 12297, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 4, 49, 48, 4, 49, 49, 4, 49, 50, 4, 49, 51, 4, 49, 52, 4, 49, 53, 4, 49, 54, 4, 49, 55, 4, 49, 56, 4, 49, 57, 4, 50, 48, 6, 40, 49, 41, 6, 40, 50, 41, 6, 40, 51, 41, 6, 40, 52, 41, 6, 40, 53, 41, 6, 40, 54, 41, 6, 40, 55, 41, 6, 40, 56, 41, 6, 40, 57, 41, 8, 40, 49, 48, 41, 8, 40, 49, 49, 41, 8, 40, 49, 50, 41, 8, 40, 49, 51, 41, 8, 40, 49, 52, 41, 8, 40, 49, 53, 41, 8, 40, 49, 54, 41, 8, 40, 49, 55, 41, 8, 40, 49, 56, 41, 8, 40, 49, 57, 41, 8, 40, 50, 48, 41, 4, 49, 46, 4, 50, 46, 4, 51, 46, 4, 52, 46, 4, 53, 46, 4, 54, 46, 4, 55, 46, 4, 56, 46, 4, 57, 46, 6, 49, 48, 46, 6, 49, 49, 46, 6, 49, 50, 46, 6, 49, 51, 46, 6, 49, 52, 46, 6, 49, 53, 46, 6, 49, 54, 46, 6, 49, 55, 46, 6, 49, 56, 46, 6, 49, 57, 46, 6, 50, 48, 46, 6, 40, 97, 41, 6, 40, 98, 41, 6, 40, 99, 41, 6, 40, 100, 41, 6, 40, 101, 41, 6, 40, 102, 41, 6, 40, 103, 41, 6, 40, 104, 41, 6, 40, 105, 41, 6, 40, 106, 41, 6, 40, 107, 41, 6, 40, 108, 41, 6, 40, 109, 41, 6, 40, 110, 41, 6, 40, 111, 41, 6, 40, 112, 41, 6, 40, 113, 41, 6, 40, 114, 41, 6, 40, 115, 41, 6, 40, 116, 41, 6, 40, 117, 41, 6, 40, 118, 41, 6, 40, 119, 41, 6, 40, 120, 41, 6, 40, 121, 41, 6, 40, 122, 41, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 48, 8, 8747, 8747, 8747, 8747, 6, 58, 58, 61, 4, 61, 61, 6, 61, 61, 61, 5, 10973, 824, 2, 106, 2, 86, 2, 11617, 2, 27597, 2, 40863, 2, 19968, 2, 20008, 2, 20022, 2, 20031, 2, 20057, 2, 20101, 2, 20108, 2, 20128, 2, 20154, 2, 20799, 2, 20837, 2, 20843, 2, 20866, 2, 20886, 2, 20907, 2, 20960, 2, 20981, 2, 20992, 2, 21147, 2, 21241, 2, 21269, 2, 21274, 2, 21304, 2, 21313, 2, 21340, 2, 21353, 2, 21378, 2, 21430, 2, 21448, 2, 21475, 2, 22231, 2, 22303, 2, 22763, 2, 22786, 2, 22794, 2, 22805, 2, 22823, 2, 22899, 2, 23376, 2, 23424, 2, 23544, 2, 23567, 2, 23586, 2, 23608, 2, 23662, 2, 23665, 2, 24027, 2, 24037, 2, 24049, 2, 24062, 2, 24178, 2, 24186, 2, 24191, 2, 24308, 2, 24318, 2, 24331, 2, 24339, 2, 24400, 2, 24417, 2, 24435, 2, 24515, 2, 25096, 2, 25142, 2, 25163, 2, 25903, 2, 25908, 2, 25991, 2, 26007, 2, 26020, 2, 26041, 2, 26080, 2, 26085, 2, 26352, 2, 26376, 2, 26408, 2, 27424, 2, 27490, 2, 27513, 2, 27571, 2, 27595, 2, 27604, 2, 27611, 2, 27663, 2, 27668, 2, 27700, 2, 28779, 2, 29226, 2, 29238, 2, 29243, 2, 29247, 2, 29255, 2, 29273, 2, 29275, 2, 29356, 2, 29572, 2, 29577, 2, 29916, 2, 29926, 2, 29976, 2, 29983, 2, 29992, 2, 30000, 2, 30091, 2, 30098, 2, 30326, 2, 30333, 2, 30382, 2, 30399, 2, 30446, 2, 30683, 2, 30690, 2, 30707, 2, 31034, 2, 31160, 2, 31166, 2, 31348, 2, 31435, 2, 31481, 2, 31859, 2, 31992, 2, 32566, 2, 32593, 2, 32650, 2, 32701, 2, 32769, 2, 32780, 2, 32786, 2, 32819, 2, 32895, 2, 32905, 2, 33251, 2, 33258, 2, 33267, 2, 33276, 2, 33292, 2, 33307, 2, 33311, 2, 33390, 2, 33394, 2, 33400, 2, 34381, 2, 34411, 2, 34880, 2, 34892, 2, 34915, 2, 35198, 2, 35211, 2, 35282, 2, 35328, 2, 35895, 2, 35910, 2, 35925, 2, 35960, 2, 35997, 2, 36196, 2, 36208, 2, 36275, 2, 36523, 2, 36554, 2, 36763, 2, 36784, 2, 36789, 2, 37009, 2, 37193, 2, 37318, 2, 37324, 2, 37329, 2, 38263, 2, 38272, 2, 38428, 2, 38582, 2, 38585, 2, 38632, 2, 38737, 2, 38750, 2, 38754, 2, 38761, 2, 38859, 2, 38893, 2, 38899, 2, 38913, 2, 39080, 2, 39131, 2, 39135, 2, 39318, 2, 39321, 2, 39340, 2, 39592, 2, 39640, 2, 39647, 2, 39717, 2, 39727, 2, 39730, 2, 39740, 2, 39770, 2, 40165, 2, 40565, 2, 40575, 2, 40613, 2, 40635, 2, 40643, 2, 40653, 2, 40657, 2, 40697, 2, 40701, 2, 40718, 2, 40723, 2, 40736, 2, 40763, 2, 40778, 2, 40786, 2, 40845, 2, 40860, 2, 40864, 2, 32, 2, 12306, 2, 21313, 2, 21316, 2, 21317, 5, 12363, 12441, 5, 12365, 12441, 5, 12367, 12441, 5, 12369, 12441, 5, 12371, 12441, 5, 12373, 12441, 5, 12375, 12441, 5, 12377, 12441, 5, 12379, 12441, 5, 12381, 12441, 5, 12383, 12441, 5, 12385, 12441, 5, 12388, 12441, 5, 12390, 12441, 5, 12392, 12441, 5, 12399, 12441, 5, 12399, 12442, 5, 12402, 12441, 5, 12402, 12442, 5, 12405, 12441, 5, 12405, 12442, 5, 12408, 12441, 5, 12408, 12442, 5, 12411, 12441, 5, 12411, 12442, 5, 12358, 12441, 4, 32, 12441, 4, 32, 12442, 5, 12445, 12441, 4, 12424, 12426, 5, 12459, 12441, 5, 12461, 12441, 5, 12463, 12441, 5, 12465, 12441, 5, 12467, 12441, 5, 12469, 12441, 5, 12471, 12441, 5, 12473, 12441, 5, 12475, 12441, 5, 12477, 12441, 5, 12479, 12441, 5, 12481, 12441, 5, 12484, 12441, 5, 12486, 12441, 5, 12488, 12441, 5, 12495, 12441, 5, 12495, 12442, 5, 12498, 12441, 5, 12498, 12442, 5, 12501, 12441, 5, 12501, 12442, 5, 12504, 12441, 5, 12504, 12442, 5, 12507, 12441, 5, 12507, 12442, 5, 12454, 12441, 5, 12527, 12441, 5, 12528, 12441, 5, 12529, 12441, 5, 12530, 12441, 5, 12541, 12441, 4, 12467, 12488, 2, 4352, 2, 4353, 2, 4522, 2, 4354, 2, 4524, 2, 4525, 2, 4355, 2, 4356, 2, 4357, 2, 4528, 2, 4529, 2, 4530, 2, 4531, 2, 4532, 2, 4533, 2, 4378, 2, 4358, 2, 4359, 2, 4360, 2, 4385, 2, 4361, 2, 4362, 2, 4363, 2, 4364, 2, 4365, 2, 4366, 2, 4367, 2, 4368, 2, 4369, 2, 4370, 2, 4449, 2, 4450, 2, 4451, 2, 4452, 2, 4453, 2, 4454, 2, 4455, 2, 4456, 2, 4457, 2, 4458, 2, 4459, 2, 4460, 2, 4461, 2, 4462, 2, 4463, 2, 4464, 2, 4465, 2, 4466, 2, 4467, 2, 4468, 2, 4469, 2, 4448, 2, 4372, 2, 4373, 2, 4551, 2, 4552, 2, 4556, 2, 4558, 2, 4563, 2, 4567, 2, 4569, 2, 4380, 2, 4573, 2, 4575, 2, 4381, 2, 4382, 2, 4384, 2, 4386, 2, 4387, 2, 4391, 2, 4393, 2, 4395, 2, 4396, 2, 4397, 2, 4398, 2, 4399, 2, 4402, 2, 4406, 2, 4416, 2, 4423, 2, 4428, 2, 4593, 2, 4594, 2, 4439, 2, 4440, 2, 4441, 2, 4484, 2, 4485, 2, 4488, 2, 4497, 2, 4498, 2, 4500, 2, 4510, 2, 4513, 2, 19968, 2, 20108, 2, 19977, 2, 22235, 2, 19978, 2, 20013, 2, 19979, 2, 30002, 2, 20057, 2, 19993, 2, 19969, 2, 22825, 2, 22320, 2, 20154, 6, 40, 4352, 41, 6, 40, 4354, 41, 6, 40, 4355, 41, 6, 40, 4357, 41, 6, 40, 4358, 41, 6, 40, 4359, 41, 6, 40, 4361, 41, 6, 40, 4363, 41, 6, 40, 4364, 41, 6, 40, 4366, 41, 6, 40, 4367, 41, 6, 40, 4368, 41, 6, 40, 4369, 41, 6, 40, 4370, 41, 8, 40, 4352, 4449, 41, 8, 40, 4354, 4449, 41, 8, 40, 4355, 4449, 41, 8, 40, 4357, 4449, 41, 8, 40, 4358, 4449, 41, 8, 40, 4359, 4449, 41, 8, 40, 4361, 4449, 41, 8, 40, 4363, 4449, 41, 8, 40, 4364, 4449, 41, 8, 40, 4366, 4449, 41, 8, 40, 4367, 4449, 41, 8, 40, 4368, 4449, 41, 8, 40, 4369, 4449, 41, 8, 40, 4370, 4449, 41, 8, 40, 4364, 4462, 41, 14, 40, 4363, 4457, 4364, 4453, 4523, 41, 12, 40, 4363, 4457, 4370, 4462, 41, 6, 40, 19968, 41, 6, 40, 20108, 41, 6, 40, 19977, 41, 6, 40, 22235, 41, 6, 40, 20116, 41, 6, 40, 20845, 41, 6, 40, 19971, 41, 6, 40, 20843, 41, 6, 40, 20061, 41, 6, 40, 21313, 41, 6, 40, 26376, 41, 6, 40, 28779, 41, 6, 40, 27700, 41, 6, 40, 26408, 41, 6, 40, 37329, 41, 6, 40, 22303, 41, 6, 40, 26085, 41, 6, 40, 26666, 41, 6, 40, 26377, 41, 6, 40, 31038, 41, 6, 40, 21517, 41, 6, 40, 29305, 41, 6, 40, 36001, 41, 6, 40, 31069, 41, 6, 40, 21172, 41, 6, 40, 20195, 41, 6, 40, 21628, 41, 6, 40, 23398, 41, 6, 40, 30435, 41, 6, 40, 20225, 41, 6, 40, 36039, 41, 6, 40, 21332, 41, 6, 40, 31085, 41, 6, 40, 20241, 41, 6, 40, 33258, 41, 6, 40, 33267, 41, 2, 21839, 2, 24188, 2, 25991, 2, 31631, 6, 80, 84, 69, 4, 50, 49, 4, 50, 50, 4, 50, 51, 4, 50, 52, 4, 50, 53, 4, 50, 54, 4, 50, 55, 4, 50, 56, 4, 50, 57, 4, 51, 48, 4, 51, 49, 4, 51, 50, 4, 51, 51, 4, 51, 52, 4, 51, 53, 2, 4352, 2, 4354, 2, 4355, 2, 4357, 2, 4358, 2, 4359, 2, 4361, 2, 4363, 2, 4364, 2, 4366, 2, 4367, 2, 4368, 2, 4369, 2, 4370, 4, 4352, 4449, 4, 4354, 4449, 4, 4355, 4449, 4, 4357, 4449, 4, 4358, 4449, 4, 4359, 4449, 4, 4361, 4449, 4, 4363, 4449, 4, 4364, 4449, 4, 4366, 4449, 4, 4367, 4449, 4, 4368, 4449, 4, 4369, 4449, 4, 4370, 4449, 10, 4366, 4449, 4535, 4352, 4457, 8, 4364, 4462, 4363, 4468, 4, 4363, 4462, 2, 19968, 2, 20108, 2, 19977, 2, 22235, 2, 20116, 2, 20845, 2, 19971, 2, 20843, 2, 20061, 2, 21313, 2, 26376, 2, 28779, 2, 27700, 2, 26408, 2, 37329, 2, 22303, 2, 26085, 2, 26666, 2, 26377, 2, 31038, 2, 21517, 2, 29305, 2, 36001, 2, 31069, 2, 21172, 2, 31192, 2, 30007, 2, 22899, 2, 36969, 2, 20778, 2, 21360, 2, 27880, 2, 38917, 2, 20241, 2, 20889, 2, 27491, 2, 19978, 2, 20013, 2, 19979, 2, 24038, 2, 21491, 2, 21307, 2, 23447, 2, 23398, 2, 30435, 2, 20225, 2, 36039, 2, 21332, 2, 22812, 4, 51, 54, 4, 51, 55, 4, 51, 56, 4, 51, 57, 4, 52, 48, 4, 52, 49, 4, 52, 50, 4, 52, 51, 4, 52, 52, 4, 52, 53, 4, 52, 54, 4, 52, 55, 4, 52, 56, 4, 52, 57, 4, 53, 48, 4, 49, 26376, 4, 50, 26376, 4, 51, 26376, 4, 52, 26376, 4, 53, 26376, 4, 54, 26376, 4, 55, 26376, 4, 56, 26376, 4, 57, 26376, 6, 49, 48, 26376, 6, 49, 49, 26376, 6, 49, 50, 26376, 4, 72, 103, 6, 101, 114, 103, 4, 101, 86, 6, 76, 84, 68, 2, 12450, 2, 12452, 2, 12454, 2, 12456, 2, 12458, 2, 12459, 2, 12461, 2, 12463, 2, 12465, 2, 12467, 2, 12469, 2, 12471, 2, 12473, 2, 12475, 2, 12477, 2, 12479, 2, 12481, 2, 12484, 2, 12486, 2, 12488, 2, 12490, 2, 12491, 2, 12492, 2, 12493, 2, 12494, 2, 12495, 2, 12498, 2, 12501, 2, 12504, 2, 12507, 2, 12510, 2, 12511, 2, 12512, 2, 12513, 2, 12514, 2, 12516, 2, 12518, 2, 12520, 2, 12521, 2, 12522, 2, 12523, 2, 12524, 2, 12525, 2, 12527, 2, 12528, 2, 12529, 2, 12530, 4, 20196, 21644, 8, 12450, 12497, 12540, 12488, 8, 12450, 12523, 12501, 12449, 8, 12450, 12531, 12506, 12450, 6, 12450, 12540, 12523, 8, 12452, 12491, 12531, 12464, 6, 12452, 12531, 12481, 6, 12454, 12457, 12531, 10, 12456, 12473, 12463, 12540, 12489, 8, 12456, 12540, 12459, 12540, 6, 12458, 12531, 12473, 6, 12458, 12540, 12512, 6, 12459, 12452, 12522, 8, 12459, 12521, 12483, 12488, 8, 12459, 12525, 12522, 12540, 6, 12460, 12525, 12531, 6, 12460, 12531, 12510, 4, 12462, 12460, 6, 12462, 12491, 12540, 8, 12461, 12517, 12522, 12540, 8, 12462, 12523, 12480, 12540, 4, 12461, 12525, 10, 12461, 12525, 12464, 12521, 12512, 12, 12461, 12525, 12513, 12540, 12488, 12523, 10, 12461, 12525, 12527, 12483, 12488, 6, 12464, 12521, 12512, 10, 12464, 12521, 12512, 12488, 12531, 10, 12463, 12523, 12476, 12452, 12525, 8, 12463, 12525, 12540, 12493, 6, 12465, 12540, 12473, 6, 12467, 12523, 12490, 6, 12467, 12540, 12509, 8, 12469, 12452, 12463, 12523, 10, 12469, 12531, 12481, 12540, 12512, 8, 12471, 12522, 12531, 12464, 6, 12475, 12531, 12481, 6, 12475, 12531, 12488, 6, 12480, 12540, 12473, 4, 12487, 12471, 4, 12489, 12523, 4, 12488, 12531, 4, 12490, 12494, 6, 12494, 12483, 12488, 6, 12495, 12452, 12484, 10, 12497, 12540, 12475, 12531, 12488, 6, 12497, 12540, 12484, 8, 12496, 12540, 12524, 12523, 10, 12500, 12450, 12473, 12488, 12523, 6, 12500, 12463, 12523, 4, 12500, 12467, 4, 12499, 12523, 10, 12501, 12449, 12521, 12483, 12489, 8, 12501, 12451, 12540, 12488, 10, 12502, 12483, 12471, 12455, 12523, 6, 12501, 12521, 12531, 10, 12504, 12463, 12479, 12540, 12523, 4, 12506, 12477, 6, 12506, 12491, 12498, 6, 12504, 12523, 12484, 6, 12506, 12531, 12473, 6, 12506, 12540, 12472, 6, 12505, 12540, 12479, 8, 12509, 12452, 12531, 12488, 6, 12508, 12523, 12488, 4, 12507, 12531, 6, 12509, 12531, 12489, 6, 12507, 12540, 12523, 6, 12507, 12540, 12531, 8, 12510, 12452, 12463, 12525, 6, 12510, 12452, 12523, 6, 12510, 12483, 12495, 6, 12510, 12523, 12463, 10, 12510, 12531, 12471, 12519, 12531, 8, 12511, 12463, 12525, 12531, 4, 12511, 12522, 10, 12511, 12522, 12496, 12540, 12523, 4, 12513, 12460, 8, 12513, 12460, 12488, 12531, 8, 12513, 12540, 12488, 12523, 6, 12516, 12540, 12489, 6, 12516, 12540, 12523, 6, 12518, 12450, 12531, 8, 12522, 12483, 12488, 12523, 4, 12522, 12521, 6, 12523, 12500, 12540, 8, 12523, 12540, 12502, 12523, 4, 12524, 12512, 10, 12524, 12531, 12488, 12466, 12531, 6, 12527, 12483, 12488, 4, 48, 28857, 4, 49, 28857, 4, 50, 28857, 4, 51, 28857, 4, 52, 28857, 4, 53, 28857, 4, 54, 28857, 4, 55, 28857, 4, 56, 28857, 4, 57, 28857, 6, 49, 48, 28857, 6, 49, 49, 28857, 6, 49, 50, 28857, 6, 49, 51, 28857, 6, 49, 52, 28857, 6, 49, 53, 28857, 6, 49, 54, 28857, 6, 49, 55, 28857, 6, 49, 56, 28857, 6, 49, 57, 28857, 6, 50, 48, 28857, 6, 50, 49, 28857, 6, 50, 50, 28857, 6, 50, 51, 28857, 6, 50, 52, 28857, 6, 104, 80, 97, 4, 100, 97, 4, 65, 85, 6, 98, 97, 114, 4, 111, 86, 4, 112, 99, 4, 100, 109, 6, 100, 109, 178, 6, 100, 109, 179, 4, 73, 85, 4, 24179, 25104, 4, 26157, 21644, 4, 22823, 27491, 4, 26126, 27835, 8, 26666, 24335, 20250, 31038, 4, 112, 65, 4, 110, 65, 4, 956, 65, 4, 109, 65, 4, 107, 65, 4, 75, 66, 4, 77, 66, 4, 71, 66, 6, 99, 97, 108, 8, 107, 99, 97, 108, 4, 112, 70, 4, 110, 70, 4, 956, 70, 4, 956, 103, 4, 109, 103, 4, 107, 103, 4, 72, 122, 6, 107, 72, 122, 6, 77, 72, 122, 6, 71, 72, 122, 6, 84, 72, 122, 4, 956, 8467, 4, 109, 8467, 4, 100, 8467, 4, 107, 8467, 4, 102, 109, 4, 110, 109, 4, 956, 109, 4, 109, 109, 4, 99, 109, 4, 107, 109, 6, 109, 109, 178, 6, 99, 109, 178, 4, 109, 178, 6, 107, 109, 178, 6, 109, 109, 179, 6, 99, 109, 179, 4, 109, 179, 6, 107, 109, 179, 6, 109, 8725, 115, 8, 109, 8725, 115, 178, 4, 80, 97, 6, 107, 80, 97, 6, 77, 80, 97, 6, 71, 80, 97, 6, 114, 97, 100, 10, 114, 97, 100, 8725, 115, 12, 114, 97, 100, 8725, 115, 178, 4, 112, 115, 4, 110, 115, 4, 956, 115, 4, 109, 115, 4, 112, 86, 4, 110, 86, 4, 956, 86, 4, 109, 86, 4, 107, 86, 4, 77, 86, 4, 112, 87, 4, 110, 87, 4, 956, 87, 4, 109, 87, 4, 107, 87, 4, 77, 87, 4, 107, 937, 4, 77, 937, 8, 97, 46, 109, 46, 4, 66, 113, 4, 99, 99, 4, 99, 100, 8, 67, 8725, 107, 103, 6, 67, 111, 46, 4, 100, 66, 4, 71, 121, 4, 104, 97, 4, 72, 80, 4, 105, 110, 4, 75, 75, 4, 75, 77, 4, 107, 116, 4, 108, 109, 4, 108, 110, 6, 108, 111, 103, 4, 108, 120, 4, 109, 98, 6, 109, 105, 108, 6, 109, 111, 108, 4, 80, 72, 8, 112, 46, 109, 46, 6, 80, 80, 77, 4, 80, 82, 4, 115, 114, 4, 83, 118, 4, 87, 98, 6, 86, 8725, 109, 6, 65, 8725, 109, 4, 49, 26085, 4, 50, 26085, 4, 51, 26085, 4, 52, 26085, 4, 53, 26085, 4, 54, 26085, 4, 55, 26085, 4, 56, 26085, 4, 57, 26085, 6, 49, 48, 26085, 6, 49, 49, 26085, 6, 49, 50, 26085, 6, 49, 51, 26085, 6, 49, 52, 26085, 6, 49, 53, 26085, 6, 49, 54, 26085, 6, 49, 55, 26085, 6, 49, 56, 26085, 6, 49, 57, 26085, 6, 50, 48, 26085, 6, 50, 49, 26085, 6, 50, 50, 26085, 6, 50, 51, 26085, 6, 50, 52, 26085, 6, 50, 53, 26085, 6, 50, 54, 26085, 6, 50, 55, 26085, 6, 50, 56, 26085, 6, 50, 57, 26085, 6, 51, 48, 26085, 6, 51, 49, 26085, 6, 103, 97, 108, 2, 1098, 2, 1100, 2, 42863, 2, 67, 2, 70, 2, 81, 2, 294, 2, 339, 2, 42791, 2, 43831, 2, 619, 2, 43858, 2, 653, 3, 35912, 3, 26356, 3, 36554, 3, 36040, 3, 28369, 3, 20018, 3, 21477, 3, 40860, 3, 40860, 3, 22865, 3, 37329, 3, 21895, 3, 22856, 3, 25078, 3, 30313, 3, 32645, 3, 34367, 3, 34746, 3, 35064, 3, 37007, 3, 27138, 3, 27931, 3, 28889, 3, 29662, 3, 33853, 3, 37226, 3, 39409, 3, 20098, 3, 21365, 3, 27396, 3, 29211, 3, 34349, 3, 40478, 3, 23888, 3, 28651, 3, 34253, 3, 35172, 3, 25289, 3, 33240, 3, 34847, 3, 24266, 3, 26391, 3, 28010, 3, 29436, 3, 37070, 3, 20358, 3, 20919, 3, 21214, 3, 25796, 3, 27347, 3, 29200, 3, 30439, 3, 32769, 3, 34310, 3, 34396, 3, 36335, 3, 38706, 3, 39791, 3, 40442, 3, 30860, 3, 31103, 3, 32160, 3, 33737, 3, 37636, 3, 40575, 3, 35542, 3, 22751, 3, 24324, 3, 31840, 3, 32894, 3, 29282, 3, 30922, 3, 36034, 3, 38647, 3, 22744, 3, 23650, 3, 27155, 3, 28122, 3, 28431, 3, 32047, 3, 32311, 3, 38475, 3, 21202, 3, 32907, 3, 20956, 3, 20940, 3, 31260, 3, 32190, 3, 33777, 3, 38517, 3, 35712, 3, 25295, 3, 27138, 3, 35582, 3, 20025, 3, 23527, 3, 24594, 3, 29575, 3, 30064, 3, 21271, 3, 30971, 3, 20415, 3, 24489, 3, 19981, 3, 27852, 3, 25976, 3, 32034, 3, 21443, 3, 22622, 3, 30465, 3, 33865, 3, 35498, 3, 27578, 3, 36784, 3, 27784, 3, 25342, 3, 33509, 3, 25504, 3, 30053, 3, 20142, 3, 20841, 3, 20937, 3, 26753, 3, 31975, 3, 33391, 3, 35538, 3, 37327, 3, 21237, 3, 21570, 3, 22899, 3, 24300, 3, 26053, 3, 28670, 3, 31018, 3, 38317, 3, 39530, 3, 40599, 3, 40654, 3, 21147, 3, 26310, 3, 27511, 3, 36706, 3, 24180, 3, 24976, 3, 25088, 3, 25754, 3, 28451, 3, 29001, 3, 29833, 3, 31178, 3, 32244, 3, 32879, 3, 36646, 3, 34030, 3, 36899, 3, 37706, 3, 21015, 3, 21155, 3, 21693, 3, 28872, 3, 35010, 3, 35498, 3, 24265, 3, 24565, 3, 25467, 3, 27566, 3, 31806, 3, 29557, 3, 20196, 3, 22265, 3, 23527, 3, 23994, 3, 24604, 3, 29618, 3, 29801, 3, 32666, 3, 32838, 3, 37428, 3, 38646, 3, 38728, 3, 38936, 3, 20363, 3, 31150, 3, 37300, 3, 38584, 3, 24801, 3, 20102, 3, 20698, 3, 23534, 3, 23615, 3, 26009, 3, 27138, 3, 29134, 3, 30274, 3, 34044, 3, 36988, 3, 40845, 3, 26248, 3, 38446, 3, 21129, 3, 26491, 3, 26611, 3, 27969, 3, 28316, 3, 29705, 3, 30041, 3, 30827, 3, 32016, 3, 39006, 3, 20845, 3, 25134, 3, 38520, 3, 20523, 3, 23833, 3, 28138, 3, 36650, 3, 24459, 3, 24900, 3, 26647, 3, 29575, 3, 38534, 3, 21033, 3, 21519, 3, 23653, 3, 26131, 3, 26446, 3, 26792, 3, 27877, 3, 29702, 3, 30178, 3, 32633, 3, 35023, 3, 35041, 3, 37324, 3, 38626, 3, 21311, 3, 28346, 3, 21533, 3, 29136, 3, 29848, 3, 34298, 3, 38563, 3, 40023, 3, 40607, 3, 26519, 3, 28107, 3, 33256, 3, 31435, 3, 31520, 3, 31890, 3, 29376, 3, 28825, 3, 35672, 3, 20160, 3, 33590, 3, 21050, 3, 20999, 3, 24230, 3, 25299, 3, 31958, 3, 23429, 3, 27934, 3, 26292, 3, 36667, 3, 34892, 3, 38477, 3, 35211, 3, 24275, 3, 20800, 3, 21952, 3, 22618, 3, 26228, 3, 20958, 3, 29482, 3, 30410, 3, 31036, 3, 31070, 3, 31077, 3, 31119, 3, 38742, 3, 31934, 3, 32701, 3, 34322, 3, 35576, 3, 36920, 3, 37117, 3, 39151, 3, 39164, 3, 39208, 3, 40372, 3, 37086, 3, 38583, 3, 20398, 3, 20711, 3, 20813, 3, 21193, 3, 21220, 3, 21329, 3, 21917, 3, 22022, 3, 22120, 3, 22592, 3, 22696, 3, 23652, 3, 23662, 3, 24724, 3, 24936, 3, 24974, 3, 25074, 3, 25935, 3, 26082, 3, 26257, 3, 26757, 3, 28023, 3, 28186, 3, 28450, 3, 29038, 3, 29227, 3, 29730, 3, 30865, 3, 31038, 3, 31049, 3, 31048, 3, 31056, 3, 31062, 3, 31069, 3, 31117, 3, 31118, 3, 31296, 3, 31361, 3, 31680, 3, 32244, 3, 32265, 3, 32321, 3, 32626, 3, 32773, 3, 33261, 3, 33401, 3, 33401, 3, 33879, 3, 35088, 3, 35222, 3, 35585, 3, 35641, 3, 36051, 3, 36104, 3, 36790, 3, 36920, 3, 38627, 3, 38911, 3, 38971, 3, 24693, 3, 148206, 3, 33304, 3, 20006, 3, 20917, 3, 20840, 3, 20352, 3, 20805, 3, 20864, 3, 21191, 3, 21242, 3, 21917, 3, 21845, 3, 21913, 3, 21986, 3, 22618, 3, 22707, 3, 22852, 3, 22868, 3, 23138, 3, 23336, 3, 24274, 3, 24281, 3, 24425, 3, 24493, 3, 24792, 3, 24910, 3, 24840, 3, 24974, 3, 24928, 3, 25074, 3, 25140, 3, 25540, 3, 25628, 3, 25682, 3, 25942, 3, 26228, 3, 26391, 3, 26395, 3, 26454, 3, 27513, 3, 27578, 3, 27969, 3, 28379, 3, 28363, 3, 28450, 3, 28702, 3, 29038, 3, 30631, 3, 29237, 3, 29359, 3, 29482, 3, 29809, 3, 29958, 3, 30011, 3, 30237, 3, 30239, 3, 30410, 3, 30427, 3, 30452, 3, 30538, 3, 30528, 3, 30924, 3, 31409, 3, 31680, 3, 31867, 3, 32091, 3, 32244, 3, 32574, 3, 32773, 3, 33618, 3, 33775, 3, 34681, 3, 35137, 3, 35206, 3, 35222, 3, 35519, 3, 35576, 3, 35531, 3, 35585, 3, 35582, 3, 35565, 3, 35641, 3, 35722, 3, 36104, 3, 36664, 3, 36978, 3, 37273, 3, 37494, 3, 38524, 3, 38627, 3, 38742, 3, 38875, 3, 38911, 3, 38923, 3, 38971, 3, 39698, 3, 40860, 3, 141386, 3, 141380, 3, 144341, 3, 15261, 3, 16408, 3, 16441, 3, 152137, 3, 154832, 3, 163539, 3, 40771, 3, 40846, 4, 102, 102, 4, 102, 105, 4, 102, 108, 6, 102, 102, 105, 6, 102, 102, 108, 4, 383, 116, 4, 115, 116, 4, 1396, 1398, 4, 1396, 1381, 4, 1396, 1387, 4, 1406, 1398, 4, 1396, 1389, 5, 1497, 1460, 5, 1522, 1463, 2, 1506, 2, 1488, 2, 1491, 2, 1492, 2, 1499, 2, 1500, 2, 1501, 2, 1512, 2, 1514, 2, 43, 5, 1513, 1473, 5, 1513, 1474, 5, 64329, 1473, 5, 64329, 1474, 5, 1488, 1463, 5, 1488, 1464, 5, 1488, 1468, 5, 1489, 1468, 5, 1490, 1468, 5, 1491, 1468, 5, 1492, 1468, 5, 1493, 1468, 5, 1494, 1468, 5, 1496, 1468, 5, 1497, 1468, 5, 1498, 1468, 5, 1499, 1468, 5, 1500, 1468, 5, 1502, 1468, 5, 1504, 1468, 5, 1505, 1468, 5, 1507, 1468, 5, 1508, 1468, 5, 1510, 1468, 5, 1511, 1468, 5, 1512, 1468, 5, 1513, 1468, 5, 1514, 1468, 5, 1493, 1465, 5, 1489, 1471, 5, 1499, 1471, 5, 1508, 1471, 4, 1488, 1500, 2, 1649, 2, 1649, 2, 1659, 2, 1659, 2, 1659, 2, 1659, 2, 1662, 2, 1662, 2, 1662, 2, 1662, 2, 1664, 2, 1664, 2, 1664, 2, 1664, 2, 1658, 2, 1658, 2, 1658, 2, 1658, 2, 1663, 2, 1663, 2, 1663, 2, 1663, 2, 1657, 2, 1657, 2, 1657, 2, 1657, 2, 1700, 2, 1700, 2, 1700, 2, 1700, 2, 1702, 2, 1702, 2, 1702, 2, 1702, 2, 1668, 2, 1668, 2, 1668, 2, 1668, 2, 1667, 2, 1667, 2, 1667, 2, 1667, 2, 1670, 2, 1670, 2, 1670, 2, 1670, 2, 1671, 2, 1671, 2, 1671, 2, 1671, 2, 1677, 2, 1677, 2, 1676, 2, 1676, 2, 1678, 2, 1678, 2, 1672, 2, 1672, 2, 1688, 2, 1688, 2, 1681, 2, 1681, 2, 1705, 2, 1705, 2, 1705, 2, 1705, 2, 1711, 2, 1711, 2, 1711, 2, 1711, 2, 1715, 2, 1715, 2, 1715, 2, 1715, 2, 1713, 2, 1713, 2, 1713, 2, 1713, 2, 1722, 2, 1722, 2, 1723, 2, 1723, 2, 1723, 2, 1723, 2, 1728, 2, 1728, 2, 1729, 2, 1729, 2, 1729, 2, 1729, 2, 1726, 2, 1726, 2, 1726, 2, 1726, 2, 1746, 2, 1746, 2, 1747, 2, 1747, 2, 1709, 2, 1709, 2, 1709, 2, 1709, 2, 1735, 2, 1735, 2, 1734, 2, 1734, 2, 1736, 2, 1736, 2, 1655, 2, 1739, 2, 1739, 2, 1733, 2, 1733, 2, 1737, 2, 1737, 2, 1744, 2, 1744, 2, 1744, 2, 1744, 2, 1609, 2, 1609, 4, 1574, 1575, 4, 1574, 1575, 4, 1574, 1749, 4, 1574, 1749, 4, 1574, 1608, 4, 1574, 1608, 4, 1574, 1735, 4, 1574, 1735, 4, 1574, 1734, 4, 1574, 1734, 4, 1574, 1736, 4, 1574, 1736, 4, 1574, 1744, 4, 1574, 1744, 4, 1574, 1744, 4, 1574, 1609, 4, 1574, 1609, 4, 1574, 1609, 2, 1740, 2, 1740, 2, 1740, 2, 1740, 4, 1574, 1580, 4, 1574, 1581, 4, 1574, 1605, 4, 1574, 1609, 4, 1574, 1610, 4, 1576, 1580, 4, 1576, 1581, 4, 1576, 1582, 4, 1576, 1605, 4, 1576, 1609, 4, 1576, 1610, 4, 1578, 1580, 4, 1578, 1581, 4, 1578, 1582, 4, 1578, 1605, 4, 1578, 1609, 4, 1578, 1610, 4, 1579, 1580, 4, 1579, 1605, 4, 1579, 1609, 4, 1579, 1610, 4, 1580, 1581, 4, 1580, 1605, 4, 1581, 1580, 4, 1581, 1605, 4, 1582, 1580, 4, 1582, 1581, 4, 1582, 1605, 4, 1587, 1580, 4, 1587, 1581, 4, 1587, 1582, 4, 1587, 1605, 4, 1589, 1581, 4, 1589, 1605, 4, 1590, 1580, 4, 1590, 1581, 4, 1590, 1582, 4, 1590, 1605, 4, 1591, 1581, 4, 1591, 1605, 4, 1592, 1605, 4, 1593, 1580, 4, 1593, 1605, 4, 1594, 1580, 4, 1594, 1605, 4, 1601, 1580, 4, 1601, 1581, 4, 1601, 1582, 4, 1601, 1605, 4, 1601, 1609, 4, 1601, 1610, 4, 1602, 1581, 4, 1602, 1605, 4, 1602, 1609, 4, 1602, 1610, 4, 1603, 1575, 4, 1603, 1580, 4, 1603, 1581, 4, 1603, 1582, 4, 1603, 1604, 4, 1603, 1605, 4, 1603, 1609, 4, 1603, 1610, 4, 1604, 1580, 4, 1604, 1581, 4, 1604, 1582, 4, 1604, 1605, 4, 1604, 1609, 4, 1604, 1610, 4, 1605, 1580, 4, 1605, 1581, 4, 1605, 1582, 4, 1605, 1605, 4, 1605, 1609, 4, 1605, 1610, 4, 1606, 1580, 4, 1606, 1581, 4, 1606, 1582, 4, 1606, 1605, 4, 1606, 1609, 4, 1606, 1610, 4, 1607, 1580, 4, 1607, 1605, 4, 1607, 1609, 4, 1607, 1610, 4, 1610, 1580, 4, 1610, 1581, 4, 1610, 1582, 4, 1610, 1605, 4, 1610, 1609, 4, 1610, 1610, 4, 1584, 1648, 4, 1585, 1648, 4, 1609, 1648, 6, 32, 1612, 1617, 6, 32, 1613, 1617, 6, 32, 1614, 1617, 6, 32, 1615, 1617, 6, 32, 1616, 1617, 6, 32, 1617, 1648, 4, 1574, 1585, 4, 1574, 1586, 4, 1574, 1605, 4, 1574, 1606, 4, 1574, 1609, 4, 1574, 1610, 4, 1576, 1585, 4, 1576, 1586, 4, 1576, 1605, 4, 1576, 1606, 4, 1576, 1609, 4, 1576, 1610, 4, 1578, 1585, 4, 1578, 1586, 4, 1578, 1605, 4, 1578, 1606, 4, 1578, 1609, 4, 1578, 1610, 4, 1579, 1585, 4, 1579, 1586, 4, 1579, 1605, 4, 1579, 1606, 4, 1579, 1609, 4, 1579, 1610, 4, 1601, 1609, 4, 1601, 1610, 4, 1602, 1609, 4, 1602, 1610, 4, 1603, 1575, 4, 1603, 1604, 4, 1603, 1605, 4, 1603, 1609, 4, 1603, 1610, 4, 1604, 1605, 4, 1604, 1609, 4, 1604, 1610, 4, 1605, 1575, 4, 1605, 1605, 4, 1606, 1585, 4, 1606, 1586, 4, 1606, 1605, 4, 1606, 1606, 4, 1606, 1609, 4, 1606, 1610, 4, 1609, 1648, 4, 1610, 1585, 4, 1610, 1586, 4, 1610, 1605, 4, 1610, 1606, 4, 1610, 1609, 4, 1610, 1610, 4, 1574, 1580, 4, 1574, 1581, 4, 1574, 1582, 4, 1574, 1605, 4, 1574, 1607, 4, 1576, 1580, 4, 1576, 1581, 4, 1576, 1582, 4, 1576, 1605, 4, 1576, 1607, 4, 1578, 1580, 4, 1578, 1581, 4, 1578, 1582, 4, 1578, 1605, 4, 1578, 1607, 4, 1579, 1605, 4, 1580, 1581, 4, 1580, 1605, 4, 1581, 1580, 4, 1581, 1605, 4, 1582, 1580, 4, 1582, 1605, 4, 1587, 1580, 4, 1587, 1581, 4, 1587, 1582, 4, 1587, 1605, 4, 1589, 1581, 4, 1589, 1582, 4, 1589, 1605, 4, 1590, 1580, 4, 1590, 1581, 4, 1590, 1582, 4, 1590, 1605, 4, 1591, 1581, 4, 1592, 1605, 4, 1593, 1580, 4, 1593, 1605, 4, 1594, 1580, 4, 1594, 1605, 4, 1601, 1580, 4, 1601, 1581, 4, 1601, 1582, 4, 1601, 1605, 4, 1602, 1581, 4, 1602, 1605, 4, 1603, 1580, 4, 1603, 1581, 4, 1603, 1582, 4, 1603, 1604, 4, 1603, 1605, 4, 1604, 1580, 4, 1604, 1581, 4, 1604, 1582, 4, 1604, 1605, 4, 1604, 1607, 4, 1605, 1580, 4, 1605, 1581, 4, 1605, 1582, 4, 1605, 1605, 4, 1606, 1580, 4, 1606, 1581, 4, 1606, 1582, 4, 1606, 1605, 4, 1606, 1607, 4, 1607, 1580, 4, 1607, 1605, 4, 1607, 1648, 4, 1610, 1580, 4, 1610, 1581, 4, 1610, 1582, 4, 1610, 1605, 4, 1610, 1607, 4, 1574, 1605, 4, 1574, 1607, 4, 1576, 1605, 4, 1576, 1607, 4, 1578, 1605, 4, 1578, 1607, 4, 1579, 1605, 4, 1579, 1607, 4, 1587, 1605, 4, 1587, 1607, 4, 1588, 1605, 4, 1588, 1607, 4, 1603, 1604, 4, 1603, 1605, 4, 1604, 1605, 4, 1606, 1605, 4, 1606, 1607, 4, 1610, 1605, 4, 1610, 1607, 6, 1600, 1614, 1617, 6, 1600, 1615, 1617, 6, 1600, 1616, 1617, 4, 1591, 1609, 4, 1591, 1610, 4, 1593, 1609, 4, 1593, 1610, 4, 1594, 1609, 4, 1594, 1610, 4, 1587, 1609, 4, 1587, 1610, 4, 1588, 1609, 4, 1588, 1610, 4, 1581, 1609, 4, 1581, 1610, 4, 1580, 1609, 4, 1580, 1610, 4, 1582, 1609, 4, 1582, 1610, 4, 1589, 1609, 4, 1589, 1610, 4, 1590, 1609, 4, 1590, 1610, 4, 1588, 1580, 4, 1588, 1581, 4, 1588, 1582, 4, 1588, 1605, 4, 1588, 1585, 4, 1587, 1585, 4, 1589, 1585, 4, 1590, 1585, 4, 1591, 1609, 4, 1591, 1610, 4, 1593, 1609, 4, 1593, 1610, 4, 1594, 1609, 4, 1594, 1610, 4, 1587, 1609, 4, 1587, 1610, 4, 1588, 1609, 4, 1588, 1610, 4, 1581, 1609, 4, 1581, 1610, 4, 1580, 1609, 4, 1580, 1610, 4, 1582, 1609, 4, 1582, 1610, 4, 1589, 1609, 4, 1589, 1610, 4, 1590, 1609, 4, 1590, 1610, 4, 1588, 1580, 4, 1588, 1581, 4, 1588, 1582, 4, 1588, 1605, 4, 1588, 1585, 4, 1587, 1585, 4, 1589, 1585, 4, 1590, 1585, 4, 1588, 1580, 4, 1588, 1581, 4, 1588, 1582, 4, 1588, 1605, 4, 1587, 1607, 4, 1588, 1607, 4, 1591, 1605, 4, 1587, 1580, 4, 1587, 1581, 4, 1587, 1582, 4, 1588, 1580, 4, 1588, 1581, 4, 1588, 1582, 4, 1591, 1605, 4, 1592, 1605, 4, 1575, 1611, 4, 1575, 1611, 6, 1578, 1580, 1605, 6, 1578, 1581, 1580, 6, 1578, 1581, 1580, 6, 1578, 1581, 1605, 6, 1578, 1582, 1605, 6, 1578, 1605, 1580, 6, 1578, 1605, 1581, 6, 1578, 1605, 1582, 6, 1580, 1605, 1581, 6, 1580, 1605, 1581, 6, 1581, 1605, 1610, 6, 1581, 1605, 1609, 6, 1587, 1581, 1580, 6, 1587, 1580, 1581, 6, 1587, 1580, 1609, 6, 1587, 1605, 1581, 6, 1587, 1605, 1581, 6, 1587, 1605, 1580, 6, 1587, 1605, 1605, 6, 1587, 1605, 1605, 6, 1589, 1581, 1581, 6, 1589, 1581, 1581, 6, 1589, 1605, 1605, 6, 1588, 1581, 1605, 6, 1588, 1581, 1605, 6, 1588, 1580, 1610, 6, 1588, 1605, 1582, 6, 1588, 1605, 1582, 6, 1588, 1605, 1605, 6, 1588, 1605, 1605, 6, 1590, 1581, 1609, 6, 1590, 1582, 1605, 6, 1590, 1582, 1605, 6, 1591, 1605, 1581, 6, 1591, 1605, 1581, 6, 1591, 1605, 1605, 6, 1591, 1605, 1610, 6, 1593, 1580, 1605, 6, 1593, 1605, 1605, 6, 1593, 1605, 1605, 6, 1593, 1605, 1609, 6, 1594, 1605, 1605, 6, 1594, 1605, 1610, 6, 1594, 1605, 1609, 6, 1601, 1582, 1605, 6, 1601, 1582, 1605, 6, 1602, 1605, 1581, 6, 1602, 1605, 1605, 6, 1604, 1581, 1605, 6, 1604, 1581, 1610, 6, 1604, 1581, 1609, 6, 1604, 1580, 1580, 6, 1604, 1580, 1580, 6, 1604, 1582, 1605, 6, 1604, 1582, 1605, 6, 1604, 1605, 1581, 6, 1604, 1605, 1581, 6, 1605, 1581, 1580, 6, 1605, 1581, 1605, 6, 1605, 1581, 1610, 6, 1605, 1580, 1581, 6, 1605, 1580, 1605, 6, 1605, 1582, 1580, 6, 1605, 1582, 1605, 6, 1605, 1580, 1582, 6, 1607, 1605, 1580, 6, 1607, 1605, 1605, 6, 1606, 1581, 1605, 6, 1606, 1581, 1609, 6, 1606, 1580, 1605, 6, 1606, 1580, 1605, 6, 1606, 1580, 1609, 6, 1606, 1605, 1610, 6, 1606, 1605, 1609, 6, 1610, 1605, 1605, 6, 1610, 1605, 1605, 6, 1576, 1582, 1610, 6, 1578, 1580, 1610, 6, 1578, 1580, 1609, 6, 1578, 1582, 1610, 6, 1578, 1582, 1609, 6, 1578, 1605, 1610, 6, 1578, 1605, 1609, 6, 1580, 1605, 1610, 6, 1580, 1581, 1609, 6, 1580, 1605, 1609, 6, 1587, 1582, 1609, 6, 1589, 1581, 1610, 6, 1588, 1581, 1610, 6, 1590, 1581, 1610, 6, 1604, 1580, 1610, 6, 1604, 1605, 1610, 6, 1610, 1581, 1610, 6, 1610, 1580, 1610, 6, 1610, 1605, 1610, 6, 1605, 1605, 1610, 6, 1602, 1605, 1610, 6, 1606, 1581, 1610, 6, 1602, 1605, 1581, 6, 1604, 1581, 1605, 6, 1593, 1605, 1610, 6, 1603, 1605, 1610, 6, 1606, 1580, 1581, 6, 1605, 1582, 1610, 6, 1604, 1580, 1605, 6, 1603, 1605, 1605, 6, 1604, 1580, 1605, 6, 1606, 1580, 1581, 6, 1580, 1581, 1610, 6, 1581, 1580, 1610, 6, 1605, 1580, 1610, 6, 1601, 1605, 1610, 6, 1576, 1581, 1610, 6, 1603, 1605, 1605, 6, 1593, 1580, 1605, 6, 1589, 1605, 1605, 6, 1587, 1582, 1610, 6, 1606, 1580, 1610, 6, 1589, 1604, 1746, 6, 1602, 1604, 1746, 8, 1575, 1604, 1604, 1607, 8, 1575, 1603, 1576, 1585, 8, 1605, 1581, 1605, 1583, 8, 1589, 1604, 1593, 1605, 8, 1585, 1587, 1608, 1604, 8, 1593, 1604, 1610, 1607, 8, 1608, 1587, 1604, 1605, 6, 1589, 1604, 1609, 36, 1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605, 16, 1580, 1604, 32, 1580, 1604, 1575, 1604, 1607, 8, 1585, 1740, 1575, 1604, 2, 44, 2, 12289, 2, 12290, 2, 58, 2, 59, 2, 33, 2, 63, 2, 12310, 2, 12311, 2, 8230, 2, 8229, 2, 8212, 2, 8211, 2, 95, 2, 95, 2, 40, 2, 41, 2, 123, 2, 125, 2, 12308, 2, 12309, 2, 12304, 2, 12305, 2, 12298, 2, 12299, 2, 12296, 2, 12297, 2, 12300, 2, 12301, 2, 12302, 2, 12303, 2, 91, 2, 93, 2, 8254, 2, 8254, 2, 8254, 2, 8254, 2, 95, 2, 95, 2, 95, 2, 44, 2, 12289, 2, 46, 2, 59, 2, 58, 2, 63, 2, 33, 2, 8212, 2, 40, 2, 41, 2, 123, 2, 125, 2, 12308, 2, 12309, 2, 35, 2, 38, 2, 42, 2, 43, 2, 45, 2, 60, 2, 62, 2, 61, 2, 92, 2, 36, 2, 37, 2, 64, 4, 32, 1611, 4, 1600, 1611, 4, 32, 1612, 4, 32, 1613, 4, 32, 1614, 4, 1600, 1614, 4, 32, 1615, 4, 1600, 1615, 4, 32, 1616, 4, 1600, 1616, 4, 32, 1617, 4, 1600, 1617, 4, 32, 1618, 4, 1600, 1618, 2, 1569, 2, 1570, 2, 1570, 2, 1571, 2, 1571, 2, 1572, 2, 1572, 2, 1573, 2, 1573, 2, 1574, 2, 1574, 2, 1574, 2, 1574, 2, 1575, 2, 1575, 2, 1576, 2, 1576, 2, 1576, 2, 1576, 2, 1577, 2, 1577, 2, 1578, 2, 1578, 2, 1578, 2, 1578, 2, 1579, 2, 1579, 2, 1579, 2, 1579, 2, 1580, 2, 1580, 2, 1580, 2, 1580, 2, 1581, 2, 1581, 2, 1581, 2, 1581, 2, 1582, 2, 1582, 2, 1582, 2, 1582, 2, 1583, 2, 1583, 2, 1584, 2, 1584, 2, 1585, 2, 1585, 2, 1586, 2, 1586, 2, 1587, 2, 1587, 2, 1587, 2, 1587, 2, 1588, 2, 1588, 2, 1588, 2, 1588, 2, 1589, 2, 1589, 2, 1589, 2, 1589, 2, 1590, 2, 1590, 2, 1590, 2, 1590, 2, 1591, 2, 1591, 2, 1591, 2, 1591, 2, 1592, 2, 1592, 2, 1592, 2, 1592, 2, 1593, 2, 1593, 2, 1593, 2, 1593, 2, 1594, 2, 1594, 2, 1594, 2, 1594, 2, 1601, 2, 1601, 2, 1601, 2, 1601, 2, 1602, 2, 1602, 2, 1602, 2, 1602, 2, 1603, 2, 1603, 2, 1603, 2, 1603, 2, 1604, 2, 1604, 2, 1604, 2, 1604, 2, 1605, 2, 1605, 2, 1605, 2, 1605, 2, 1606, 2, 1606, 2, 1606, 2, 1606, 2, 1607, 2, 1607, 2, 1607, 2, 1607, 2, 1608, 2, 1608, 2, 1609, 2, 1609, 2, 1610, 2, 1610, 2, 1610, 2, 1610, 4, 1604, 1570, 4, 1604, 1570, 4, 1604, 1571, 4, 1604, 1571, 4, 1604, 1573, 4, 1604, 1573, 4, 1604, 1575, 4, 1604, 1575, 2, 33, 2, 34, 2, 35, 2, 36, 2, 37, 2, 38, 2, 39, 2, 40, 2, 41, 2, 42, 2, 43, 2, 44, 2, 45, 2, 46, 2, 47, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 58, 2, 59, 2, 60, 2, 61, 2, 62, 2, 63, 2, 64, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 91, 2, 92, 2, 93, 2, 94, 2, 95, 2, 96, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 123, 2, 124, 2, 125, 2, 126, 2, 10629, 2, 10630, 2, 12290, 2, 12300, 2, 12301, 2, 12289, 2, 12539, 2, 12530, 2, 12449, 2, 12451, 2, 12453, 2, 12455, 2, 12457, 2, 12515, 2, 12517, 2, 12519, 2, 12483, 2, 12540, 2, 12450, 2, 12452, 2, 12454, 2, 12456, 2, 12458, 2, 12459, 2, 12461, 2, 12463, 2, 12465, 2, 12467, 2, 12469, 2, 12471, 2, 12473, 2, 12475, 2, 12477, 2, 12479, 2, 12481, 2, 12484, 2, 12486, 2, 12488, 2, 12490, 2, 12491, 2, 12492, 2, 12493, 2, 12494, 2, 12495, 2, 12498, 2, 12501, 2, 12504, 2, 12507, 2, 12510, 2, 12511, 2, 12512, 2, 12513, 2, 12514, 2, 12516, 2, 12518, 2, 12520, 2, 12521, 2, 12522, 2, 12523, 2, 12524, 2, 12525, 2, 12527, 2, 12531, 2, 12441, 2, 12442, 2, 12644, 2, 12593, 2, 12594, 2, 12595, 2, 12596, 2, 12597, 2, 12598, 2, 12599, 2, 12600, 2, 12601, 2, 12602, 2, 12603, 2, 12604, 2, 12605, 2, 12606, 2, 12607, 2, 12608, 2, 12609, 2, 12610, 2, 12611, 2, 12612, 2, 12613, 2, 12614, 2, 12615, 2, 12616, 2, 12617, 2, 12618, 2, 12619, 2, 12620, 2, 12621, 2, 12622, 2, 12623, 2, 12624, 2, 12625, 2, 12626, 2, 12627, 2, 12628, 2, 12629, 2, 12630, 2, 12631, 2, 12632, 2, 12633, 2, 12634, 2, 12635, 2, 12636, 2, 12637, 2, 12638, 2, 12639, 2, 12640, 2, 12641, 2, 12642, 2, 12643, 2, 162, 2, 163, 2, 172, 2, 175, 2, 166, 2, 165, 2, 8361, 2, 9474, 2, 8592, 2, 8593, 2, 8594, 2, 8595, 2, 9632, 2, 9675, 2, 720, 2, 721, 2, 230, 2, 665, 2, 595, 2, 675, 2, 43878, 2, 677, 2, 676, 2, 598, 2, 599, 2, 7569, 2, 600, 2, 606, 2, 681, 2, 612, 2, 610, 2, 608, 2, 667, 2, 295, 2, 668, 2, 615, 2, 644, 2, 682, 2, 683, 2, 620, 2, 122628, 2, 42894, 2, 622, 2, 122629, 2, 654, 2, 122630, 2, 248, 2, 630, 2, 631, 2, 113, 2, 634, 2, 122632, 2, 637, 2, 638, 2, 640, 2, 680, 2, 678, 2, 43879, 2, 679, 2, 648, 2, 11377, 2, 655, 2, 673, 2, 674, 2, 664, 2, 448, 2, 449, 2, 450, 2, 122634, 2, 122654, 5, 69785, 69818, 5, 69787, 69818, 5, 69797, 69818, 5, 69937, 69927, 5, 69938, 69927, 5, 70471, 70462, 5, 70471, 70487, 5, 70841, 70842, 5, 70841, 70832, 5, 70841, 70845, 5, 71096, 71087, 5, 71097, 71087, 5, 71989, 71984, 5, 119127, 119141, 5, 119128, 119141, 5, 119135, 119150, 5, 119135, 119151, 5, 119135, 119152, 5, 119135, 119153, 5, 119135, 119154, 5, 119225, 119141, 5, 119226, 119141, 5, 119227, 119150, 5, 119228, 119150, 5, 119227, 119151, 5, 119228, 119151, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 67, 2, 68, 2, 71, 2, 74, 2, 75, 2, 78, 2, 79, 2, 80, 2, 81, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 102, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 68, 2, 69, 2, 70, 2, 71, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 68, 2, 69, 2, 70, 2, 71, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 79, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 2, 97, 2, 98, 2, 99, 2, 100, 2, 101, 2, 102, 2, 103, 2, 104, 2, 105, 2, 106, 2, 107, 2, 108, 2, 109, 2, 110, 2, 111, 2, 112, 2, 113, 2, 114, 2, 115, 2, 116, 2, 117, 2, 118, 2, 119, 2, 120, 2, 121, 2, 122, 2, 305, 2, 567, 2, 913, 2, 914, 2, 915, 2, 916, 2, 917, 2, 918, 2, 919, 2, 920, 2, 921, 2, 922, 2, 923, 2, 924, 2, 925, 2, 926, 2, 927, 2, 928, 2, 929, 2, 1012, 2, 931, 2, 932, 2, 933, 2, 934, 2, 935, 2, 936, 2, 937, 2, 8711, 2, 945, 2, 946, 2, 947, 2, 948, 2, 949, 2, 950, 2, 951, 2, 952, 2, 953, 2, 954, 2, 955, 2, 956, 2, 957, 2, 958, 2, 959, 2, 960, 2, 961, 2, 962, 2, 963, 2, 964, 2, 965, 2, 966, 2, 967, 2, 968, 2, 969, 2, 8706, 2, 1013, 2, 977, 2, 1008, 2, 981, 2, 1009, 2, 982, 2, 913, 2, 914, 2, 915, 2, 916, 2, 917, 2, 918, 2, 919, 2, 920, 2, 921, 2, 922, 2, 923, 2, 924, 2, 925, 2, 926, 2, 927, 2, 928, 2, 929, 2, 1012, 2, 931, 2, 932, 2, 933, 2, 934, 2, 935, 2, 936, 2, 937, 2, 8711, 2, 945, 2, 946, 2, 947, 2, 948, 2, 949, 2, 950, 2, 951, 2, 952, 2, 953, 2, 954, 2, 955, 2, 956, 2, 957, 2, 958, 2, 959, 2, 960, 2, 961, 2, 962, 2, 963, 2, 964, 2, 965, 2, 966, 2, 967, 2, 968, 2, 969, 2, 8706, 2, 1013, 2, 977, 2, 1008, 2, 981, 2, 1009, 2, 982, 2, 913, 2, 914, 2, 915, 2, 916, 2, 917, 2, 918, 2, 919, 2, 920, 2, 921, 2, 922, 2, 923, 2, 924, 2, 925, 2, 926, 2, 927, 2, 928, 2, 929, 2, 1012, 2, 931, 2, 932, 2, 933, 2, 934, 2, 935, 2, 936, 2, 937, 2, 8711, 2, 945, 2, 946, 2, 947, 2, 948, 2, 949, 2, 950, 2, 951, 2, 952, 2, 953, 2, 954, 2, 955, 2, 956, 2, 957, 2, 958, 2, 959, 2, 960, 2, 961, 2, 962, 2, 963, 2, 964, 2, 965, 2, 966, 2, 967, 2, 968, 2, 969, 2, 8706, 2, 1013, 2, 977, 2, 1008, 2, 981, 2, 1009, 2, 982, 2, 913, 2, 914, 2, 915, 2, 916, 2, 917, 2, 918, 2, 919, 2, 920, 2, 921, 2, 922, 2, 923, 2, 924, 2, 925, 2, 926, 2, 927, 2, 928, 2, 929, 2, 1012, 2, 931, 2, 932, 2, 933, 2, 934, 2, 935, 2, 936, 2, 937, 2, 8711, 2, 945, 2, 946, 2, 947, 2, 948, 2, 949, 2, 950, 2, 951, 2, 952, 2, 953, 2, 954, 2, 955, 2, 956, 2, 957, 2, 958, 2, 959, 2, 960, 2, 961, 2, 962, 2, 963, 2, 964, 2, 965, 2, 966, 2, 967, 2, 968, 2, 969, 2, 8706, 2, 1013, 2, 977, 2, 1008, 2, 981, 2, 1009, 2, 982, 2, 913, 2, 914, 2, 915, 2, 916, 2, 917, 2, 918, 2, 919, 2, 920, 2, 921, 2, 922, 2, 923, 2, 924, 2, 925, 2, 926, 2, 927, 2, 928, 2, 929, 2, 1012, 2, 931, 2, 932, 2, 933, 2, 934, 2, 935, 2, 936, 2, 937, 2, 8711, 2, 945, 2, 946, 2, 947, 2, 948, 2, 949, 2, 950, 2, 951, 2, 952, 2, 953, 2, 954, 2, 955, 2, 956, 2, 957, 2, 958, 2, 959, 2, 960, 2, 961, 2, 962, 2, 963, 2, 964, 2, 965, 2, 966, 2, 967, 2, 968, 2, 969, 2, 8706, 2, 1013, 2, 977, 2, 1008, 2, 981, 2, 1009, 2, 982, 2, 988, 2, 989, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 2, 1575, 2, 1576, 2, 1580, 2, 1583, 2, 1608, 2, 1586, 2, 1581, 2, 1591, 2, 1610, 2, 1603, 2, 1604, 2, 1605, 2, 1606, 2, 1587, 2, 1593, 2, 1601, 2, 1589, 2, 1602, 2, 1585, 2, 1588, 2, 1578, 2, 1579, 2, 1582, 2, 1584, 2, 1590, 2, 1592, 2, 1594, 2, 1646, 2, 1722, 2, 1697, 2, 1647, 2, 1576, 2, 1580, 2, 1607, 2, 1581, 2, 1610, 2, 1603, 2, 1604, 2, 1605, 2, 1606, 2, 1587, 2, 1593, 2, 1601, 2, 1589, 2, 1602, 2, 1588, 2, 1578, 2, 1579, 2, 1582, 2, 1590, 2, 1594, 2, 1580, 2, 1581, 2, 1610, 2, 1604, 2, 1606, 2, 1587, 2, 1593, 2, 1589, 2, 1602, 2, 1588, 2, 1582, 2, 1590, 2, 1594, 2, 1722, 2, 1647, 2, 1576, 2, 1580, 2, 1607, 2, 1581, 2, 1591, 2, 1610, 2, 1603, 2, 1605, 2, 1606, 2, 1587, 2, 1593, 2, 1601, 2, 1589, 2, 1602, 2, 1588, 2, 1578, 2, 1579, 2, 1582, 2, 1590, 2, 1592, 2, 1594, 2, 1646, 2, 1697, 2, 1575, 2, 1576, 2, 1580, 2, 1583, 2, 1607, 2, 1608, 2, 1586, 2, 1581, 2, 1591, 2, 1610, 2, 1604, 2, 1605, 2, 1606, 2, 1587, 2, 1593, 2, 1601, 2, 1589, 2, 1602, 2, 1585, 2, 1588, 2, 1578, 2, 1579, 2, 1582, 2, 1584, 2, 1590, 2, 1592, 2, 1594, 2, 1576, 2, 1580, 2, 1583, 2, 1608, 2, 1586, 2, 1581, 2, 1591, 2, 1610, 2, 1604, 2, 1605, 2, 1606, 2, 1587, 2, 1593, 2, 1601, 2, 1589, 2, 1602, 2, 1585, 2, 1588, 2, 1578, 2, 1579, 2, 1582, 2, 1584, 2, 1590, 2, 1592, 2, 1594, 4, 48, 46, 4, 48, 44, 4, 49, 44, 4, 50, 44, 4, 51, 44, 4, 52, 44, 4, 53, 44, 4, 54, 44, 4, 55, 44, 4, 56, 44, 4, 57, 44, 6, 40, 65, 41, 6, 40, 66, 41, 6, 40, 67, 41, 6, 40, 68, 41, 6, 40, 69, 41, 6, 40, 70, 41, 6, 40, 71, 41, 6, 40, 72, 41, 6, 40, 73, 41, 6, 40, 74, 41, 6, 40, 75, 41, 6, 40, 76, 41, 6, 40, 77, 41, 6, 40, 78, 41, 6, 40, 79, 41, 6, 40, 80, 41, 6, 40, 81, 41, 6, 40, 82, 41, 6, 40, 83, 41, 6, 40, 84, 41, 6, 40, 85, 41, 6, 40, 86, 41, 6, 40, 87, 41, 6, 40, 88, 41, 6, 40, 89, 41, 6, 40, 90, 41, 6, 12308, 83, 12309, 2, 67, 2, 82, 4, 67, 68, 4, 87, 90, 2, 65, 2, 66, 2, 67, 2, 68, 2, 69, 2, 70, 2, 71, 2, 72, 2, 73, 2, 74, 2, 75, 2, 76, 2, 77, 2, 78, 2, 79, 2, 80, 2, 81, 2, 82, 2, 83, 2, 84, 2, 85, 2, 86, 2, 87, 2, 88, 2, 89, 2, 90, 4, 72, 86, 4, 77, 86, 4, 83, 68, 4, 83, 83, 6, 80, 80, 86, 4, 87, 67, 4, 77, 67, 4, 77, 68, 4, 77, 82, 4, 68, 74, 4, 12411, 12363, 4, 12467, 12467, 2, 12469, 2, 25163, 2, 23383, 2, 21452, 2, 12487, 2, 20108, 2, 22810, 2, 35299, 2, 22825, 2, 20132, 2, 26144, 2, 28961, 2, 26009, 2, 21069, 2, 24460, 2, 20877, 2, 26032, 2, 21021, 2, 32066, 2, 29983, 2, 36009, 2, 22768, 2, 21561, 2, 28436, 2, 25237, 2, 25429, 2, 19968, 2, 19977, 2, 36938, 2, 24038, 2, 20013, 2, 21491, 2, 25351, 2, 36208, 2, 25171, 2, 31105, 2, 31354, 2, 21512, 2, 28288, 2, 26377, 2, 26376, 2, 30003, 2, 21106, 2, 21942, 2, 37197, 6, 12308, 26412, 12309, 6, 12308, 19977, 12309, 6, 12308, 20108, 12309, 6, 12308, 23433, 12309, 6, 12308, 28857, 12309, 6, 12308, 25171, 12309, 6, 12308, 30423, 12309, 6, 12308, 21213, 12309, 6, 12308, 25943, 12309, 2, 24471, 2, 21487, 2, 48, 2, 49, 2, 50, 2, 51, 2, 52, 2, 53, 2, 54, 2, 55, 2, 56, 2, 57, 3, 20029, 3, 20024, 3, 20033, 3, 131362, 3, 20320, 3, 20398, 3, 20411, 3, 20482, 3, 20602, 3, 20633, 3, 20711, 3, 20687, 3, 13470, 3, 132666, 3, 20813, 3, 20820, 3, 20836, 3, 20855, 3, 132380, 3, 13497, 3, 20839, 3, 20877, 3, 132427, 3, 20887, 3, 20900, 3, 20172, 3, 20908, 3, 20917, 3, 168415, 3, 20981, 3, 20995, 3, 13535, 3, 21051, 3, 21062, 3, 21106, 3, 21111, 3, 13589, 3, 21191, 3, 21193, 3, 21220, 3, 21242, 3, 21253, 3, 21254, 3, 21271, 3, 21321, 3, 21329, 3, 21338, 3, 21363, 3, 21373, 3, 21375, 3, 21375, 3, 21375, 3, 133676, 3, 28784, 3, 21450, 3, 21471, 3, 133987, 3, 21483, 3, 21489, 3, 21510, 3, 21662, 3, 21560, 3, 21576, 3, 21608, 3, 21666, 3, 21750, 3, 21776, 3, 21843, 3, 21859, 3, 21892, 3, 21892, 3, 21913, 3, 21931, 3, 21939, 3, 21954, 3, 22294, 3, 22022, 3, 22295, 3, 22097, 3, 22132, 3, 20999, 3, 22766, 3, 22478, 3, 22516, 3, 22541, 3, 22411, 3, 22578, 3, 22577, 3, 22700, 3, 136420, 3, 22770, 3, 22775, 3, 22790, 3, 22810, 3, 22818, 3, 22882, 3, 136872, 3, 136938, 3, 23020, 3, 23067, 3, 23079, 3, 23000, 3, 23142, 3, 14062, 3, 14076, 3, 23304, 3, 23358, 3, 23358, 3, 137672, 3, 23491, 3, 23512, 3, 23527, 3, 23539, 3, 138008, 3, 23551, 3, 23558, 3, 24403, 3, 23586, 3, 14209, 3, 23648, 3, 23662, 3, 23744, 3, 23693, 3, 138724, 3, 23875, 3, 138726, 3, 23918, 3, 23915, 3, 23932, 3, 24033, 3, 24034, 3, 14383, 3, 24061, 3, 24104, 3, 24125, 3, 24169, 3, 14434, 3, 139651, 3, 14460, 3, 24240, 3, 24243, 3, 24246, 3, 24266, 3, 172946, 3, 24318, 3, 140081, 3, 140081, 3, 33281, 3, 24354, 3, 24354, 3, 14535, 3, 144056, 3, 156122, 3, 24418, 3, 24427, 3, 14563, 3, 24474, 3, 24525, 3, 24535, 3, 24569, 3, 24705, 3, 14650, 3, 14620, 3, 24724, 3, 141012, 3, 24775, 3, 24904, 3, 24908, 3, 24910, 3, 24908, 3, 24954, 3, 24974, 3, 25010, 3, 24996, 3, 25007, 3, 25054, 3, 25074, 3, 25078, 3, 25104, 3, 25115, 3, 25181, 3, 25265, 3, 25300, 3, 25424, 3, 142092, 3, 25405, 3, 25340, 3, 25448, 3, 25475, 3, 25572, 3, 142321, 3, 25634, 3, 25541, 3, 25513, 3, 14894, 3, 25705, 3, 25726, 3, 25757, 3, 25719, 3, 14956, 3, 25935, 3, 25964, 3, 143370, 3, 26083, 3, 26360, 3, 26185, 3, 15129, 3, 26257, 3, 15112, 3, 15076, 3, 20882, 3, 20885, 3, 26368, 3, 26268, 3, 32941, 3, 17369, 3, 26391, 3, 26395, 3, 26401, 3, 26462, 3, 26451, 3, 144323, 3, 15177, 3, 26618, 3, 26501, 3, 26706, 3, 26757, 3, 144493, 3, 26766, 3, 26655, 3, 26900, 3, 15261, 3, 26946, 3, 27043, 3, 27114, 3, 27304, 3, 145059, 3, 27355, 3, 15384, 3, 27425, 3, 145575, 3, 27476, 3, 15438, 3, 27506, 3, 27551, 3, 27578, 3, 27579, 3, 146061, 3, 138507, 3, 146170, 3, 27726, 3, 146620, 3, 27839, 3, 27853, 3, 27751, 3, 27926, 3, 27966, 3, 28023, 3, 27969, 3, 28009, 3, 28024, 3, 28037, 3, 146718, 3, 27956, 3, 28207, 3, 28270, 3, 15667, 3, 28363, 3, 28359, 3, 147153, 3, 28153, 3, 28526, 3, 147294, 3, 147342, 3, 28614, 3, 28729, 3, 28702, 3, 28699, 3, 15766, 3, 28746, 3, 28797, 3, 28791, 3, 28845, 3, 132389, 3, 28997, 3, 148067, 3, 29084, 3, 148395, 3, 29224, 3, 29237, 3, 29264, 3, 149000, 3, 29312, 3, 29333, 3, 149301, 3, 149524, 3, 29562, 3, 29579, 3, 16044, 3, 29605, 3, 16056, 3, 16056, 3, 29767, 3, 29788, 3, 29809, 3, 29829, 3, 29898, 3, 16155, 3, 29988, 3, 150582, 3, 30014, 3, 150674, 3, 30064, 3, 139679, 3, 30224, 3, 151457, 3, 151480, 3, 151620, 3, 16380, 3, 16392, 3, 30452, 3, 151795, 3, 151794, 3, 151833, 3, 151859, 3, 30494, 3, 30495, 3, 30495, 3, 30538, 3, 16441, 3, 30603, 3, 16454, 3, 16534, 3, 152605, 3, 30798, 3, 30860, 3, 30924, 3, 16611, 3, 153126, 3, 31062, 3, 153242, 3, 153285, 3, 31119, 3, 31211, 3, 16687, 3, 31296, 3, 31306, 3, 31311, 3, 153980, 3, 154279, 3, 154279, 3, 31470, 3, 16898, 3, 154539, 3, 31686, 3, 31689, 3, 16935, 3, 154752, 3, 31954, 3, 17056, 3, 31976, 3, 31971, 3, 32000, 3, 155526, 3, 32099, 3, 17153, 3, 32199, 3, 32258, 3, 32325, 3, 17204, 3, 156200, 3, 156231, 3, 17241, 3, 156377, 3, 32634, 3, 156478, 3, 32661, 3, 32762, 3, 32773, 3, 156890, 3, 156963, 3, 32864, 3, 157096, 3, 32880, 3, 144223, 3, 17365, 3, 32946, 3, 33027, 3, 17419, 3, 33086, 3, 23221, 3, 157607, 3, 157621, 3, 144275, 3, 144284, 3, 33281, 3, 33284, 3, 36766, 3, 17515, 3, 33425, 3, 33419, 3, 33437, 3, 21171, 3, 33457, 3, 33459, 3, 33469, 3, 33510, 3, 158524, 3, 33509, 3, 33565, 3, 33635, 3, 33709, 3, 33571, 3, 33725, 3, 33767, 3, 33879, 3, 33619, 3, 33738, 3, 33740, 3, 33756, 3, 158774, 3, 159083, 3, 158933, 3, 17707, 3, 34033, 3, 34035, 3, 34070, 3, 160714, 3, 34148, 3, 159532, 3, 17757, 3, 17761, 3, 159665, 3, 159954, 3, 17771, 3, 34384, 3, 34396, 3, 34407, 3, 34409, 3, 34473, 3, 34440, 3, 34574, 3, 34530, 3, 34681, 3, 34600, 3, 34667, 3, 34694, 3, 17879, 3, 34785, 3, 34817, 3, 17913, 3, 34912, 3, 34915, 3, 161383, 3, 35031, 3, 35038, 3, 17973, 3, 35066, 3, 13499, 3, 161966, 3, 162150, 3, 18110, 3, 18119, 3, 35488, 3, 35565, 3, 35722, 3, 35925, 3, 162984, 3, 36011, 3, 36033, 3, 36123, 3, 36215, 3, 163631, 3, 133124, 3, 36299, 3, 36284, 3, 36336, 3, 133342, 3, 36564, 3, 36664, 3, 165330, 3, 165357, 3, 37012, 3, 37105, 3, 37137, 3, 165678, 3, 37147, 3, 37432, 3, 37591, 3, 37592, 3, 37500, 3, 37881, 3, 37909, 3, 166906, 3, 38283, 3, 18837, 3, 38327, 3, 167287, 3, 18918, 3, 38595, 3, 23986, 3, 38691, 3, 168261, 3, 168474, 3, 19054, 3, 19062, 3, 38880, 3, 168970, 3, 19122, 3, 169110, 3, 38923, 3, 38923, 3, 38953, 3, 169398, 3, 39138, 3, 19251, 3, 39209, 3, 39335, 3, 39362, 3, 39422, 3, 19406, 3, 170800, 3, 39698, 3, 40000, 3, 40189, 3, 19662, 3, 19693, 3, 40295, 3, 172238, 3, 19704, 3, 172293, 3, 172558, 3, 172689, 3, 40635, 3, 19798, 3, 40697, 3, 40702, 3, 40709, 3, 40719, 3, 40726, 3, 40763, 3, 173568]);
    var propsOffsets_1124073515 = new Int16Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 101, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 102, 41, 41, 41, 41, 41, 41, 41, 41, 103, 41, 41, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 117, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 121, 122, 123, 124, 125, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 41, 41, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 136, 169, 170, 136, 171, 172, 173, 174, 136, 175, 176, 177, 178, 179, 180, 136, 136, 181, 182, 183, 184, 136, 185, 136, 186, 41, 41, 41, 41, 41, 41, 41, 187, 188, 41, 189, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 190, 41, 41, 41, 41, 41, 41, 41, 41, 191, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 41, 41, 41, 41, 192, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 41, 41, 41, 41, 193, 194, 195, 196, 136, 136, 136, 136, 197, 198, 199, 200, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 201, 41, 41, 41, 41, 41, 41, 41, 41, 41, 202, 203, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 204, 41, 41, 205, 41, 41, 206, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 207, 208, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 209, 210, 78, 211, 212, 213, 214, 215, 216, 136, 217, 218, 219, 220, 221, 222, 223, 224, 78, 78, 78, 78, 225, 226, 136, 136, 136, 136, 136, 136, 136, 136, 227, 136, 228, 136, 229, 136, 136, 230, 136, 136, 136, 136, 136, 136, 136, 136, 136, 231, 232, 233, 234, 157, 157, 157, 157, 157, 235, 236, 237, 157, 238, 239, 157, 157, 240, 241, 242, 243, 244, 136, 72, 245, 72, 72, 72, 72, 72, 246, 247, 248, 249, 250, 72, 72, 251, 252, 72, 253, 136, 136, 136, 136, 136, 136, 136, 254, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 255, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 256, 41, 257, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 258, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 259, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 120, 120, 120, 120, 260, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 261, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 262, 263, 264, 265, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 254, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 266, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 266]);
    var propsIndices_1124073516 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 5, 5, 6, 7, 6, 5, 5, 8, 9, 5, 10, 11, 12, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 5, 14, 14, 14, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 8, 5, 9, 16, 17, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 8, 14, 9, 14, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 5, 7, 7, 7, 7, 20, 5, 21, 20, 22, 23, 14, 24, 20, 21, 25, 26, 27, 27, 21, 28, 5, 5, 21, 27, 22, 29, 30, 30, 30, 5, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 14, 15, 31, 31, 31, 31, 31, 15, 18, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 32, 32, 32, 18, 32, 32, 32, 32, 32, 32, 14, 18, 32, 32, 32, 32, 32, 18, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 18, 33, 28, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 33, 28, 15, 18, 31, 32, 31, 32, 31, 32, 28, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 31, 32, 31, 32, 31, 32, 28, 18, 15, 15, 18, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 15, 15, 15, 15, 18, 15, 15, 18, 15, 15, 15, 18, 18, 18, 15, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 15, 18, 15, 18, 18, 15, 18, 15, 31, 32, 15, 15, 15, 18, 15, 18, 15, 15, 18, 18, 34, 15, 18, 18, 18, 34, 34, 34, 34, 33, 35, 28, 33, 35, 28, 33, 35, 28, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 33, 35, 28, 31, 32, 15, 15, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 18, 18, 18, 18, 18, 18, 15, 15, 18, 15, 15, 18, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 38, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 16, 16, 16, 16, 16, 16, 21, 21, 21, 21, 21, 21, 16, 16, 36, 36, 36, 36, 36, 16, 16, 16, 16, 16, 16, 16, 37, 16, 38, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 40, 40, 39, 40, 39, 40, 39, 39, 41, 42, 42, 42, 42, 41, 43, 42, 42, 42, 42, 42, 44, 44, 45, 45, 45, 45, 46, 46, 42, 42, 42, 42, 45, 45, 42, 45, 45, 42, 42, 47, 47, 47, 47, 48, 42, 42, 42, 42, 40, 40, 40, 49, 49, 39, 49, 49, 50, 40, 42, 42, 42, 40, 40, 40, 42, 42, 51, 40, 40, 40, 42, 42, 42, 42, 40, 41, 42, 42, 40, 52, 53, 53, 52, 53, 53, 52, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 15, 18, 15, 18, 54, 16, 15, 18, 55, 55, 36, 18, 18, 18, 56, 15, 55, 55, 55, 55, 21, 57, 31, 56, 31, 31, 31, 55, 31, 55, 31, 31, 32, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 15, 15, 15, 15, 15, 15, 31, 31, 32, 32, 32, 32, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 32, 32, 32, 15, 28, 28, 33, 58, 58, 28, 28, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 28, 28, 28, 18, 33, 28, 14, 15, 18, 33, 15, 18, 18, 15, 15, 15, 31, 31, 15, 31, 15, 15, 15, 31, 15, 15, 15, 15, 31, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32, 32, 18, 32, 18, 18, 18, 32, 18, 18, 18, 18, 32, 32, 32, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 59, 40, 40, 40, 40, 40, 60, 60, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 31, 32, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 38, 61, 61, 61, 61, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 28, 18, 61, 62, 55, 55, 20, 20, 7, 63, 42, 40, 40, 40, 40, 42, 40, 40, 40, 64, 42, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 64, 65, 40, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 81, 40, 42, 81, 74, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 84, 84, 84, 84, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 85, 85, 85, 85, 85, 85, 14, 14, 86, 6, 6, 87, 11, 88, 20, 20, 40, 40, 40, 40, 40, 40, 40, 40, 89, 90, 91, 88, 92, 88, 88, 88, 93, 93, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 95, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 96, 97, 98, 89, 90, 91, 99, 100, 39, 39, 45, 42, 40, 40, 40, 40, 40, 42, 40, 40, 42, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 6, 102, 102, 88, 93, 93, 103, 93, 93, 93, 93, 104, 104, 104, 104, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 93, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 88, 93, 40, 40, 40, 40, 40, 40, 40, 85, 20, 40, 40, 40, 40, 42, 40, 95, 95, 40, 40, 20, 42, 40, 40, 42, 93, 93, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93, 93, 93, 105, 105, 93, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 106, 92, 93, 107, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 40, 42, 40, 40, 42, 40, 40, 42, 42, 42, 40, 42, 42, 40, 42, 40, 40, 40, 42, 40, 42, 40, 42, 40, 42, 40, 40, 106, 106, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 93, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 40, 40, 40, 42, 40, 109, 109, 20, 5, 5, 5, 109, 63, 63, 42, 110, 110, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 40, 40, 109, 40, 40, 40, 40, 40, 40, 40, 40, 40, 109, 40, 40, 40, 109, 40, 40, 40, 40, 40, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 42, 42, 42, 63, 63, 81, 63, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 106, 106, 106, 106, 106, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 111, 93, 93, 93, 93, 93, 93, 106, 85, 85, 106, 106, 106, 106, 106, 106, 40, 42, 42, 42, 40, 40, 40, 40, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 95, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 85, 42, 40, 40, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 96, 97, 98, 40, 40, 40, 42, 40, 40, 42, 42, 40, 40, 40, 40, 40, 51, 51, 51, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 113, 34, 34, 34, 34, 34, 34, 34, 113, 34, 34, 113, 34, 34, 34, 34, 34, 51, 112, 114, 34, 112, 112, 112, 51, 51, 51, 51, 51, 51, 51, 51, 112, 112, 112, 112, 115, 112, 112, 34, 40, 42, 40, 40, 51, 51, 51, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 51, 51, 61, 61, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 61, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 112, 112, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 55, 34, 34, 34, 34, 55, 55, 118, 34, 119, 112, 112, 51, 51, 51, 51, 55, 55, 112, 112, 55, 55, 120, 120, 115, 34, 55, 55, 55, 55, 55, 55, 55, 55, 119, 55, 55, 55, 55, 116, 116, 55, 116, 34, 34, 51, 51, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 34, 34, 7, 7, 121, 121, 121, 121, 121, 121, 59, 7, 34, 61, 40, 55, 55, 51, 51, 112, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 116, 55, 34, 116, 55, 34, 34, 55, 55, 118, 55, 112, 112, 112, 51, 51, 55, 55, 55, 55, 51, 51, 55, 55, 51, 51, 115, 55, 55, 55, 51, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 34, 55, 116, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 51, 51, 34, 34, 34, 51, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 112, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 118, 34, 112, 112, 112, 51, 51, 51, 51, 51, 55, 51, 51, 112, 55, 112, 112, 115, 55, 55, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 51, 51, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 61, 7, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 55, 51, 112, 112, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 118, 34, 119, 51, 112, 51, 51, 51, 51, 55, 55, 112, 120, 55, 55, 120, 120, 115, 55, 55, 55, 55, 55, 55, 55, 51, 122, 119, 55, 55, 55, 55, 116, 116, 55, 34, 34, 34, 51, 51, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 59, 34, 121, 121, 121, 121, 121, 121, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 34, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 55, 34, 34, 113, 34, 55, 55, 55, 34, 34, 55, 34, 55, 34, 34, 55, 55, 55, 34, 34, 55, 55, 55, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 119, 112, 51, 112, 112, 55, 55, 55, 112, 112, 112, 55, 120, 120, 120, 115, 55, 55, 34, 55, 55, 55, 55, 55, 55, 119, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 121, 121, 121, 20, 20, 20, 20, 20, 20, 7, 20, 55, 55, 55, 55, 55, 51, 112, 112, 112, 51, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 118, 34, 51, 51, 51, 112, 112, 112, 112, 55, 51, 51, 123, 55, 51, 51, 51, 115, 55, 55, 55, 55, 55, 55, 55, 124, 125, 55, 34, 34, 34, 55, 55, 34, 55, 55, 34, 34, 51, 51, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 55, 61, 126, 126, 126, 126, 126, 126, 126, 59, 34, 51, 112, 112, 61, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 55, 55, 118, 34, 112, 127, 120, 112, 119, 112, 112, 55, 127, 120, 120, 55, 120, 120, 51, 115, 55, 55, 55, 55, 55, 55, 55, 119, 119, 55, 55, 55, 55, 55, 55, 34, 34, 55, 34, 34, 51, 51, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 115, 115, 34, 119, 112, 112, 51, 51, 51, 51, 55, 112, 112, 112, 55, 120, 120, 120, 115, 34, 59, 55, 55, 55, 55, 34, 34, 34, 119, 121, 121, 121, 121, 121, 121, 121, 34, 34, 34, 51, 51, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 121, 121, 121, 121, 121, 121, 121, 121, 121, 59, 34, 34, 34, 34, 34, 34, 55, 51, 112, 112, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 128, 55, 55, 55, 55, 119, 112, 112, 51, 51, 51, 55, 51, 55, 112, 112, 120, 112, 120, 120, 120, 119, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 112, 112, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 129, 129, 115, 55, 55, 55, 55, 7, 34, 34, 34, 34, 34, 34, 38, 51, 130, 130, 130, 130, 51, 51, 51, 61, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 55, 34, 55, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 34, 22, 51, 51, 51, 51, 131, 131, 115, 51, 51, 34, 55, 55, 34, 34, 34, 34, 34, 55, 38, 55, 132, 132, 132, 132, 51, 51, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 22, 22, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 59, 59, 59, 61, 61, 61, 61, 61, 61, 61, 61, 133, 61, 61, 61, 61, 61, 61, 59, 61, 59, 59, 59, 42, 42, 59, 59, 59, 59, 59, 59, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 59, 42, 59, 42, 59, 134, 8, 9, 8, 9, 112, 112, 34, 34, 34, 116, 34, 34, 34, 34, 55, 34, 34, 34, 34, 116, 34, 34, 34, 34, 116, 34, 34, 34, 34, 116, 34, 34, 34, 34, 116, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 116, 34, 34, 34, 55, 55, 55, 55, 135, 136, 137, 138, 137, 137, 139, 137, 139, 136, 136, 136, 136, 51, 112, 136, 137, 40, 40, 115, 61, 40, 40, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 137, 51, 51, 51, 51, 55, 51, 51, 51, 51, 137, 51, 51, 51, 51, 137, 51, 51, 51, 51, 137, 51, 51, 51, 51, 137, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 137, 51, 51, 51, 55, 59, 59, 59, 59, 59, 59, 59, 59, 42, 59, 59, 59, 59, 59, 59, 55, 59, 59, 61, 61, 61, 61, 61, 59, 59, 59, 59, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 113, 34, 34, 34, 34, 112, 112, 51, 122, 51, 51, 112, 51, 51, 51, 51, 51, 118, 112, 115, 115, 112, 112, 51, 51, 34, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 112, 112, 51, 51, 34, 34, 34, 34, 51, 51, 51, 34, 112, 112, 112, 34, 34, 112, 112, 112, 112, 112, 112, 112, 34, 34, 34, 51, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 112, 112, 51, 51, 112, 112, 112, 112, 112, 112, 42, 34, 112, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 112, 112, 112, 51, 59, 59, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 55, 55, 55, 55, 55, 15, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 61, 36, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 40, 40, 40, 61, 61, 61, 61, 61, 61, 61, 61, 61, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 18, 18, 18, 18, 18, 18, 55, 55, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 59, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 4, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 8, 9, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 61, 141, 141, 141, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 115, 142, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 142, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 55, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 112, 51, 51, 51, 51, 51, 51, 51, 112, 112, 112, 112, 112, 112, 112, 112, 51, 112, 112, 51, 51, 51, 51, 51, 51, 51, 51, 51, 115, 51, 61, 61, 61, 38, 61, 61, 61, 7, 34, 40, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 62, 5, 5, 5, 5, 51, 51, 51, 24, 51, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 65, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 51, 51, 51, 112, 112, 112, 112, 51, 51, 112, 112, 112, 55, 55, 55, 55, 112, 112, 51, 112, 112, 112, 112, 112, 112, 64, 40, 42, 55, 55, 55, 55, 20, 55, 55, 55, 5, 5, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 121, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 42, 112, 112, 51, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 51, 112, 51, 51, 51, 51, 51, 51, 51, 55, 115, 112, 51, 112, 112, 51, 51, 51, 51, 51, 51, 51, 51, 112, 112, 112, 112, 112, 112, 51, 51, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 42, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 38, 61, 61, 61, 61, 61, 61, 55, 55, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 40, 40, 42, 60, 42, 42, 40, 40, 42, 42, 40, 40, 40, 40, 40, 42, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 112, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 34, 34, 113, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 119, 51, 51, 51, 51, 51, 120, 51, 120, 112, 112, 120, 120, 51, 120, 142, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 61, 61, 61, 61, 61, 61, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 42, 40, 40, 40, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 61, 61, 55, 51, 51, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 51, 51, 51, 51, 112, 112, 51, 51, 142, 115, 51, 51, 34, 34, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 112, 51, 51, 112, 112, 112, 51, 112, 51, 51, 51, 142, 142, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 112, 112, 112, 112, 112, 51, 51, 51, 51, 51, 51, 51, 51, 112, 112, 51, 118, 55, 55, 55, 61, 61, 61, 61, 61, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 34, 34, 34, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 15, 15, 15, 61, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 61, 47, 42, 42, 42, 42, 42, 40, 40, 42, 42, 42, 42, 40, 112, 47, 47, 47, 47, 47, 47, 47, 34, 34, 34, 34, 42, 34, 34, 34, 34, 34, 34, 40, 34, 34, 112, 40, 40, 34, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 42, 40, 40, 40, 40, 40, 40, 40, 42, 40, 40, 53, 143, 42, 44, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 65, 65, 42, 144, 40, 52, 42, 40, 42, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 32, 32, 32, 32, 28, 145, 18, 18, 15, 18, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 15, 18, 15, 18, 15, 18, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 55, 55, 31, 31, 31, 31, 31, 31, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 55, 31, 55, 31, 55, 31, 55, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 146, 32, 146, 32, 146, 32, 146, 32, 146, 32, 146, 32, 146, 55, 55, 32, 32, 32, 32, 32, 32, 32, 32, 147, 147, 147, 147, 147, 147, 147, 147, 32, 32, 32, 32, 32, 32, 32, 32, 147, 147, 147, 147, 147, 147, 147, 147, 32, 32, 32, 32, 32, 32, 32, 32, 147, 147, 147, 147, 147, 147, 147, 147, 32, 32, 32, 32, 32, 55, 32, 32, 31, 31, 31, 148, 147, 21, 146, 21, 21, 57, 32, 32, 32, 55, 32, 32, 31, 148, 31, 148, 147, 57, 57, 57, 32, 32, 32, 146, 55, 55, 32, 32, 31, 31, 31, 148, 55, 57, 57, 57, 32, 32, 32, 146, 32, 32, 32, 32, 31, 31, 31, 148, 31, 57, 149, 149, 55, 55, 32, 32, 32, 55, 32, 32, 31, 148, 31, 148, 147, 149, 21, 55, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 24, 24, 24, 152, 153, 62, 154, 62, 62, 62, 62, 5, 155, 23, 29, 8, 23, 23, 29, 8, 23, 5, 5, 5, 5, 155, 155, 155, 5, 156, 157, 158, 159, 160, 161, 162, 19, 6, 6, 6, 163, 163, 5, 155, 155, 5, 23, 29, 5, 155, 5, 155, 17, 17, 5, 5, 5, 164, 8, 9, 155, 155, 155, 5, 5, 5, 5, 5, 5, 5, 5, 14, 5, 17, 5, 5, 155, 5, 5, 5, 5, 5, 5, 5, 151, 24, 24, 24, 24, 24, 165, 166, 167, 168, 169, 24, 24, 24, 24, 24, 24, 27, 36, 55, 55, 27, 27, 27, 27, 27, 27, 170, 170, 171, 172, 173, 36, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 170, 170, 171, 172, 173, 55, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 55, 55, 55, 7, 7, 7, 7, 7, 7, 7, 7, 174, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 40, 40, 47, 47, 40, 40, 40, 40, 47, 47, 47, 40, 40, 60, 60, 60, 60, 40, 60, 60, 60, 47, 47, 40, 42, 40, 47, 47, 42, 42, 42, 42, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 176, 176, 33, 176, 20, 176, 176, 33, 20, 176, 28, 33, 33, 33, 28, 28, 33, 33, 33, 28, 20, 33, 176, 20, 14, 33, 33, 33, 33, 33, 20, 20, 176, 176, 176, 20, 33, 20, 148, 20, 33, 20, 148, 148, 33, 33, 25, 28, 33, 33, 15, 33, 28, 22, 22, 22, 22, 28, 20, 176, 28, 28, 33, 33, 171, 14, 14, 14, 14, 33, 28, 28, 28, 28, 20, 14, 20, 20, 18, 59, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 141, 141, 141, 15, 18, 141, 141, 141, 141, 30, 20, 20, 55, 55, 55, 55, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 178, 178, 20, 20, 20, 20, 14, 20, 20, 14, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 178, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 179, 178, 178, 20, 20, 14, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 14, 14, 14, 14, 178, 14, 14, 178, 14, 14, 14, 14, 14, 10, 26, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 14, 178, 14, 14, 14, 14, 14, 171, 171, 14, 171, 171, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 14, 14, 178, 14, 14, 178, 14, 178, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 14, 178, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 178, 178, 178, 178, 14, 14, 178, 178, 14, 14, 178, 178, 14, 14, 14, 14, 14, 14, 178, 178, 14, 14, 178, 178, 14, 14, 178, 178, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 178, 178, 178, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 178, 178, 178, 14, 14, 14, 14, 14, 14, 178, 178, 178, 178, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 20, 20, 20, 20, 20, 20, 20, 180, 181, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 30, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 8, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 171, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 171, 171, 171, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 183, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 14, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 15, 15, 18, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 18, 15, 18, 18, 18, 18, 18, 18, 36, 36, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 20, 20, 20, 20, 20, 20, 15, 18, 15, 18, 40, 40, 40, 15, 18, 55, 55, 55, 55, 55, 5, 5, 5, 5, 126, 5, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 18, 55, 55, 55, 55, 55, 18, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 36, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 115, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 5, 23, 29, 23, 29, 5, 5, 5, 23, 29, 5, 23, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 5, 5, 62, 5, 23, 29, 5, 5, 23, 29, 8, 9, 8, 9, 8, 9, 8, 9, 5, 5, 5, 5, 5, 37, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62, 62, 5, 5, 5, 5, 62, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 20, 20, 5, 5, 5, 8, 9, 8, 9, 8, 9, 8, 9, 62, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 176, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 176, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 151, 5, 5, 5, 20, 38, 34, 141, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 20, 20, 8, 9, 8, 9, 8, 9, 8, 9, 62, 8, 9, 9, 20, 141, 141, 141, 141, 141, 141, 141, 141, 141, 144, 65, 41, 64, 184, 184, 62, 38, 38, 38, 38, 38, 176, 20, 177, 177, 177, 38, 34, 5, 20, 20, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 34, 113, 34, 113, 34, 113, 34, 34, 34, 34, 34, 34, 113, 113, 34, 113, 113, 34, 113, 113, 34, 113, 113, 34, 113, 113, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 113, 34, 34, 55, 55, 185, 185, 21, 21, 38, 186, 22, 62, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 113, 34, 34, 113, 34, 113, 34, 113, 34, 34, 34, 34, 34, 34, 113, 113, 34, 113, 113, 34, 113, 113, 34, 113, 113, 34, 113, 113, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 113, 34, 34, 113, 113, 113, 113, 5, 38, 38, 186, 22, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 59, 59, 187, 187, 187, 187, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 176, 176, 55, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 121, 121, 121, 121, 121, 121, 121, 121, 176, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 176, 176, 176, 59, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 176, 176, 176, 176, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 176, 176, 176, 176, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 176, 176, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 176, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38, 38, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 5, 5, 5, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 34, 40, 60, 60, 60, 5, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 5, 37, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 36, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 40, 40, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 37, 37, 37, 37, 37, 37, 37, 37, 37, 16, 16, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 36, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 18, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 37, 188, 188, 15, 18, 15, 18, 34, 15, 18, 15, 18, 18, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 15, 18, 15, 15, 15, 15, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 18, 15, 15, 15, 15, 18, 15, 18, 55, 55, 55, 55, 55, 15, 18, 55, 18, 55, 18, 15, 18, 15, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 36, 36, 36, 15, 18, 34, 36, 36, 18, 34, 34, 34, 34, 34, 34, 34, 51, 34, 34, 34, 115, 34, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 51, 51, 112, 20, 20, 20, 20, 115, 55, 55, 55, 121, 121, 121, 121, 121, 121, 59, 59, 7, 25, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 112, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 115, 51, 55, 55, 55, 55, 55, 55, 55, 55, 61, 61, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 34, 34, 34, 34, 34, 34, 61, 61, 61, 34, 61, 34, 34, 51, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 42, 42, 42, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 112, 142, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 51, 51, 51, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 112, 112, 51, 51, 51, 51, 112, 112, 51, 51, 112, 112, 142, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 55, 38, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 51, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 112, 112, 51, 51, 112, 112, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 51, 34, 34, 34, 34, 34, 34, 34, 34, 51, 112, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 61, 61, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 59, 59, 59, 34, 112, 51, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 34, 40, 40, 42, 34, 34, 40, 40, 34, 34, 34, 34, 34, 40, 40, 34, 40, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 38, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 51, 51, 112, 112, 61, 61, 34, 38, 38, 112, 115, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 188, 36, 36, 36, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 36, 16, 16, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 51, 112, 112, 51, 112, 112, 61, 112, 115, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 34, 116, 34, 116, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 34, 116, 34, 116, 34, 34, 116, 116, 34, 34, 34, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 55, 55, 55, 55, 55, 191, 192, 191, 193, 193, 193, 193, 193, 193, 193, 193, 193, 170, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 63, 191, 191, 191, 191, 191, 63, 191, 63, 191, 191, 63, 191, 191, 63, 191, 191, 191, 191, 191, 191, 191, 191, 191, 193, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 9, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 106, 106, 106, 106, 106, 106, 20, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 194, 20, 20, 20, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 155, 155, 155, 155, 155, 155, 155, 172, 173, 155, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 40, 40, 155, 154, 154, 195, 195, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 172, 173, 5, 5, 172, 173, 155, 155, 155, 155, 195, 195, 195, 196, 155, 196, 55, 155, 196, 155, 155, 154, 172, 173, 172, 173, 172, 173, 163, 155, 155, 170, 197, 171, 171, 171, 55, 155, 174, 163, 155, 55, 55, 55, 55, 104, 104, 104, 93, 104, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 106, 24, 55, 155, 155, 163, 174, 163, 155, 155, 172, 173, 155, 170, 196, 197, 196, 196, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 196, 155, 171, 171, 171, 155, 155, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 172, 155, 173, 21, 195, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 172, 171, 173, 171, 172, 173, 155, 172, 173, 155, 155, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 36, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 55, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 22, 22, 22, 55, 55, 22, 22, 22, 55, 55, 55, 174, 174, 171, 21, 176, 174, 174, 55, 176, 171, 171, 171, 171, 176, 176, 55, 165, 165, 165, 165, 165, 165, 165, 165, 165, 199, 199, 199, 20, 20, 165, 165, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 61, 5, 61, 55, 55, 55, 55, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 126, 126, 126, 126, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 126, 126, 20, 59, 59, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 42, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 42, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 121, 121, 121, 121, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 141, 34, 34, 34, 34, 34, 34, 34, 34, 141, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 61, 141, 141, 141, 141, 141, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 55, 15, 15, 15, 15, 15, 15, 15, 55, 15, 15, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 18, 18, 18, 18, 18, 18, 18, 55, 18, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 38, 36, 36, 36, 36, 36, 55, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 55, 36, 36, 36, 36, 36, 36, 36, 36, 36, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 84, 84, 84, 84, 84, 84, 63, 63, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 84, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 81, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 203, 203, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 63, 63, 63, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 202, 202, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 51, 51, 51, 63, 51, 51, 63, 63, 63, 63, 63, 51, 42, 51, 40, 84, 84, 84, 84, 63, 84, 84, 84, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 40, 47, 42, 63, 63, 63, 63, 115, 202, 202, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 81, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 203, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 42, 63, 63, 63, 63, 202, 202, 202, 202, 202, 81, 81, 81, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 5, 5, 5, 5, 5, 5, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 63, 63, 63, 63, 63, 63, 63, 202, 202, 202, 202, 202, 202, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 40, 40, 40, 40, 106, 106, 106, 106, 106, 106, 106, 106, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 106, 106, 106, 106, 106, 106, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 40, 40, 79, 63, 63, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 84, 63, 63, 63, 63, 63, 63, 63, 63, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 42, 42, 40, 40, 40, 42, 40, 42, 42, 42, 42, 207, 207, 207, 207, 88, 88, 88, 88, 88, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 42, 40, 42, 81, 81, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 202, 202, 202, 202, 202, 202, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 63, 63, 63, 63, 63, 63, 63, 112, 51, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 115, 61, 61, 61, 61, 61, 61, 61, 55, 55, 55, 55, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 115, 34, 34, 51, 51, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 115, 51, 51, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 113, 34, 113, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 113, 34, 34, 34, 34, 112, 112, 112, 51, 51, 51, 51, 112, 112, 115, 114, 61, 61, 152, 61, 61, 61, 61, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 152, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 40, 40, 40, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 122, 51, 51, 51, 51, 112, 51, 123, 123, 51, 51, 51, 115, 115, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 61, 61, 61, 61, 34, 112, 112, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 118, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 112, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 51, 51, 51, 51, 51, 51, 51, 51, 51, 112, 142, 34, 34, 34, 34, 61, 61, 61, 61, 51, 118, 51, 51, 61, 112, 51, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 34, 61, 34, 61, 61, 61, 55, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 51, 51, 51, 112, 112, 51, 142, 118, 51, 61, 61, 61, 61, 61, 61, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 55, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 112, 112, 112, 51, 51, 51, 51, 51, 51, 118, 115, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 51, 51, 112, 112, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 55, 118, 118, 34, 119, 112, 51, 112, 112, 112, 112, 55, 55, 112, 112, 55, 55, 120, 120, 142, 55, 55, 34, 55, 55, 55, 55, 55, 55, 119, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 112, 112, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 55, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 51, 51, 51, 51, 51, 51, 51, 51, 112, 112, 115, 51, 51, 112, 118, 34, 34, 34, 34, 61, 61, 61, 61, 61, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 61, 61, 55, 61, 40, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 119, 112, 112, 51, 51, 51, 51, 51, 51, 112, 122, 120, 120, 119, 120, 51, 51, 112, 115, 118, 34, 34, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 119, 112, 112, 51, 51, 51, 51, 55, 55, 112, 112, 120, 120, 51, 51, 112, 115, 118, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 34, 34, 34, 34, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 51, 51, 51, 51, 51, 51, 51, 51, 112, 112, 51, 112, 115, 51, 61, 61, 61, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 112, 51, 112, 112, 51, 51, 51, 51, 51, 51, 142, 118, 34, 61, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 112, 112, 51, 51, 51, 51, 112, 51, 51, 51, 51, 115, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 121, 121, 61, 61, 61, 59, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 51, 51, 51, 51, 51, 51, 51, 51, 51, 112, 115, 118, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 121, 121, 121, 121, 121, 121, 121, 121, 121, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 119, 112, 112, 112, 112, 112, 55, 112, 120, 55, 55, 51, 51, 142, 115, 34, 112, 34, 112, 118, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 51, 51, 51, 51, 55, 55, 51, 51, 112, 112, 112, 112, 115, 34, 61, 34, 112, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 127, 127, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 115, 51, 51, 51, 51, 112, 34, 51, 51, 51, 51, 61, 61, 61, 61, 61, 61, 61, 61, 115, 55, 55, 55, 55, 55, 55, 55, 55, 34, 51, 51, 51, 51, 51, 51, 112, 112, 51, 51, 51, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 112, 51, 115, 61, 61, 61, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 51, 51, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 112, 208, 34, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 112, 51, 51, 51, 51, 51, 51, 51, 112, 51, 51, 112, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 51, 51, 51, 51, 55, 55, 55, 51, 55, 51, 51, 55, 51, 51, 51, 118, 51, 115, 115, 34, 51, 55, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 112, 112, 112, 112, 112, 55, 51, 51, 55, 112, 112, 51, 112, 115, 34, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 51, 51, 112, 112, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 20, 20, 20, 20, 20, 20, 20, 20, 7, 7, 7, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 55, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 152, 152, 152, 152, 152, 152, 152, 152, 152, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 61, 61, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 47, 47, 47, 47, 47, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 40, 40, 40, 61, 61, 61, 61, 61, 59, 59, 59, 59, 38, 38, 38, 38, 61, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 121, 121, 121, 121, 121, 121, 121, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 51, 34, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 38, 38, 5, 38, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 209, 209, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 38, 38, 38, 38, 55, 38, 38, 38, 38, 38, 38, 38, 55, 38, 38, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 59, 51, 47, 61, 24, 24, 24, 24, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 210, 210, 210, 210, 210, 210, 210, 211, 211, 47, 47, 47, 59, 59, 59, 212, 211, 211, 211, 211, 211, 24, 24, 24, 24, 24, 24, 24, 24, 42, 42, 42, 42, 42, 42, 42, 42, 59, 59, 40, 40, 40, 40, 40, 42, 42, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 40, 40, 40, 40, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 210, 210, 210, 210, 210, 210, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 40, 40, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 55, 55, 55, 55, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 55, 33, 33, 55, 55, 33, 55, 55, 33, 33, 55, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 55, 28, 55, 28, 28, 28, 28, 28, 28, 28, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 55, 33, 33, 33, 33, 55, 33, 33, 33, 33, 33, 55, 33, 55, 55, 55, 33, 33, 33, 33, 33, 33, 33, 55, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 55, 55, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 171, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 171, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 171, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 171, 28, 28, 28, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 213, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 171, 28, 28, 28, 28, 28, 28, 33, 28, 55, 55, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 51, 59, 59, 61, 61, 61, 61, 61, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 51, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 55, 55, 40, 40, 40, 40, 40, 40, 40, 55, 40, 40, 55, 40, 40, 40, 40, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 40, 40, 40, 40, 40, 40, 40, 38, 38, 38, 38, 38, 38, 38, 55, 55, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 34, 59, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 55, 55, 55, 55, 55, 7, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 55, 34, 34, 34, 34, 55, 34, 34, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 63, 63, 202, 202, 202, 202, 202, 202, 202, 202, 202, 42, 42, 42, 42, 42, 42, 42, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 40, 40, 40, 40, 40, 40, 118, 109, 63, 63, 63, 63, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 63, 63, 63, 63, 81, 81, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 106, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 105, 207, 207, 207, 87, 207, 207, 207, 207, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 106, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 105, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 104, 104, 104, 104, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 104, 104, 106, 104, 106, 106, 104, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 104, 104, 104, 104, 106, 104, 106, 104, 106, 106, 106, 106, 106, 106, 104, 106, 106, 106, 106, 104, 106, 104, 106, 104, 106, 104, 104, 104, 106, 104, 104, 106, 104, 106, 106, 104, 106, 104, 106, 104, 106, 104, 106, 104, 106, 104, 104, 106, 104, 106, 106, 104, 104, 104, 104, 106, 104, 104, 104, 104, 104, 104, 104, 106, 104, 104, 104, 104, 106, 104, 104, 104, 104, 106, 104, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 106, 106, 106, 106, 104, 104, 104, 106, 104, 104, 104, 104, 104, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 14, 14, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 126, 126, 20, 20, 20, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 20, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 176, 176, 176, 20, 20, 20, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 182, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 182, 182, 182, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 55, 55, 55, 55, 182, 182, 182, 182, 182, 182, 182, 182, 182, 55, 55, 55, 55, 55, 55, 55, 182, 182, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 165, 165, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 165, 24, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 165, 165]);
    var propsData_1124073517 = [new Int32Array([16384, 0, 14, 0]), new Int32Array([16384, 0, 16, 0]), new Int32Array([16384, 0, 15, 0]), new Int32Array([16384, 0, 17, 0]), new Int32Array([2048, 0, 17, 0]), new Int32Array([33554432, 0, 18, 0]), new Int32Array([33554432, 0, 10, 0]), new Int32Array([134217728, 0, 10, 0]), new Int32Array([2097152, 0, 18, 0]), new Int32Array([4194304, 0, 18, 0]), new Int32Array([67108864, 0, 9, 0]), new Int32Array([33554432, 0, 12, 0]), new Int32Array([1048576, 0, 9, 0]), new Int32Array([256, 0, 8, 0]), new Int32Array([67108864, 0, 18, 0]), new Int32Array([4, 0, 0, 0]), new Int32Array([268435456, 0, 18, 0]), new Int32Array([524288, 0, 18, 0]), new Int32Array([8, 0, 0, 0]), new Int32Array([2048, 0, 12, 36]), new Int32Array([536870912, 0, 18, 0]), new Int32Array([268435456, 0, 18, 36]), new Int32Array([2, 0, 0, 36]), new Int32Array([8388608, 0, 18, 0]), new Int32Array([32768, 0, 14, 0]), new Int32Array([536870912, 0, 10, 0]), new Int32Array([67108864, 0, 10, 0]), new Int32Array([1024, 0, 8, 36]), new Int32Array([8, 0, 0, 36]), new Int32Array([16777216, 0, 18, 0]), new Int32Array([1024, 0, 18, 36]), new Int32Array([4, 0, 0, 48]), new Int32Array([8, 0, 0, 48]), new Int32Array([4, 0, 0, 36]), new Int32Array([2, 0, 0, 0]), new Int32Array([16, 0, 0, 36]), new Int32Array([1, 0, 0, 36]), new Int32Array([1, 0, 18, 0]), new Int32Array([1, 0, 0, 0]), new Int32Array([32, 230, 13, 10]), new Int32Array([32, 230, 13, 0]), new Int32Array([32, 232, 13, 0]), new Int32Array([32, 220, 13, 0]), new Int32Array([32, 216, 13, 10]), new Int32Array([32, 202, 13, 0]), new Int32Array([32, 220, 13, 10]), new Int32Array([32, 202, 13, 10]), new Int32Array([32, 1, 13, 0]), new Int32Array([32, 1, 13, 10]), new Int32Array([32, 230, 13, 53]), new Int32Array([32, 240, 13, 10]), new Int32Array([32, 0, 13, 0]), new Int32Array([32, 233, 13, 0]), new Int32Array([32, 234, 13, 0]), new Int32Array([1, 0, 18, 53]), new Int32Array([262144, 0, 0, 0]), new Int32Array([33554432, 0, 18, 53]), new Int32Array([268435456, 0, 18, 52]), new Int32Array([4, 0, 0, 52]), new Int32Array([536870912, 0, 0, 0]), new Int32Array([128, 0, 13, 0]), new Int32Array([33554432, 0, 0, 0]), new Int32Array([1048576, 0, 18, 0]), new Int32Array([262144, 0, 3, 0]), new Int32Array([32, 222, 13, 0]), new Int32Array([32, 228, 13, 0]), new Int32Array([32, 10, 13, 0]), new Int32Array([32, 11, 13, 0]), new Int32Array([32, 12, 13, 0]), new Int32Array([32, 13, 13, 0]), new Int32Array([32, 14, 13, 0]), new Int32Array([32, 15, 13, 0]), new Int32Array([32, 16, 13, 0]), new Int32Array([32, 17, 13, 0]), new Int32Array([32, 18, 13, 0]), new Int32Array([32, 19, 13, 0]), new Int32Array([32, 20, 13, 0]), new Int32Array([32, 21, 13, 0]), new Int32Array([32, 22, 13, 0]), new Int32Array([1048576, 0, 3, 0]), new Int32Array([32, 23, 13, 0]), new Int32Array([33554432, 0, 3, 0]), new Int32Array([32, 24, 13, 0]), new Int32Array([32, 25, 13, 0]), new Int32Array([2, 0, 3, 0]), new Int32Array([32768, 0, 11, 0]), new Int32Array([67108864, 0, 4, 0]), new Int32Array([134217728, 0, 4, 0]), new Int32Array([33554432, 0, 4, 0]), new Int32Array([32, 30, 13, 0]), new Int32Array([32, 31, 13, 0]), new Int32Array([32, 32, 13, 0]), new Int32Array([32768, 0, 4, 0]), new Int32Array([2, 0, 4, 0]), new Int32Array([2, 0, 4, 48]), new Int32Array([1, 0, 4, 0]), new Int32Array([32, 27, 13, 0]), new Int32Array([32, 28, 13, 0]), new Int32Array([32, 29, 13, 0]), new Int32Array([32, 33, 13, 0]), new Int32Array([32, 34, 13, 0]), new Int32Array([256, 0, 11, 0]), new Int32Array([33554432, 0, 11, 0]), new Int32Array([32, 35, 13, 0]), new Int32Array([2, 0, 4, 36]), new Int32Array([536870912, 0, 4, 0]), new Int32Array([262144, 0, 4, 0]), new Int32Array([32, 36, 13, 0]), new Int32Array([256, 0, 3, 0]), new Int32Array([1, 0, 3, 0]), new Int32Array([134217728, 0, 3, 0]), new Int32Array([268435456, 0, 4, 0]), new Int32Array([64, 0, 0, 0]), new Int32Array([2, 0, 0, 48]), new Int32Array([32, 7, 13, 10]), new Int32Array([32, 9, 13, 0]), new Int32Array([2, 0, 0, 53]), new Int32Array([256, 0, 0, 0]), new Int32Array([32, 7, 13, 0]), new Int32Array([64, 0, 0, 10]), new Int32Array([64, 0, 0, 48]), new Int32Array([1024, 0, 0, 0]), new Int32Array([32, 0, 13, 10]), new Int32Array([32, 0, 13, 48]), new Int32Array([32, 84, 13, 0]), new Int32Array([32, 91, 13, 10]), new Int32Array([1024, 0, 18, 0]), new Int32Array([32, 0, 0, 0]), new Int32Array([32, 9, 13, 10]), new Int32Array([32, 103, 13, 0]), new Int32Array([32, 107, 13, 0]), new Int32Array([32, 118, 13, 0]), new Int32Array([32, 122, 13, 0]), new Int32Array([33554432, 0, 0, 36]), new Int32Array([32, 216, 13, 0]), new Int32Array([32, 129, 13, 0]), new Int32Array([32, 130, 13, 0]), new Int32Array([32, 0, 13, 53]), new Int32Array([32, 132, 13, 0]), new Int32Array([32, 0, 13, 36]), new Int32Array([2, 0, 0, 10]), new Int32Array([512, 0, 0, 0]), new Int32Array([64, 9, 0, 0]), new Int32Array([32, 214, 13, 0]), new Int32Array([32, 218, 13, 0]), new Int32Array([8, 0, 0, 52]), new Int32Array([8, 0, 0, 53]), new Int32Array([16, 0, 0, 48]), new Int32Array([4, 0, 0, 53]), new Int32Array([268435456, 0, 18, 53]), new Int32Array([2048, 0, 17, 53]), new Int32Array([2048, 0, 17, 36]), new Int32Array([32768, 0, 0, 0]), new Int32Array([32768, 0, 3, 0]), new Int32Array([1048576, 0, 18, 36]), new Int32Array([33554432, 0, 18, 36]), new Int32Array([4096, 0, 17, 0]), new Int32Array([8192, 0, 15, 0]), new Int32Array([32768, 0, 1, 0]), new Int32Array([32768, 0, 5, 0]), new Int32Array([32768, 0, 7, 0]), new Int32Array([32768, 0, 2, 0]), new Int32Array([32768, 0, 6, 0]), new Int32Array([33554432, 0, 10, 36]), new Int32Array([67108864, 0, 12, 0]), new Int32Array([262144, 0, 14, 0]), new Int32Array([32768, 0, 19, 0]), new Int32Array([32768, 0, 20, 0]), new Int32Array([32768, 0, 21, 0]), new Int32Array([32768, 0, 22, 0]), new Int32Array([67108864, 0, 9, 36]), new Int32Array([67108864, 0, 18, 36]), new Int32Array([2097152, 0, 18, 36]), new Int32Array([4194304, 0, 18, 36]), new Int32Array([134217728, 0, 10, 36]), new Int32Array([262144, 0, 10, 0]), new Int32Array([536870912, 0, 18, 36]), new Int32Array([512, 0, 0, 36]), new Int32Array([67108864, 0, 18, 48]), new Int32Array([536870912, 0, 18, 48]), new Int32Array([2097152, 0, 18, 53]), new Int32Array([4194304, 0, 18, 53]), new Int32Array([536870912, 0, 0, 36]), new Int32Array([67108864, 0, 18, 53]), new Int32Array([64, 224, 0, 0]), new Int32Array([32, 8, 13, 10]), new Int32Array([1, 0, 0, 48]), new Int32Array([1024, 0, 0, 36]), new Int32Array([268435456, 0, 0, 0]), new Int32Array([65536, 0, 0, 0]), new Int32Array([131072, 0, 0, 0]), new Int32Array([2, 0, 3, 53]), new Int32Array([32, 26, 13, 0]), new Int32Array([2, 0, 3, 36]), new Int32Array([134217728, 0, 4, 36]), new Int32Array([524288, 0, 18, 36]), new Int32Array([33554432, 0, 12, 36]), new Int32Array([1048576, 0, 9, 36]), new Int32Array([256, 0, 8, 36]), new Int32Array([32768, 0, 18, 0]), new Int32Array([512, 0, 18, 0]), new Int32Array([1024, 0, 8, 0]), new Int32Array([1024, 0, 3, 0]), new Int32Array([536870912, 0, 3, 0]), new Int32Array([4, 0, 3, 0]), new Int32Array([8, 0, 3, 0]), new Int32Array([1024, 0, 11, 0]), new Int32Array([1024, 0, 4, 0]), new Int32Array([32, 9, 0, 0]), new Int32Array([64, 6, 0, 0]), new Int32Array([536870912, 0, 0, 53]), new Int32Array([64, 216, 0, 0]), new Int32Array([64, 226, 0, 0]), new Int32Array([67108864, 0, 0, 36])];
      var nfMasks_1426063588 = [[{Field0: 1, Field1: 1}, {Field0: 2, Field1: 2}], [{Field0: 4, Field1: 1}, {Field0: 8, Field1: 2}], [{Field0: 16, Field1: 1}, {Field0: 16, Field1: 1}], [{Field0: 32, Field1: 1}, {Field0: 32, Field1: 1}]];
    var determiners_1509950003 = {data: [{Field0: -1948738240, Field1: makeNimstrLit("j\xC3\xA1")}, {Field0: 0, Field1: []}, {Field0: 719168834, Field1: makeNimstrLit("k\xC3\xA9")}, {Field0: -1097896670, Field1: makeNimstrLit("s\xC3\xADa")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 136898862, Field1: makeNimstrLit("n\xC3\xAD")}, {Field0: 1331931695, Field1: makeNimstrLit("t\xC3\xBAq")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -279379917, Field1: makeNimstrLit("b\xC3\xA1q")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1081437783, Field1: makeNimstrLit("h\xC3\xAD")}, {Field0: 694876632, Field1: makeNimstrLit("t\xC3\xBA")}, {Field0: -1189219911, Field1: makeNimstrLit("l\xC3\xB3")}, {Field0: -102733158, Field1: makeNimstrLit("s\xC3\xA1")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -1767666530, Field1: makeNimstrLit("h\xC3\xBA")}, {Field0: 0, Field1: []}], counter: 11};
    var toneless_particles_1509950360 = {data: [{Field0: -974741376, Field1: makeNimstrLit("doa")}, {Field0: 0, Field1: []}, {Field0: 766375490, Field1: makeNimstrLit("\xEA\x9D\xA1o")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -1597029227, Field1: makeNimstrLit("ka")}, {Field0: -1884596906, Field1: makeNimstrLit("ma")}, {Field0: -441432330, Field1: makeNimstrLit("ba")}, {Field0: 664724503, Field1: makeNimstrLit("k\xC4\xB1")}, {Field0: 643385961, Field1: makeNimstrLit("\xEA\x9D\xA1a")}, {Field0: -593807351, Field1: makeNimstrLit("da")}, {Field0: -1017003639, Field1: makeNimstrLit("teo")}, {Field0: -1976714468, Field1: makeNimstrLit("t\xC4\xB1o")}, {Field0: 384600380, Field1: makeNimstrLit("nha")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}], counter: 11};
    var matrix_subordinators_1509949987 = {data: [{Field0: 0, Field1: []}, {Field0: 643385961, Field1: makeNimstrLit("\xEA\x9D\xA1a")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -1976714468, Field1: makeNimstrLit("t\xC4\xB1o")}, {Field0: 0, Field1: []}, {Field0: -1884596906, Field1: makeNimstrLit("ma")}, {Field0: 0, Field1: []}], counter: 3};
    var conjunctions_1509950176 = {data: [{Field0: 0, Field1: []}, {Field0: 2052058977, Field1: makeNimstrLit("k\xC3\xAAo")}, {Field0: 0, Field1: []}, {Field0: -1778707933, Field1: makeNimstrLit("ro\xC4\xB1")}, {Field0: -1153225213, Field1: makeNimstrLit("r\xC3\xB4\xC4\xB1")}, {Field0: -302710747, Field1: makeNimstrLit("keo")}, {Field0: 587500454, Field1: makeNimstrLit("r\xC4\xB1")}, {Field0: -1818933913, Field1: makeNimstrLit("r\xC3\xAE")}, {Field0: 665958440, Field1: makeNimstrLit("k\xC3\xA9o")}, {Field0: 1786250089, Field1: makeNimstrLit("r\xC3\xA2")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1836759504, Field1: makeNimstrLit("r\xC3\xBA")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1116016756, Field1: makeNimstrLit("r\xC3\xB3\xC4\xB1")}, {Field0: -313198603, Field1: makeNimstrLit("ro")}, {Field0: 1069069268, Field1: makeNimstrLit("r\xC3\xBB")}, {Field0: -722437001, Field1: makeNimstrLit("r\xC3\xAD")}, {Field0: 1508421016, Field1: makeNimstrLit("ru")}, {Field0: 0, Field1: []}, {Field0: 1587632442, Field1: makeNimstrLit("r\xC3\xB3")}, {Field0: -1550544134, Field1: makeNimstrLit("r\xC3\xB4")}, {Field0: 499418108, Field1: makeNimstrLit("r\xC3\xA1")}, {Field0: -104613667, Field1: makeNimstrLit("ra")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}], counter: 18};
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);
    var typesOffsets_1308622858 = new Int16Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 12, 26, 27, 28, 29, 30, 31, 32, 33, 34, 12, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 12, 62, 63, 64, 12, 12, 12, 12, 12, 65, 66, 67, 68, 69, 70, 71, 72, 12, 12, 12, 12, 12, 12, 12, 12, 73, 74, 75, 76, 77, 12, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 12, 91, 92, 93, 94, 95, 96, 97, 98, 98, 98, 12, 99, 99, 100, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 114, 115, 112, 112, 112, 112, 112, 112, 112, 112, 112, 116, 117, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 16, 118, 99, 119, 120, 121, 122, 123, 124, 112, 112, 112, 112, 112, 112, 112, 125, 72, 126, 127, 128, 12, 129, 130, 131, 132, 133, 112, 112, 112, 112, 112, 134, 12, 135, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 136, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 137, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 112, 138, 139, 140, 141, 137, 142, 12, 12, 12, 12, 12, 12, 143, 144, 12, 12, 12, 12, 12, 12, 12, 145, 12, 146, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 147, 12, 12, 12, 12, 12, 12, 12, 148, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 149, 12, 150, 151, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 152, 12, 153, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 154, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 155, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 156, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 152, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 155, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 157, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 158, 12, 142, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 159, 160, 12, 161, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 162, 163, 12, 12, 12, 12, 164, 165, 166, 167, 168, 169, 170, 171, 172, 93, 12, 173, 174, 175, 12, 176, 177, 178, 12, 179, 180, 181, 98, 182, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 183, 184, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12, 185, 186, 187, 12, 188, 12, 189, 190, 191, 29, 192, 12, 12, 12, 12, 193, 27, 194, 195, 196, 197, 12, 198, 199, 200, 201, 202, 203, 204, 12, 205, 206, 207, 208, 209, 112, 112, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 112, 12, 12, 12, 12, 177, 223, 224, 112, 225, 226, 227, 228, 229, 112, 230, 231, 232, 233, 234, 235, 82, 236, 237, 112, 12, 238, 239, 240, 241, 112, 112, 112, 112, 242, 243, 112, 244, 245, 246, 247, 12, 248, 205, 249, 250, 251, 12, 252, 253, 112, 254, 255, 256, 257, 112, 112, 12, 258, 12, 259, 112, 112, 260, 261, 12, 262, 80, 263, 264, 265, 112, 112, 205, 112, 266, 267, 268, 269, 270, 271, 201, 272, 273, 80, 112, 112, 112, 112, 274, 275, 276, 112, 277, 278, 279, 112, 112, 112, 112, 280, 112, 112, 281, 282, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 189, 112, 283, 284, 12, 12, 12, 285, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 27, 286, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 287, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12, 12, 12, 12, 12, 12, 12, 12, 12, 265, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12, 12, 12, 12, 12, 12, 12, 12, 80, 288, 201, 289, 177, 290, 291, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 292, 293, 112, 12, 294, 295, 296, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 94, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 297, 238, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 298, 12, 12, 12, 12, 299, 300, 12, 12, 12, 12, 12, 301, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12, 302, 303, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 188, 265, 112, 112, 112, 112, 112, 112, 112, 304, 305, 112, 112, 306, 112, 307, 112, 308, 112, 112, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 112, 112, 112, 112, 112, 112, 112, 112, 325, 326, 327, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 328, 112, 112, 112, 329, 112, 112, 112, 330, 331, 112, 112, 112, 112, 332, 333, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 334, 12, 12, 12, 335, 336, 337, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 338, 339, 112, 340, 112, 112, 112, 341, 342, 343, 112, 112, 112, 112, 112, 112, 112, 112, 112, 344, 345, 346, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 347, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 348, 349, 12, 350, 159, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 136, 12, 351, 12, 12, 12, 12, 352, 353, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 354, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 355, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 147, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 356, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 357, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 80, 12, 12, 12, 214, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 358, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 359, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12, 12, 354, 12, 12, 12, 12, 12, 360, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 361, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12, 12, 12, 362, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112]);
    var typesIndices_1308622859 = new Int8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 5, 0, 0, 0, 6, 5, 0, 7, 7, 7, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 5, 5, 3, 3, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 3, 3, 3, 3, 5, 3, 3, 5, 3, 3, 3, 5, 5, 5, 3, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 5, 3, 5, 3, 3, 5, 3, 3, 3, 5, 3, 5, 3, 3, 5, 5, 4, 3, 5, 5, 5, 4, 4, 4, 4, 3, 8, 5, 3, 8, 5, 3, 8, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 8, 5, 3, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 3, 3, 5, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 4, 0, 3, 5, 0, 0, 5, 5, 5, 5, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 0, 3, 0, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 3, 3, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 3, 5, 0, 3, 5, 3, 3, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 4, 4, 4, 4, 4, 4, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 4, 0, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 3, 0, 3, 0, 3, 0, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 5, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 3, 3, 3, 3, 8, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 5, 3, 3, 3, 5, 5, 3, 3, 3, 5, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 0, 5, 3, 3, 3, 3, 5, 4, 4, 4, 4, 5, 0, 0, 5, 5, 3, 3, 0, 0, 0, 0, 0, 3, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 3, 5, 9, 9, 9, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 3, 3, 5, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 4, 4, 4, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 9, 9, 9, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 9, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 9, 9, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 0, 0, 3, 5, 3, 5, 4, 3, 5, 3, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 3, 5, 3, 5, 0, 0, 0, 0, 0, 3, 5, 0, 5, 0, 5, 3, 5, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 3, 5, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 4, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0, 3, 3, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 3, 5, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    var typesData_1308622860 = new Int16Array([0, 64, 129, 176, 128, 168, 2, 4, 160, 132, 180, 172]);
    var toLowerRanges_838861723 = new Int32Array([65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534]);
    var toLowerSinglets_838861724 = new Int32Array([256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884]);
    var toUpperRanges_838861725 = new Int32Array([97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466]);
    var toUpperSinglets_838861726 = new Int32Array([181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428]);
var ConstSet9 = setConstr(4, 6);
var ConstSet10 = setConstr(4);
var ConstSet11 = setConstr(4, 6);
var ConstSet12 = setConstr(4);
var ConstSet13 = setConstr(4, 6);
var ConstSet14 = setConstr(4);
var ConstSet15 = setConstr(4, 6);
var ConstSet16 = setConstr(4);
var ConstSet17 = setConstr();
var ConstSet18 = setConstr(4, 6);
var ConstSet19 = setConstr(4);
var ConstSet20 = setConstr(3);
var ConstSet21 = setConstr();

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
var ConstSet22 = setConstr([48, 57]);
var ConstSet23 = setConstr(0, 125);
var ConstSet24 = setConstr([48, 57]);
var ConstSet25 = setConstr([65, 90]);
var ConstSet26 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var ConstSet27 = setConstr(2, 6, 7, 8, 9, 10);
var ConstSet28 = setConstr(2, 6, 7, 8, 9, 10);
var ConstSet29 = setConstr(2, 6, 7, 8, 9, 10);
var ConstSet30 = setConstr(41, 42, 43, 44);
var ConstSet31 = setConstr(41, 43);
var ConstSet32 = setConstr(42, 44);
var ConstSet33 = setConstr(42, 44);
var ConstSet34 = setConstr(41, 43);

function isObj(obj_33557238, subclass_33557239) {
  var result_33557240 = false;

  BeforeRet: do {
    var x_33557241 = obj_33557238;
    if ((x_33557241 == subclass_33557239)) {
    result_33557240 = true;
    break BeforeRet;
    }
    
    Label1: do {
        Label2: while (true) {
        if (!!((x_33557241 == subclass_33557239))) break Label2;
          if ((x_33557241 == null)) {
          result_33557240 = false;
          break BeforeRet;
          }
          
          x_33557241 = x_33557241.base;
        }
    } while (false);
    result_33557240 = true;
    break BeforeRet;
  } while (false);

  return result_33557240;

}

function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: makeNimstrLit("no exception to reraise"), parent: null, m_type: NTI33555132, name: null, trace: [], up: null}, "ReraiseDefect");
    }
    else {
      if ((excHandler == 0)) {
      if (isNimException_33556519()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}
var ConstSet35 = setConstr(39, 40);
var ConstSet36 = setConstr(2, 6, 7, 8, 9, 10);
var ConstSet37 = setConstr(39, 40);
var ConstSet38 = setConstr(5, 3, 1, 7, 8, 10, 11);
var ConstSet39 = setConstr(7, 8, 10);

function genericReset(x_33557171, ti_33557172) {
  var result_33557173 = null;

    result_33557173 = null;
    switch (ti_33557172.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (isFatPointer_33557131(ti_33557172)) {
              result_33557173 = [null, 0];
      
      }
      
      break;
    case 19:
            result_33557173 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_33557172.kind == 17)) {
      result_33557173 = {m_type: ti_33557172};
      }
      else {
        result_33557173 = {};
      }
      
      break;
    case 24:
    case 27:
    case 28:
            result_33557173 = [];
    
      break;
    case 4:
    case 16:
            result_33557173 = new Array(x_33557171.length);
      for (var i = 0; i < x_33557171.length; ++i) {
        result_33557173[i] = genericReset(x_33557171[i], ti_33557172.base);
      }
    
      break;
    default: 
      break;
    }

  return result_33557173;

}
var ConstSet40 = setConstr(4, 6);

function negInt(a_33556982) {
  var result_33556983 = 0;

    result_33556983 = (a_33556982 * -1);

  return result_33556983;

}
var ConstSet41 = setConstr(120, 88);
var ConstSet42 = setConstr([48, 55]);
var ConstSet43 = setConstr(111, 79);
var ConstSet44 = setConstr([97, 122], [65, 90]);
var ConstSet45 = setConstr(39, 40);
var ConstSet46 = setConstr(11, 12, 13, 14, 15, 16, 17, 18, 29, 30, 41, 42, 43, 44);
var ConstSet47 = setConstr(19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36);
var ConstSet48 = setConstr([48, 57]);
var ConstSet49 = setConstr([48, 57]);
var ConstSet50 = setConstr([97, 122], [65, 90], [48, 57], 45, 95);
var ConstSet51 = setConstr([0, 1], [19, 28], [31, 40], 46);
var ConstSet52 = setConstr(7, 8, 10);

function reprEnum(e_33557385, typ_33557386) {
  var result_33557387 = [];

  var F = {procname: "system.reprEnum", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 25;
    var tmp_33557388 = false;
    F.line = 26;
    var item_33557389 = typ_33557386.node.sons[e_33557385];
    F.line = 27;
    tmp_33557388 = item_33557389 !== undefined
    if (tmp_33557388) {
    F.line = 29;
    result_33557387 = nimCopy(null, makeNimstrLit(item_33557389.name), NTI33554439);
    }
    else {
      F.line = 31;
      result_33557387 = nimCopy(null, (HEX24_318767107(e_33557385) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    
  framePtr = F.prev;

  return result_33557387;

}
var ConstSet53 = setConstr(0, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 39, 40, 31, 32, 33, 34, 35, 36, 37, 38);
      var pronouns_1509950238 = {data: [{Field0: -183525312, Field1: makeNimstrLit("s\xC3\xBAna")}, {Field0: -1846822847, Field1: makeNimstrLit("\xC3\xBAmo")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -77712700, Field1: makeNimstrLit("t\xC3\xA1")}, {Field0: 1952594565, Field1: makeNimstrLit("s\xC3\xBAq")}, {Field0: -1489392858, Field1: makeNimstrLit("s\xC3\xBAho")}, {Field0: 835521607, Field1: makeNimstrLit("h\xC3\xB3q")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -2066620694, Field1: makeNimstrLit("nh\xC3\xA1na")}, {Field0: 0, Field1: []}, {Field0: 1429245996, Field1: makeNimstrLit("j\xC3\xAD")}, {Field0: -910050835, Field1: makeNimstrLit("\xC3\xA1q")}, {Field0: 1678585550, Field1: makeNimstrLit("\xC3\xA1ma")}, {Field0: -863080113, Field1: makeNimstrLit("h\xC3\xB3a")}, {Field0: -845888144, Field1: makeNimstrLit("z\xC3\xA9")}, {Field0: 453241233, Field1: makeNimstrLit("\xC3\xADme")}, {Field0: 2131582639, Field1: makeNimstrLit("b\xC3\xB3u")}, {Field0: -265541326, Field1: makeNimstrLit("h\xC3\xB3")}, {Field0: 1900512212, Field1: makeNimstrLit("h\xC3\xA1")}, {Field0: 1978212661, Field1: makeNimstrLit("ch\xC3\xA9q")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1739257020, Field1: makeNimstrLit("m\xC3\xA1q")}, {Field0: -1227892131, Field1: makeNimstrLit("r\xC3\xB3u")}, {Field0: 0, Field1: []}, {Field0: 2069831935, Field1: makeNimstrLit("nh\xC3\xA1o")}], counter: 20};
      var functors_with_lexical_tone_1509950334 = {data: [{Field0: -974741376, Field1: makeNimstrLit("doa")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -1153225213, Field1: makeNimstrLit("r\xC3\xB4\xC4\xB1")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1898973190, Field1: makeNimstrLit("b\xC3\xA9\xC4\xB1")}, {Field0: 269551495, Field1: makeNimstrLit("\xC3\xA9")}, {Field0: 0, Field1: []}, {Field0: -593807351, Field1: makeNimstrLit("da")}, {Field0: -1017003639, Field1: makeNimstrLit("teo")}, {Field0: 0, Field1: []}, {Field0: 1787312396, Field1: makeNimstrLit("m\xC3\xA4")}, {Field0: 1259989645, Field1: makeNimstrLit("h\xC3\xB3\xC4\xB1")}, {Field0: 118892302, Field1: makeNimstrLit("t\xC3\xB3u")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 694940435, Field1: makeNimstrLit("g\xC3\xB6")}, {Field0: 0, Field1: []}, {Field0: -1597029227, Field1: makeNimstrLit("ka")}, {Field0: 0, Field1: []}, {Field0: 664724503, Field1: makeNimstrLit("k\xC4\xB1")}, {Field0: 1508421016, Field1: makeNimstrLit("ru")}, {Field0: 0, Field1: []}, {Field0: -102733158, Field1: makeNimstrLit("s\xC3\xA1")}, {Field0: 0, Field1: []}, {Field0: -1976714468, Field1: makeNimstrLit("t\xC4\xB1o")}, {Field0: -1117964388, Field1: makeNimstrLit("l\xC3\xA4")}, {Field0: -1767666530, Field1: makeNimstrLit("h\xC3\xBA")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -1097896670, Field1: makeNimstrLit("s\xC3\xADa")}, {Field0: -1778707933, Field1: makeNimstrLit("ro\xC4\xB1")}, {Field0: 0, Field1: []}, {Field0: -302710747, Field1: makeNimstrLit("keo")}, {Field0: 587500454, Field1: makeNimstrLit("r\xC4\xB1")}, {Field0: 1482978599, Field1: makeNimstrLit("m\xC3\xB3q")}, {Field0: 665958440, Field1: makeNimstrLit("k\xC3\xA9o")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 136898862, Field1: makeNimstrLit("n\xC3\xAD")}, {Field0: 1331931695, Field1: makeNimstrLit("t\xC3\xBAq")}, {Field0: -267552336, Field1: makeNimstrLit("\xEA\x9D\xA1\xC3\xA4")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -279379917, Field1: makeNimstrLit("b\xC3\xA1q")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -646244423, Field1: makeNimstrLit("\xEA\x9D\xA1\xC3\xA9")}, {Field0: -1189219911, Field1: makeNimstrLit("l\xC3\xB3")}, {Field0: 1587632442, Field1: makeNimstrLit("r\xC3\xB3")}, {Field0: 384600380, Field1: makeNimstrLit("nha")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -1948738240, Field1: makeNimstrLit("j\xC3\xA1")}, {Field0: 0, Field1: []}, {Field0: -79326910, Field1: makeNimstrLit("j\xC3\xBC")}, {Field0: 719168834, Field1: makeNimstrLit("k\xC3\xA9")}, {Field0: 766375490, Field1: makeNimstrLit("\xEA\x9D\xA1o")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -114061748, Field1: makeNimstrLit("n\xC3\xA1")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1836759504, Field1: makeNimstrLit("r\xC3\xBA")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1199686868, Field1: makeNimstrLit("\xEA\x9D\xA1\xC3\xAB")}, {Field0: 1069069268, Field1: makeNimstrLit("r\xC3\xBB")}, {Field0: -1884596906, Field1: makeNimstrLit("ma")}, {Field0: 1081437783, Field1: makeNimstrLit("h\xC3\xAD")}, {Field0: 694876632, Field1: makeNimstrLit("t\xC3\xBA")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -104613667, Field1: makeNimstrLit("ra")}, {Field0: 1037447773, Field1: makeNimstrLit("k\xC3\xAFo")}, {Field0: 0, Field1: []}, {Field0: 1670691296, Field1: makeNimstrLit("\xC3\xAB")}, {Field0: 2052058977, Field1: makeNimstrLit("k\xC3\xAAo")}, {Field0: 1802745570, Field1: makeNimstrLit("n\xC3\xA4")}, {Field0: 470076387, Field1: makeNimstrLit("m\xC3\xB4q")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -1818933913, Field1: makeNimstrLit("r\xC3\xAE")}, {Field0: 0, Field1: []}, {Field0: 643385961, Field1: makeNimstrLit("\xEA\x9D\xA1a")}, {Field0: 1786250089, Field1: makeNimstrLit("r\xC3\xA2")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 1116016756, Field1: makeNimstrLit("r\xC3\xB3\xC4\xB1")}, {Field0: -313198603, Field1: makeNimstrLit("ro")}, {Field0: -441432330, Field1: makeNimstrLit("ba")}, {Field0: -722437001, Field1: makeNimstrLit("r\xC3\xAD")}, {Field0: 0, Field1: []}, {Field0: -1056500231, Field1: makeNimstrLit("d\xC3\xA2")}, {Field0: -1550544134, Field1: makeNimstrLit("r\xC3\xB4")}, {Field0: -486820230, Field1: makeNimstrLit("b\xC3\xAF")}, {Field0: 499418108, Field1: makeNimstrLit("r\xC3\xA1")}, {Field0: 0, Field1: []}, {Field0: -2042536450, Field1: makeNimstrLit("t\xC3\xAFo")}, {Field0: -1993832065, Field1: makeNimstrLit("k\xC3\xBA")}], counter: 61};
        var functors_with_grammatical_tone_1509950250 = {data: [{Field0: -924776928, Field1: makeNimstrLit("mea")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -247797594, Field1: makeNimstrLit("po")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -731243207, Field1: makeNimstrLit("mo")}, {Field0: -677729238, Field1: makeNimstrLit("shu")}, {Field0: -1057721285, Field1: makeNimstrLit("je\xC4\xB1")}, {Field0: 0, Field1: []}, {Field0: 132196573, Field1: makeNimstrLit("m\xC4\xB1")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}], counter: 6};
        var predicatizers_1509949999 = {data: [{Field0: -924776928, Field1: makeNimstrLit("mea")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -1057721285, Field1: makeNimstrLit("je\xC4\xB1")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -247797594, Field1: makeNimstrLit("po")}, {Field0: 0, Field1: []}], counter: 3};
var ConstSet54 = setConstr();
    var interjections_1509950364 = {data: [{Field0: 527376672, Field1: makeNimstrLit("m\xCC\x82")}, {Field0: -1377409968, Field1: makeNimstrLit("m\xCC\x83")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}, {Field0: -61252008, Field1: makeNimstrLit("m\xCC\x88")}, {Field0: 2117216505, Field1: makeNimstrLit("m\xCC\x80")}, {Field0: -2004418278, Field1: makeNimstrLit("m\xCC\x89")}, {Field0: 0, Field1: []}, {Field0: -2066012100, Field1: makeNimstrLit("m\xCC\x84")}, {Field0: 1104604349, Field1: makeNimstrLit("\xE1\xB8\xBF")}, {Field0: 0, Field1: []}, {Field0: 0, Field1: []}], counter: 7};
        var vowels_1509950853 = [97, 101, 305, 111, 117];
var ConstSet55 = setConstr();
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osseps", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/includes/osseps.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osseps", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/includes/osseps.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osseps", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/includes/osseps.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
F.line = 214;
var objectID_973078690 = [0];
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sets", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module common", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module scanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parser", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module exptransformation", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module types", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nodematch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deques", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module litopt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfatype", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compiler", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfafindall", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module nfamacro", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamacro.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module regex", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strformat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/compositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions_data", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions_data.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module decompositions", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module normalize", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_318767107(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_318767107(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_318767107(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 43;
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    F.line = 44;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      F.line = 46;
      var iHEX60gensym4_251658435 = 0;
      F.line = 119;
      var i_436207730 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436207730 < n_251658420)) break Label3;
            F.line = 49;
            iHEX60gensym4_251658435 = i_436207730;
            F.line = 49;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            F.line = 122;
            i_436207730 = addInt(i_436207730, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 55;
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));
  framePtr = F.prev;

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 113;
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));
  framePtr = F.prev;

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 117;
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);
  framePtr = F.prev;

  
}

function HEX24_318767107(x_318767108) {
  var result_318767109 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 12;
    addInt_251658457(result_318767109, 0, x_318767108);
  framePtr = F.prev;

  return result_318767109[0];

}

function auxWriteStackTrace_33556559(f_33556560) {
          var Temporary3;

  var result_33556561 = [[]];

    var it_33556569 = f_33556560;
    var i_33556570 = 0;
    var total_33556571 = 0;
    var tempFrames_33556572 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555919);
    Label1: do {
        Label2: while (true) {
          if (!!((it_33556569 == null))) Temporary3 = false; else {            Temporary3 = (i_33556570 <= 63);          }        if (!Temporary3) break Label2;
          tempFrames_33556572[i_33556570].Field0 = it_33556569.procname;
          tempFrames_33556572[i_33556570].Field1 = it_33556569.line;
          tempFrames_33556572[i_33556570].Field2 = it_33556569.filename;
          i_33556570 += 1;
          total_33556571 += 1;
          it_33556569 = it_33556569.prev;
        }
    } while (false);
    Label4: do {
        Label5: while (true) {
        if (!!((it_33556569 == null))) break Label5;
          total_33556571 += 1;
          it_33556569 = it_33556569.prev;
        }
    } while (false);
    result_33556561[0] = nimCopy(null, [], NTI33554439);
    if (!((total_33556571 == i_33556570))) {
    result_33556561[0].push.apply(result_33556561[0], makeNimstrLit("("));;
    result_33556561[0].push.apply(result_33556561[0], HEX24_318767107((total_33556571 - i_33556570)));;
    result_33556561[0].push.apply(result_33556561[0], makeNimstrLit(" calls omitted) ...\x0A"));;
    }
    
    Label6: do {
      var j_33556602 = 0;
      var colontmp__436207723 = 0;
      colontmp__436207723 = (i_33556570 - 1);
      var res_436207724 = colontmp__436207723;
      Label7: do {
          Label8: while (true) {
          if (!(0 <= res_436207724)) break Label8;
            j_33556602 = res_436207724;
            result_33556561[0].push.apply(result_33556561[0], cstrToNimstr(tempFrames_33556572[j_33556602].Field2));;
            if ((0 < tempFrames_33556572[j_33556602].Field1)) {
            result_33556561[0].push.apply(result_33556561[0], makeNimstrLit("("));;
            addInt_251658457(result_33556561, 0, tempFrames_33556572[j_33556602].Field1);
            if (false) {
            result_33556561[0].push.apply(result_33556561[0], makeNimstrLit(", "));;
            addInt_251658457(result_33556561, 0, 0);
            }
            
            result_33556561[0].push.apply(result_33556561[0], makeNimstrLit(")"));;
            }
            
            result_33556561[0].push.apply(result_33556561[0], makeNimstrLit(" at "));;
            add_33556419(result_33556561, 0, tempFrames_33556572[j_33556602].Field0);
            result_33556561[0].push.apply(result_33556561[0], makeNimstrLit("\x0A"));;
            res_436207724 -= 1;
          }
      } while (false);
    } while (false);

  return result_33556561[0];

}

function rawWriteStackTrace_33556631() {
  var result_33556632 = [];

    if (!((framePtr == null))) {
    result_33556632 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(auxWriteStackTrace_33556559(framePtr) || []), NTI33554439);
    }
    else {
      result_33556632 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI33554439);
    }
    

  return result_33556632;

}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }  framePtr = F.prev;

  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    buf_33556664[0].push.apply(buf_33556664[0], rawWriteStackTrace_33556631());;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function paramCount_620757947() {
  var result_620757948 = 0;

  var F = {procname: "os.paramCount", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
  framePtr = F;
    F.line = 2905;
    result_620757948 = subInt(process.argv.length, 2);
  framePtr = F.prev;

  return result_620757948;

}

function paramStr_620757949(i_620757950) {
      var Temporary1;
      var Temporary2;

  var result_620757951 = [];

  var F = {procname: "os.paramStr", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
  framePtr = F;
    F.line = 2908;
    var i_620757952 = addInt(i_620757950, 1);
      if (!(i_620757952 < process.argv.length)) Temporary1 = false; else {        Temporary1 = (0 <= i_620757952);      }    if (Temporary1) {
    F.line = 2910;
    result_620757951 = nimCopy(null, cstrToNimstr(process.argv[i_620757952]), NTI33554439);
    }
    else {
      if ((subInt(process.argv.length, 2) < 0)) {
      Temporary2 = makeNimstrLit("index out of bounds, the container is empty");
      }
      else {
      Temporary2 = (makeNimstrLit("index ") || []).concat(HEX24_318767107(subInt(i_620757952, 1)) || [],makeNimstrLit(" not in 0 .. ") || [],HEX24_318767107(subInt(process.argv.length, 2)) || []);
      }
      
      F.line = 2912;
      raiseException({message: nimCopy(null, Temporary2, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");
    }
    
  framePtr = F.prev;

  return result_620757951;

}

function commandLineParams_620757956() {
  var result_620757957 = [];

  var F = {procname: "os.commandLineParams", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/os.nim", line: 0};
  framePtr = F;
    F.line = 2997;
    result_620757957 = nimCopy(null, [], NTI620757662);
    Label1: do {
      F.line = 2998;
      var i_620757966 = 0;
      F.line = 75;
      var colontmp__436207717 = 0;
      F.line = 2998;
      colontmp__436207717 = paramCount_620757947();
      F.line = 90;
      var res_436207718 = 1;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_436207718 <= colontmp__436207717)) break Label3;
            F.line = 2998;
            i_620757966 = res_436207718;
            F.line = 2998;
            result_620757957.push(paramStr_620757949(i_620757966));;
            F.line = 93;
            res_436207718 = addInt(res_436207718, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_620757957;

}

function sysFatal_218103842(message_218103845) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 54;
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}

function raiseAssert_218103840(msg_218103841) {
  var F = {procname: "assertions.raiseAssert", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/assertions.nim", line: 0};
  framePtr = F;
    F.line = 28;
    sysFatal_218103842(msg_218103841);
  framePtr = F.prev;

  
}

function failedAssertImpl_218103864(msg_218103865) {
  var F = {procname: "assertions.failedAssertImpl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/assertions.nim", line: 0};
  framePtr = F;
    F.line = 38;
    raiseAssert_218103840(msg_218103865);
  framePtr = F.prev;

  
}

function HEX5BHEX5D_436207691(s_436207695, x_436207696) {
  var result_436207697 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2619;
    var a_436207699 = x_436207696.a;
    F.line = 2620;
    var L_436207704 = addInt(subInt(subInt((s_436207695).length, x_436207696.b), a_436207699), 1);
    F.line = 2621;
    result_436207697 = new Array(chckRange(L_436207704, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_436207704, 0, 2147483647) ; ++i) { result_436207697[i] = []; }    Label1: do {
      F.line = 2622;
      var i_436207713 = 0;
      F.line = 119;
      var i_436207735 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436207735 < L_436207704)) break Label3;
            F.line = 2622;
            i_436207713 = i_436207735;
            F.line = 2622;
            result_436207697[chckIndx(i_436207713, 0, (result_436207697).length - 1)] = nimCopy(null, s_436207695[chckIndx(addInt(i_436207713, a_436207699), 0, (s_436207695).length - 1)], NTI33554439);
            F.line = 122;
            i_436207735 = addInt(i_436207735, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_436207697;

}

function HEX2EHEX2E_805306448(a_805306451, b_805306452) {
  var result_805306455 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 512;
    result_805306455 = nimCopy(result_805306455, {a: a_805306451, b: b_805306452}, NTI805306447);
  framePtr = F.prev;

  return result_805306455;

}
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
F.line = 43;
var args_436207673 = commandLineParams_620757956();
if (!((1 <= (args_436207673).length))) {
F.line = 44;
failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim(44, 9) `args.len >= 1` "));
}

F.line = 45;
var opts_436207714 = HEX5BHEX5D_436207691(args_436207673, HEX2EHEX2E_805306448(1, 1));
F.line = 46;
var s_436207715 = [deranHEXC4HEXB1_from_latin_436207629(args_436207673[chckIndx(0, 0, (args_436207673).length - 1)], opts_436207714)];
F.line = 48;
rawEcho(s_436207715[0]);
F.line = 49;
process.exit(0);
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deran\xC4\xB1_from_latin_js", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function find_436207742(a_436207745, item_436207746) {
  var result_436207747 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1837;
    result_436207747 = 0;
    Label1: do {
      F.line = 1838;
      var i_436207768 = [];
      F.line = 235;
      var i_436212551 = 0;
      F.line = 236;
      var L_436212552 = (a_436207745).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_436212551 < L_436212552)) break Label3;
            F.line = 1838;
            i_436207768 = a_436207745[chckIndx(i_436212551, 0, (a_436207745).length - 1)];
            if (eqStrings(i_436207768, item_436207746)) {
            F.line = 1839;
            break BeforeRet;
            }
            
            F.line = 1838;
            result_436207747 = addInt(result_436207747, 1);
            F.line = 239;
            i_436212551 = addInt(i_436212551, 1);
            if (!(((a_436207745).length == L_436212552))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 1841;
    result_436207747 = -1;
  } while (false);
  framePtr = F.prev;

  return result_436207747;

}

function nsuFindChar(s_637535736, sub_637535737, start_637535738, last_637535739) {
    var Temporary1;

  var result_637535740 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1870;
    if ((last_637535739 == 0)) {
    Temporary1 = (s_637535736).length - 1;
    }
    else {
    Temporary1 = last_637535739;
    }
    
    var last_637535741 = Temporary1;
    Label2: do {
      F.line = 1882;
      var i_637535751 = 0;
      F.line = 75;
      var colontmp__436212569 = 0;
      F.line = 1882;
      colontmp__436212569 = start_637535738;
      F.line = 90;
      var res_436212570 = colontmp__436212569;
      Label3: do {
        F.line = 91;
          Label4: while (true) {
          if (!(res_436212570 <= last_637535741)) break Label4;
            F.line = 1882;
            i_637535751 = res_436212570;
            if ((sub_637535737 == s_637535736[chckIndx(i_637535751, 0, (s_637535736).length - 1)])) {
            F.line = 1883;
            result_637535740 = i_637535751;
            break BeforeRet;
            }
            
            F.line = 93;
            res_436212570 = addInt(res_436212570, 1);
          }
      } while (false);
    } while (false);
    F.line = 1884;
    result_637535740 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_637535740;

}

function substr_33557906(s_33557907, first_33557908, last_33557909) {
  var result_33557910 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 3069;
    var first_33557911 = nimMax(first_33557908, 0);
    F.line = 3070;
    var L_33557912 = nimMax(addInt(subInt(nimMin(last_33557909, (s_33557907).length - 1), first_33557911), 1), 0);
    F.line = 3071;
    result_33557910 = nimCopy(null, mnewString(chckRange(L_33557912, 0, 2147483647)), NTI33554439);
    Label1: do {
      F.line = 3072;
      var i_33557917 = 0;
      F.line = 75;
      var colontmp__436212573 = 0;
      F.line = 3072;
      colontmp__436212573 = subInt(L_33557912, 1);
      F.line = 90;
      var res_436212574 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_436212574 <= colontmp__436212573)) break Label3;
            F.line = 3072;
            i_33557917 = res_436212574;
            F.line = 3072;
            result_33557910[chckIndx(i_33557917, 0, (result_33557910).length - 1)] = s_33557907[chckIndx(addInt(i_33557917, first_33557911), 0, (s_33557907).length - 1)];
            F.line = 93;
            res_436212574 = addInt(res_436212574, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_33557910;

}

function substr_33557918(s_33557919, first_33557920) {
  var result_33557921 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 3076;
    result_33557921 = nimCopy(null, substr_33557906(s_33557919, first_33557920, (s_33557919).length - 1), NTI33554439);
  framePtr = F.prev;

  return result_33557921;

}

function fill_637535675(a_637535677, value_637535678) {
  var F = {procname: "fill.fill", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 68;
    var xHEX60gensym166_637535684 = 0;
    Label1: do {
      F.line = 94;
        Label2: while (true) {
        if (!(xHEX60gensym166_637535684 <= (a_637535677).length - 1)) break Label2;
          F.line = 94;
          a_637535677[chckIndx(xHEX60gensym166_637535684, 0, (a_637535677).length - 1)] = value_637535678;
          F.line = 71;
          xHEX60gensym166_637535684 = addInt(xHEX60gensym166_637535684, 1);
        }
    } while (false);
  framePtr = F.prev;

  
}

function nsuInitSkipTable(a_637535672, sub_637535673) {
  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1807;
    var m_637535674 = (sub_637535673).length;
    F.line = 1808;
    fill_637535675(a_637535672, m_637535674);
    Label1: do {
      F.line = 1810;
      var i_637535693 = 0;
      F.line = 117;
      var colontmp__436212577 = 0;
      F.line = 1810;
      colontmp__436212577 = subInt(m_637535674, 1);
      F.line = 119;
      var i_436212578 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212578 < colontmp__436212577)) break Label3;
            F.line = 1810;
            i_637535693 = i_436212578;
            F.line = 1810;
            a_637535672[chckIndx(sub_637535673[chckIndx(i_637535693, 0, (sub_637535673).length - 1)], 0, (a_637535672).length - 1)] = subInt(subInt(m_637535674, 1), i_637535693);
            F.line = 122;
            i_436212578 = addInt(i_436212578, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function nsuFindStrA(a_637535716, s_637535717, sub_637535718, start_637535719, last_637535720) {
    var Temporary1;

  var result_637535721 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1830;
    if ((last_637535720 == 0)) {
    Temporary1 = (s_637535717).length - 1;
    }
    else {
    Temporary1 = last_637535720;
    }
    
    var last_637535722 = Temporary1;
    F.line = 1831;
    var subLast_637535723 = subInt((sub_637535718).length, 1);
    if ((subLast_637535723 == -1)) {
    F.line = 1836;
    result_637535721 = start_637535719;
    break BeforeRet;
    }
    
    F.line = 1840;
    var skip_637535724 = start_637535719;
    Label2: do {
      F.line = 1842;
        Label3: while (true) {
        if (!(subLast_637535723 <= subInt(last_637535722, skip_637535724))) break Label3;
          F.line = 1843;
          var i_637535725 = subLast_637535723;
          Label4: do {
            F.line = 1844;
              Label5: while (true) {
              if (!(s_637535717[chckIndx(addInt(skip_637535724, i_637535725), 0, (s_637535717).length - 1)] == sub_637535718[chckIndx(i_637535725, 0, (sub_637535718).length - 1)])) break Label5;
                if ((i_637535725 == 0)) {
                F.line = 1846;
                result_637535721 = skip_637535724;
                break BeforeRet;
                }
                
                F.line = 1847;
                i_637535725 = subInt(i_637535725, 1);
              }
          } while (false);
          F.line = 1848;
          skip_637535724 = addInt(skip_637535724, a_637535716[chckIndx(s_637535717[chckIndx(addInt(skip_637535724, subLast_637535723), 0, (s_637535717).length - 1)], 0, (a_637535716).length - 1)]);
        }
    } while (false);
    F.line = 1849;
    result_637535721 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_637535721;

}

function nsuReplaceStr(s_637535905, sub_637535906, by_637535907) {
  var result_637535908 = [];

  var F = {procname: "strutils.replace", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2074;
    result_637535908 = nimCopy(null, [], NTI33554439);
    F.line = 2075;
    var subLen_637535909 = (sub_637535906).length;
    if ((subLen_637535909 == 0)) {
    F.line = 2077;
    result_637535908 = nimCopy(null, s_637535905, NTI33554439);
    }
    else {
    if ((subLen_637535909 == 1)) {
    F.line = 2081;
    var c_637535910 = sub_637535906[chckIndx(0, 0, (sub_637535906).length - 1)];
    F.line = 2082;
    var last_637535911 = (s_637535905).length - 1;
    F.line = 2083;
    var i_637535912 = 0;
    Label1: do {
      F.line = 2084;
        Label2: while (true) {
        if (!true) break Label2;
          F.line = 2085;
          var j_637535913 = nsuFindChar(s_637535905, c_637535910, chckRange(i_637535912, 0, 2147483647), last_637535911);
          if ((j_637535913 < 0)) {
          F.line = 2086;
          break Label1;
          }
          
          F.line = 2087;
          result_637535908.push.apply(result_637535908, substr_33557906(s_637535905, i_637535912, subInt(j_637535913, 1)));;
          F.line = 2088;
          result_637535908.push.apply(result_637535908, by_637535907);;
          F.line = 2089;
          i_637535912 = addInt(j_637535913, subLen_637535909);
        }
    } while (false);
    F.line = 2091;
    result_637535908.push.apply(result_637535908, substr_33557918(s_637535905, i_637535912));;
    }
    else {
      F.line = 2093;
      var a_637535914 = [new Int32Array(256)];
      F.line = 2094;
      nsuInitSkipTable(a_637535914[0], sub_637535906);
      F.line = 2095;
      var last_637535915 = (s_637535905).length - 1;
      F.line = 2096;
      var i_637535916 = 0;
      Label3: do {
        F.line = 2097;
          Label4: while (true) {
          if (!true) break Label4;
            F.line = 2098;
            var j_637535917 = nsuFindStrA(a_637535914[0], s_637535905, sub_637535906, chckRange(i_637535916, 0, 2147483647), last_637535915);
            if ((j_637535917 < 0)) {
            F.line = 2099;
            break Label3;
            }
            
            F.line = 2100;
            result_637535908.push.apply(result_637535908, substr_33557906(s_637535905, i_637535916, subInt(j_637535917, 1)));;
            F.line = 2101;
            result_637535908.push.apply(result_637535908, by_637535907);;
            F.line = 2102;
            i_637535916 = addInt(j_637535917, subLen_637535909);
          }
      } while (false);
      F.line = 2104;
      result_637535908.push.apply(result_637535908, substr_33557918(s_637535905, i_637535916));;
    }
    }
  framePtr = F.prev;

  return result_637535908;

}

function HEX3CHEX3DHEX25_33555417(x_33555418, y_33555419) {
  var result_33555420 = false;

  var F = {procname: "system.<=%", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/comparisons.nim", line: 0};
  framePtr = F;
    F.line = 177;
    result_33555420 = ((x_33555418 >>> 0) <= (y_33555419 >>> 0));
  framePtr = F.prev;

  return result_33555420;

}

function toInt32_1426063373(x_1426063374) {
  var result_1426063375 = 0;

  var F = {procname: "normalize.toInt32", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 89;
    result_1426063375 = x_1426063374;
  framePtr = F.prev;

  return result_1426063375;

}

function isHangul_1426063720(r_1426063721) {
  var result_1426063722 = false;

  var F = {procname: "normalize.isHangul", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 324;
    result_1426063722 = ((44032 <= toInt32_1426063373(r_1426063721)) && (toInt32_1426063373(r_1426063721) <= 55203));
  framePtr = F.prev;

  return result_1426063722;

}

function left_1426063417(buffer_1426063418) {
  var result_1426063419 = 0;

  var F = {procname: "normalize.left", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 116;
    result_1426063419 = subInt(32, buffer_1426063418.pos);
  framePtr = F.prev;

  return result_1426063419;

}

function add_1426063430(buffer_1426063431, x_1426063432) {
  var F = {procname: "normalize.add", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    if (!((0 < left_1426063417(buffer_1426063431)))) {
    F.line = 123;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim(123, 10) `buffer.left > 0` "));
    }
    
    F.line = 124;
    buffer_1426063431.data[chckIndx(buffer_1426063431.pos, 0, (buffer_1426063431.data).length - 1)] = x_1426063432;
    F.line = 125;
    buffer_1426063431.pos = addInt(buffer_1426063431.pos, 1);
  framePtr = F.prev;

  
}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function hangulDecomposition_1426063715(r_1426063716) {
      var Temporary1;

  var result_1426063717 = [({data: new Int32Array(32), pos: 0})];

  var F = {procname: "normalize.hangulDecomposition", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 314;
    var SIndex_1426063718 = subInt(toInt32_1426063373(r_1426063716), 44032);
      if (!(SIndex_1426063718 < 0)) Temporary1 = false; else {        Temporary1 = (11172 <= SIndex_1426063718);      }    if (Temporary1) {
    F.line = 316;
    break BeforeRet;
    }
    
    F.line = 317;
    add_1426063430(result_1426063717[0], addInt(4352, divInt(SIndex_1426063718, 588)));
    F.line = 318;
    add_1426063430(result_1426063717[0], addInt(4449, divInt(modInt(SIndex_1426063718, 588), 28)));
    F.line = 319;
    var T_1426063719 = addInt(4519, modInt(SIndex_1426063718, 28));
    if (!((T_1426063719 == 4519))) {
    F.line = 321;
    add_1426063430(result_1426063717[0], T_1426063719);
    }
    
  } while (false);
  framePtr = F.prev;

  return result_1426063717[0];

}

function len_1426063442(buffer_1426063443) {
  var result_1426063444 = 0;

  var F = {procname: "normalize.len", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 128;
    result_1426063444 = buffer_1426063443.pos;
  framePtr = F.prev;

  return result_1426063444;

}

function clear_1426063428(buffer_1426063429) {
  var F = {procname: "normalize.clear", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 120;
    buffer_1426063429.pos = 0;
  framePtr = F.prev;

  
}

function pop_1426063506(buffer_1426063507) {
  var result_1426063508 = 0;

  var F = {procname: "normalize.pop", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    if (!((0 <= subInt(len_1426063442(buffer_1426063507), 1)))) {
    F.line = 154;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim(154, 10) `buffer.len - 1 >= 0` "));
    }
    
    F.line = 155;
    result_1426063508 = buffer_1426063507.data[chckIndx(subInt(len_1426063442(buffer_1426063507), 1), 0, (buffer_1426063507.data).length - 1)];
    F.line = 156;
    buffer_1426063507.pos = subInt(buffer_1426063507.pos, 1);
  framePtr = F.prev;

  return result_1426063508;

}

function reverse_1426063490(buffer_1426063491) {
  var F = {procname: "normalize.reverse", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 146;
    var x_1426063492 = 0;
    F.line = 147;
    var y_1426063493 = nimMax(0, subInt(len_1426063442(buffer_1426063491), 1));
    Label1: do {
      F.line = 148;
        Label2: while (true) {
        if (!(x_1426063492 < y_1426063493)) break Label2;
          F.line = 149;
          var Temporary3 = buffer_1426063491.data[chckIndx(x_1426063492, 0, (buffer_1426063491.data).length - 1)]; buffer_1426063491.data[chckIndx(x_1426063492, 0, (buffer_1426063491.data).length - 1)] = buffer_1426063491.data[chckIndx(y_1426063493, 0, (buffer_1426063491.data).length - 1)]; buffer_1426063491.data[chckIndx(y_1426063493, 0, (buffer_1426063491.data).length - 1)] = Temporary3;          F.line = 150;
          y_1426063493 = subInt(y_1426063493, 1);
          F.line = 151;
          x_1426063492 = addInt(x_1426063492, 1);
        }
    } while (false);
  framePtr = F.prev;

  
}

function high_1426063445(buffer_1426063446) {
  var result_1426063447 = 0;

  var F = {procname: "normalize.high", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 131;
    result_1426063447 = subInt(buffer_1426063446.pos, 1);
  framePtr = F.prev;

  return result_1426063447;

}

function properties_1107296339(cp_1107296340) {
  var result_1107296341 = new Int32Array(4);

  var F = {procname: "properties.properties", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    if (!((((cp_1107296340) | 0) <= 1114111))) {
    F.line = 197;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim(197, 10) `cp.int <= 0x0010FFFF` "));
    }
    
    F.line = 200;
    var blockOffset_1107296351 = mulInt(((propsOffsets_1124073515[chckIndx(divInt(((cp_1107296340) | 0), 128), 0, (propsOffsets_1124073515).length - 1)]) | 0), 128);
    F.line = 201;
    var idx_1107296352 = propsIndices_1124073516[chckIndx(addInt(blockOffset_1107296351, modInt(((cp_1107296340) | 0), 128)), 0, (propsIndices_1124073516).length - 1)];
    F.line = 202;
    result_1107296341 = nimCopy(result_1107296341, propsData_1124073517[chckIndx(idx_1107296352, 0, (propsData_1124073517).length - 1)], NTI1107296301);
  framePtr = F.prev;

  return result_1107296341;

}

function toRune_1426063376(x_1426063377) {
  var result_1426063378 = 0;

  var F = {procname: "normalize.toRune", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 90;
    result_1426063378 = x_1426063377;
  framePtr = F.prev;

  return result_1426063378;

}

function combining_1107296410(props_1107296411) {
  var result_1107296412 = 0;

  var F = {procname: "properties.combining", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    F.line = 256;
    result_1107296412 = ((props_1107296411[chckIndx(1, 0, (props_1107296411).length - 1)]) | 0);
  framePtr = F.prev;

  return result_1107296412;

}

function quickCheck_1107296416(props_1107296417) {
  var result_1107296418 = 0;

  var F = {procname: "properties.quickCheck", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    F.line = 265;
    result_1107296418 = ((props_1107296417[chckIndx(3, 0, (props_1107296417).length - 1)]) | 0);
  framePtr = F.prev;

  return result_1107296418;

}

function contains_1107296422(qc_1107296423, m_1107296424) {
  var result_1107296425 = false;

  var F = {procname: "properties.contains", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    F.line = 278;
    result_1107296425 = !(((qc_1107296423 & m_1107296424) == 0));
  framePtr = F.prev;

  return result_1107296425;

}

function isAllowed_1426063625(qc_1426063626, nfType_1426063627) {
  var result_1426063628 = 0;

  var F = {procname: "normalize.isAllowed", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 185;
    result_1426063628 = 0;
    Label1: do {
      F.line = 186;
      var mask_1426063672 = 0;
      F.line = 186;
      var status_1426063673 = 0;
      F.line = 30;
      var colontmp__436212668 = [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}];
      F.line = 186;
      colontmp__436212668 = nimCopy(colontmp__436212668, nfMasks_1426063588[chckIndx(nfType_1426063627, 0, (nfMasks_1426063588).length - 1)], NTI1426063621);
      F.line = 33;
      var i_436212670 = 0;
      Label2: do {
        F.line = 34;
          Label3: while (true) {
          if (!true) break Label3;
            F.line = 186;
            var colontmp__436212673 = nimCopy(null, colontmp__436212668[chckIndx(i_436212670, 0, (colontmp__436212668).length - 1)], NTI1426063620);
            F.line = 186;
            mask_1426063672 = colontmp__436212673["Field0"];
            F.line = 186;
            status_1426063673 = colontmp__436212673["Field1"];
            if (contains_1107296422(qc_1426063626, mask_1426063672)) {
            F.line = 188;
            result_1426063628 = status_1426063673;
            F.line = 189;
            break BeforeRet;
            }
            
            if ((1 <= i_436212670)) {
            F.line = 36;
            break Label2;
            }
            
            F.line = 37;
            i_436212670 = addInt(i_436212670, 1);
          }
      } while (false);
    } while (false);
  } while (false);
  framePtr = F.prev;

  return result_1426063628;

}

function HEX5BHEX5D_1426063463(buffer_1426063464, i_1426063465) {
  var result_1426063466 = null;
  var result_1426063466_Idx = 0;

  var F = {procname: "normalize.[]", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 138;
    if (!((i_1426063465 < buffer_1426063464.pos))) {
    F.line = 138;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim(138, 10) `i < buffer.pos` "));
    }
    
    result_1426063466_Idx = [buffer_1426063464.data, buffer_1426063464.data[chckIndx(i_1426063465, 0, (buffer_1426063464.data).length - 1)]];
    result_1426063466 = buffer_1426063464.data[chckIndx(i_1426063465, 0, (buffer_1426063464.data).length - 1)];
    result_1426063466[result_1426063466_Idx] = buffer_1426063464.data[chckIndx(i_1426063465, 0, (buffer_1426063464.data).length - 1)];
  framePtr = F.prev;

  return [result_1426063466, result_1426063466_Idx];

}

function canonicSort_1426064164(cps_1426064166, cccs_1426064167) {
                  var Temporary6;
                  var Temporary7;
                    var Temporary8;
                  var Temporary9;
                  var Temporary10;
                  var Temporary12;
                  var Temporary13;

  var F = {procname: "canonicSort.canonicSort", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (!((len_1426063442(cps_1426064166) == len_1426063442(cccs_1426064167)))) {
    F.line = 295;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim(295, 10) `len(cps) == len(cccs)` "));
    }
    
    F.line = 297;
    var i_1426064173 = subInt(len_1426063442(cps_1426064166), 1);
    F.line = 298;
    var isSwapped_1426064174 = false;
    Label1: do {
      F.line = 299;
        Label2: while (true) {
        if (!(0 < i_1426064173)) break Label2;
          F.line = 300;
          isSwapped_1426064174 = false;
          Label3: do {
            F.line = 301;
            var j_1426064179 = 0;
            F.line = 119;
            var i_436212676 = 0;
            Label4: do {
              F.line = 120;
                Label5: while (true) {
                if (!(i_436212676 < i_1426064173)) break Label5;
                  F.line = 301;
                  j_1426064179 = i_436212676;
                  F.line = 303;
                  var cccA_1426064180 = (Temporary6 = HEX5BHEX5D_1426063463(cccs_1426064167, j_1426064179), Temporary6)[0][Temporary6[1]];
                  F.line = 304;
                  var cccB_1426064181 = (Temporary7 = HEX5BHEX5D_1426063463(cccs_1426064167, addInt(j_1426064179, 1)), Temporary7)[0][Temporary7[1]];
                    if (!(cccB_1426064181 < cccA_1426064180)) Temporary8 = false; else {                      Temporary8 = (0 < cccB_1426064181);                    }                  if (Temporary8) {
                  F.line = 306;
                  var Temporary11 = (Temporary9 = HEX5BHEX5D_1426063463(cps_1426064166, j_1426064179), Temporary9)[0][Temporary9[1]]; (Temporary9 = HEX5BHEX5D_1426063463(cps_1426064166, j_1426064179), Temporary9)[0][Temporary9[1]] = (Temporary10 = HEX5BHEX5D_1426063463(cps_1426064166, addInt(j_1426064179, 1)), Temporary10)[0][Temporary10[1]]; (Temporary10 = HEX5BHEX5D_1426063463(cps_1426064166, addInt(j_1426064179, 1)), Temporary10)[0][Temporary10[1]] = Temporary11;                  F.line = 307;
                  var Temporary14 = (Temporary12 = HEX5BHEX5D_1426063463(cccs_1426064167, j_1426064179), Temporary12)[0][Temporary12[1]]; (Temporary12 = HEX5BHEX5D_1426063463(cccs_1426064167, j_1426064179), Temporary12)[0][Temporary12[1]] = (Temporary13 = HEX5BHEX5D_1426063463(cccs_1426064167, addInt(j_1426064179, 1)), Temporary13)[0][Temporary13[1]]; (Temporary13 = HEX5BHEX5D_1426063463(cccs_1426064167, addInt(j_1426064179, 1)), Temporary13)[0][Temporary13[1]] = Temporary14;                  F.line = 308;
                  isSwapped_1426064174 = true;
                  }
                  
                  F.line = 122;
                  i_436212676 = addInt(i_436212676, 1);
                }
            } while (false);
          } while (false);
          if (!(isSwapped_1426064174)) {
          F.line = 310;
          break BeforeRet;
          }
          
          F.line = 311;
          i_1426064173 = subInt(i_1426064173, 1);
        }
    } while (false);
  } while (false);
  framePtr = F.prev;

  
}

function HEX3CHEX3DHEX25_33555429(x_33555430, y_33555431) {
  var result_33555432 = false;

  var F = {procname: "system.<=%", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/comparisons.nim", line: 0};
  framePtr = F;
    F.line = 182;
    result_33555432 = ((x_33555430 >>> 0) <= (y_33555431 >>> 0));
  framePtr = F.prev;

  return result_33555432;

}

function toNF_1426064551(s_1426064553) {
                          var Temporary18;

  var result_1426064555 = [];

  var F = {procname: "toNF.toNF", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 464;
    result_1426064555 = nimCopy(null, mnewString(chckRange((s_1426064553).length, 0, 2147483647)), NTI33554439);
    F.line = 465;
    var i_1426064556 = 0;
    Label1: do {
      F.line = 466;
      var r_1426064562 = 0;
      F.line = 373;
      var buff_436212621 = [({data: new Int32Array(32), pos: 0})];
      F.line = 373;
      var cccs_436212622 = [({data: new Int32Array(32), pos: 0})];
      F.line = 373;
      var dcps_436212623 = [({data: new Int32Array(32), pos: 0})];
      F.line = 374;
      var lastCCC_436212624 = 0;
      Label2: do {
        F.line = 375;
        var done_436212626 = false;
        F.line = 375;
        var r_436212627 = 0;
        F.line = 358;
        var n_436212628 = 0;
        F.line = 359;
        var r_436212629 = 0;
        Label3: do {
          F.line = 360;
            Label4: while (true) {
            if (!(n_436212628 < (s_1426064553).length)) break Label4;
              if (HEX3CHEX3DHEX25_33555417(s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)], 127)) {
              F.line = 32;
              r_436212629 = ((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)]) | 0);
              F.line = 33;
              n_436212628 = addInt(n_436212628, 1);
              }
              else {
              if (((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] >> 5) == 6)) {
              if ((n_436212628 <= subInt((s_1426064553).length, 2))) {
              F.line = 36;
              r_436212629 = (((((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] & 31) << 6) | (s_1426064553[chckIndx(addInt(n_436212628, 1), 0, (s_1426064553).length - 1)] & 63))) | 0);
              F.line = 38;
              n_436212628 = addInt(n_436212628, 2);
              }
              else {
                F.line = 40;
                r_436212629 = 65533;
                F.line = 41;
                n_436212628 = addInt(n_436212628, 1);
              }
              
              }
              else {
              if (((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] >> 4) == 14)) {
              if ((n_436212628 <= subInt((s_1426064553).length, 3))) {
              F.line = 44;
              r_436212629 = ((((((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] & 15) << 12) | ((s_1426064553[chckIndx(addInt(n_436212628, 1), 0, (s_1426064553).length - 1)] & 63) << 6)) | (s_1426064553[chckIndx(addInt(n_436212628, 2), 0, (s_1426064553).length - 1)] & 63))) | 0);
              F.line = 47;
              n_436212628 = addInt(n_436212628, 3);
              }
              else {
                F.line = 49;
                r_436212629 = 65533;
                F.line = 50;
                n_436212628 = addInt(n_436212628, 1);
              }
              
              }
              else {
              if (((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] >> 3) == 30)) {
              if ((n_436212628 <= subInt((s_1426064553).length, 4))) {
              F.line = 53;
              r_436212629 = (((((((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] & 7) << 18) | ((s_1426064553[chckIndx(addInt(n_436212628, 1), 0, (s_1426064553).length - 1)] & 63) << 12)) | ((s_1426064553[chckIndx(addInt(n_436212628, 2), 0, (s_1426064553).length - 1)] & 63) << 6)) | (s_1426064553[chckIndx(addInt(n_436212628, 3), 0, (s_1426064553).length - 1)] & 63))) | 0);
              F.line = 57;
              n_436212628 = addInt(n_436212628, 4);
              }
              else {
                F.line = 59;
                r_436212629 = 65533;
                F.line = 60;
                n_436212628 = addInt(n_436212628, 1);
              }
              
              }
              else {
              if (((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] >> 2) == 62)) {
              if ((n_436212628 <= subInt((s_1426064553).length, 5))) {
              F.line = 63;
              r_436212629 = ((((((((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] & 3) << 24) | ((s_1426064553[chckIndx(addInt(n_436212628, 1), 0, (s_1426064553).length - 1)] & 63) << 18)) | ((s_1426064553[chckIndx(addInt(n_436212628, 2), 0, (s_1426064553).length - 1)] & 63) << 12)) | ((s_1426064553[chckIndx(addInt(n_436212628, 3), 0, (s_1426064553).length - 1)] & 63) << 6)) | (s_1426064553[chckIndx(addInt(n_436212628, 4), 0, (s_1426064553).length - 1)] & 63))) | 0);
              F.line = 68;
              n_436212628 = addInt(n_436212628, 5);
              }
              else {
                F.line = 70;
                r_436212629 = 65533;
                F.line = 71;
                n_436212628 = addInt(n_436212628, 1);
              }
              
              }
              else {
              if (((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] >> 1) == 126)) {
              if ((n_436212628 <= subInt((s_1426064553).length, 6))) {
              F.line = 74;
              r_436212629 = (((((((((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)] & 1) << 30) | ((s_1426064553[chckIndx(addInt(n_436212628, 1), 0, (s_1426064553).length - 1)] & 63) << 24)) | ((s_1426064553[chckIndx(addInt(n_436212628, 2), 0, (s_1426064553).length - 1)] & 63) << 18)) | ((s_1426064553[chckIndx(addInt(n_436212628, 3), 0, (s_1426064553).length - 1)] & 63) << 12)) | ((s_1426064553[chckIndx(addInt(n_436212628, 4), 0, (s_1426064553).length - 1)] & 63) << 6)) | (s_1426064553[chckIndx(addInt(n_436212628, 5), 0, (s_1426064553).length - 1)] & 63))) | 0);
              F.line = 80;
              n_436212628 = addInt(n_436212628, 6);
              }
              else {
                F.line = 82;
                r_436212629 = 65533;
                F.line = 83;
                n_436212628 = addInt(n_436212628, 1);
              }
              
              }
              else {
                F.line = 85;
                r_436212629 = ((s_1426064553[chckIndx(n_436212628, 0, (s_1426064553).length - 1)]) | 0);
                F.line = 86;
                n_436212628 = addInt(n_436212628, 1);
              }
              }}}}}
              F.line = 375;
              done_436212626 = (n_436212628 == (s_1426064553).length);
              F.line = 375;
              r_436212627 = r_436212629;
              if (isHangul_1426063720(r_436212627)) {
              F.line = 331;
              dcps_436212623[0] = nimCopy(dcps_436212623[0], hangulDecomposition_1426063715(r_436212627), NTI1426063497);
              if ((len_1426063442(dcps_436212623[0]) == 0)) {
              F.line = 333;
              add_1426063430(dcps_436212623[0], toInt32_1426063373(r_436212627));
              }
              
              }
              else {
                F.line = 335;
                clear_1426063428(dcps_436212623[0]);
                F.line = 336;
                var queueHEX60gensym76_436212631 = [({data: new Int32Array(32), pos: 0})];
                F.line = 337;
                add_1426063430(queueHEX60gensym76_436212631[0], toInt32_1426063373(r_436212627));
                Label5: do {
                  F.line = 338;
                    Label6: while (true) {
                    if (!(0 < len_1426063442(queueHEX60gensym76_436212631[0]))) break Label6;
                      F.line = 340;
                      var curCpHEX60gensym76_436212633 = pop_1426063506(queueHEX60gensym76_436212631[0]);
                      F.line = 341;
                      var lastLenHEX60gensym76_436212634 = len_1426063442(queueHEX60gensym76_436212631[0]);
                      Label7: do {
                        F.line = 342;
                        var dcpHEX60gensym76_436212636 = 0;
                        F.line = 32;
                        var colontmp__436212637 = 0;
                        F.line = 342;
                        colontmp__436212637 = curCpHEX60gensym76_436212633;
                        if (!((((colontmp__436212637) | 0) <= 1114111))) {
                        F.line = 37;
                        failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim(37, 10) `cp.int <= 0x0010FFFF` "));
                        }
                        
                        if ((127 < ((colontmp__436212637) | 0))) {
                        F.line = 40;
                        var blockOffset_436212638 = mulInt(((decompsOffsets_1493172225[chckIndx(divInt(((colontmp__436212637) | 0), 256), 0, (decompsOffsets_1493172225).length - 1)]) | 0), 256);
                        F.line = 41;
                        var idx_436212639 = ((decompsIndices_1493172226[chckIndx(addInt(blockOffset_436212638, modInt(((colontmp__436212637) | 0), 256)), 0, (decompsIndices_1493172226).length - 1)]) | 0);
                        if (!((idx_436212639 == -1))) {
                        F.line = 44;
                        var extra_436212640 = decompsData_1493172227[chckIndx(idx_436212639, 0, (decompsData_1493172227).length - 1)];
                        F.line = 45;
                        var isCanonical_436212641 = ((extra_436212640 & 1) == 1);
                        if (isCanonical_436212641) {
                        F.line = 47;
                        var length_436212642 = (extra_436212640 >> 1);
                        if (!((length_436212642 <= 2))) {
                        F.line = 48;
                        failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/decompositions.nim(48, 16) `length <= 2` "));
                        }
                        
                        Label8: do {
                          F.line = 49;
                          var i_436212644 = 0;
                          F.line = 75;
                          var colontmp__436212645 = 0;
                          F.line = 75;
                          var colontmp__436212646 = 0;
                          F.line = 49;
                          colontmp__436212645 = addInt(idx_436212639, 1);
                          F.line = 49;
                          colontmp__436212646 = addInt(idx_436212639, ((length_436212642) | 0));
                          F.line = 90;
                          var res_436212647 = colontmp__436212645;
                          Label9: do {
                            F.line = 91;
                              Label10: while (true) {
                              if (!(res_436212647 <= colontmp__436212646)) break Label10;
                                F.line = 49;
                                i_436212644 = res_436212647;
                                F.line = 342;
                                dcpHEX60gensym76_436212636 = decompsData_1493172227[chckIndx(i_436212644, 0, (decompsData_1493172227).length - 1)];
                                F.line = 342;
                                add_1426063430(queueHEX60gensym76_436212631[0], toInt32_1426063373(dcpHEX60gensym76_436212636));
                                F.line = 93;
                                res_436212647 = addInt(res_436212647, 1);
                              }
                          } while (false);
                        } while (false);
                        }
                        
                        }
                        
                        }
                        
                      } while (false);
                      if ((lastLenHEX60gensym76_436212634 == len_1426063442(queueHEX60gensym76_436212631[0]))) {
                      F.line = 345;
                      add_1426063430(dcps_436212623[0], curCpHEX60gensym76_436212633);
                      }
                      
                    }
                } while (false);
                F.line = 346;
                reverse_1426063490(dcps_436212623[0]);
              }
              
              Label11: do {
                F.line = 377;
                var i_436212650 = 0;
                F.line = 377;
                var cp_436212651 = 0;
                F.line = 110;
                var i_436212652 = 0;
                Label12: do {
                  F.line = 111;
                  var n_436212654 = 0;
                  F.line = 104;
                  var i_436212655 = 0;
                  Label13: do {
                    F.line = 105;
                      Label14: while (true) {
                      if (!(i_436212655 < dcps_436212623[0].pos)) break Label14;
                        F.line = 111;
                        n_436212654 = dcps_436212623[0].data[chckIndx(i_436212655, 0, (dcps_436212623[0].data).length - 1)];
                        F.line = 377;
                        i_436212650 = i_436212652;
                        F.line = 377;
                        cp_436212651 = n_436212654;
                        F.line = 379;
                        var finished_436212657 = (done_436212626 && (i_436212650 == high_1426063445(dcps_436212623[0])));
                        F.line = 380;
                        var props_436212658 = properties_1107296339(toRune_1426063376(cp_436212651));
                        F.line = 381;
                        var ccc_436212659 = ((combining_1107296410(props_436212658)) | 0);
                        F.line = 382;
                        var qc_436212660 = quickCheck_1107296416(props_436212658);
                        F.line = 383;
                        var isSafeBreak_436212661 = ((isAllowed_1426063625(qc_436212660, 2) == 0) && (ccc_436212659 == 0));
                        if (((finished_436212657 || isSafeBreak_436212661) || (left_1426063417(buff_436212621[0]) == 1))) {
                        if (finished_436212657) {
                        F.line = 388;
                        add_1426063430(buff_436212621[0], cp_436212651);
                        F.line = 389;
                        add_1426063430(cccs_436212622[0], ccc_436212659);
                        }
                        
                        F.line = 391;
                        canonicSort_1426064164(buff_436212621[0], cccs_436212622[0]);
                        Label15: do {
                          F.line = 394;
                          var bcp_436212663 = 0;
                          F.line = 104;
                          var i_436212664 = 0;
                          Label16: do {
                            F.line = 105;
                              Label17: while (true) {
                              if (!(i_436212664 < buff_436212621[0].pos)) break Label17;
                                F.line = 394;
                                bcp_436212663 = buff_436212621[0].data[chckIndx(i_436212664, 0, (buff_436212621[0].data).length - 1)];
                                F.line = 466;
                                r_1426064562 = bcp_436212663;
                                if (((result_1426064555).length - 1 <= i_1426064556)) {
                                F.line = 468;
                                (result_1426064555.length = chckRange(mulInt((result_1426064555).length, 2), 0, 2147483647));
                                }
                                
                                F.line = 211;
                                var iHEX60gensym89_1426064564 = r_1426064562;
                                if (HEX3CHEX3DHEX25_33555429(iHEX60gensym89_1426064564, 127)) {
                                F.line = 213;
                                (result_1426064555.length = chckRange(addInt(i_1426064556, 1), 0, 2147483647));
                                F.line = 214;
                                result_1426064555[chckIndx(addInt(i_1426064556, 0), 0, (result_1426064555).length - 1)] = chckRange(iHEX60gensym89_1426064564, 0, 255);
                                F.line = 215;
                                i_1426064556 = addInt(i_1426064556, 1);
                                }
                                else {
                                if (HEX3CHEX3DHEX25_33555429(iHEX60gensym89_1426064564, 2047)) {
                                F.line = 217;
                                (result_1426064555.length = chckRange(addInt(i_1426064556, 2), 0, 2147483647));
                                F.line = 218;
                                result_1426064555[chckIndx(addInt(i_1426064556, 0), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 >> 6) | 192), 0, 255);
                                F.line = 219;
                                result_1426064555[chckIndx(addInt(i_1426064556, 1), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 & 63) | 128), 0, 255);
                                F.line = 220;
                                i_1426064556 = addInt(i_1426064556, 2);
                                }
                                else {
                                if (HEX3CHEX3DHEX25_33555429(iHEX60gensym89_1426064564, 65535)) {
                                F.line = 222;
                                (result_1426064555.length = chckRange(addInt(i_1426064556, 3), 0, 2147483647));
                                F.line = 223;
                                result_1426064555[chckIndx(addInt(i_1426064556, 0), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 >> 12) | 224), 0, 255);
                                F.line = 224;
                                result_1426064555[chckIndx(addInt(i_1426064556, 1), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 6) & 63) | 128), 0, 255);
                                F.line = 225;
                                result_1426064555[chckIndx(addInt(i_1426064556, 2), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 & 63) | 128), 0, 255);
                                F.line = 226;
                                i_1426064556 = addInt(i_1426064556, 3);
                                }
                                else {
                                if (HEX3CHEX3DHEX25_33555429(iHEX60gensym89_1426064564, 2097151)) {
                                F.line = 228;
                                (result_1426064555.length = chckRange(addInt(i_1426064556, 4), 0, 2147483647));
                                F.line = 229;
                                result_1426064555[chckIndx(addInt(i_1426064556, 0), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 >> 18) | 240), 0, 255);
                                F.line = 230;
                                result_1426064555[chckIndx(addInt(i_1426064556, 1), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 12) & 63) | 128), 0, 255);
                                F.line = 231;
                                result_1426064555[chckIndx(addInt(i_1426064556, 2), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 6) & 63) | 128), 0, 255);
                                F.line = 232;
                                result_1426064555[chckIndx(addInt(i_1426064556, 3), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 & 63) | 128), 0, 255);
                                F.line = 233;
                                i_1426064556 = addInt(i_1426064556, 4);
                                }
                                else {
                                if (HEX3CHEX3DHEX25_33555429(iHEX60gensym89_1426064564, 67108863)) {
                                F.line = 235;
                                (result_1426064555.length = chckRange(addInt(i_1426064556, 5), 0, 2147483647));
                                F.line = 236;
                                result_1426064555[chckIndx(addInt(i_1426064556, 0), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 >> 24) | 248), 0, 255);
                                F.line = 237;
                                result_1426064555[chckIndx(addInt(i_1426064556, 1), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 18) & 63) | 128), 0, 255);
                                F.line = 238;
                                result_1426064555[chckIndx(addInt(i_1426064556, 2), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 12) & 63) | 128), 0, 255);
                                F.line = 239;
                                result_1426064555[chckIndx(addInt(i_1426064556, 3), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 6) & 63) | 128), 0, 255);
                                F.line = 240;
                                result_1426064555[chckIndx(addInt(i_1426064556, 4), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 & 63) | 128), 0, 255);
                                F.line = 241;
                                i_1426064556 = addInt(i_1426064556, 5);
                                }
                                else {
                                if (HEX3CHEX3DHEX25_33555429(iHEX60gensym89_1426064564, 2147483647)) {
                                F.line = 243;
                                (result_1426064555.length = chckRange(addInt(i_1426064556, 6), 0, 2147483647));
                                F.line = 244;
                                result_1426064555[chckIndx(addInt(i_1426064556, 0), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 >> 30) | 252), 0, 255);
                                F.line = 245;
                                result_1426064555[chckIndx(addInt(i_1426064556, 1), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 24) & 63) | 128), 0, 255);
                                F.line = 246;
                                result_1426064555[chckIndx(addInt(i_1426064556, 2), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 18) & 63) | 128), 0, 255);
                                F.line = 247;
                                result_1426064555[chckIndx(addInt(i_1426064556, 3), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 12) & 63) | 128), 0, 255);
                                F.line = 248;
                                result_1426064555[chckIndx(addInt(i_1426064556, 4), 0, (result_1426064555).length - 1)] = chckRange((((iHEX60gensym89_1426064564 >> 6) & 63) | 128), 0, 255);
                                F.line = 249;
                                result_1426064555[chckIndx(addInt(i_1426064556, 5), 0, (result_1426064555).length - 1)] = chckRange(((iHEX60gensym89_1426064564 & 63) | 128), 0, 255);
                                F.line = 250;
                                i_1426064556 = addInt(i_1426064556, 6);
                                }
                                else {
                                }
                                }}}}}
                                F.line = 107;
                                i_436212664 = addInt(i_436212664, 1);
                              }
                          } while (false);
                        } while (false);
                        F.line = 396;
                        clear_1426063428(buff_436212621[0]);
                        F.line = 397;
                        clear_1426063428(cccs_436212622[0]);
                          if (!!((lastCCC_436212624 == 0))) Temporary18 = false; else {                            Temporary18 = !((ccc_436212659 == 0));                          }                        if (Temporary18) {
                        F.line = 400;
                        add_1426063430(buff_436212621[0], toInt32_1426063373(847));
                        F.line = 401;
                        add_1426063430(cccs_436212622[0], 0);
                        }
                        
                        }
                        
                        F.line = 402;
                        lastCCC_436212624 = ((ccc_436212659) | 0);
                        F.line = 377;
                        add_1426063430(buff_436212621[0], cp_436212651);
                        F.line = 377;
                        add_1426063430(cccs_436212622[0], ccc_436212659);
                        F.line = 111;
                        i_436212652 = addInt(i_436212652, 1);
                        F.line = 107;
                        i_436212655 = addInt(i_436212655, 1);
                      }
                  } while (false);
                } while (false);
              } while (false);
            }
        } while (false);
      } while (false);
    } while (false);
    F.line = 470;
    (result_1426064555.length = chckRange(i_1426064556, 0, 2147483647));
  framePtr = F.prev;

  return result_1426064555;

}

function toNFD_1426064548(s_1426064549) {
  var result_1426064550 = [];

  var F = {procname: "normalize.toNFD", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/normalize-0.8.0/normalize.nim", line: 0};
  framePtr = F;
    F.line = 473;
    result_1426064550 = nimCopy(null, toNF_1426064551(s_1426064549), NTI33554439);
  framePtr = F.prev;

  return result_1426064550;

}

function nsuJoinSep(a_637535633, sep_637535634) {
  var result_637535635 = [];

  var F = {procname: "strutils.join", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    if ((0 < (a_637535633).length)) {
    F.line = 1779;
    var L_637535642 = mulInt((sep_637535634).length, subInt((a_637535633).length, 1));
    Label1: do {
      F.line = 1780;
      var i_637535650 = 0;
      F.line = 75;
      var colontmp__436212679 = 0;
      F.line = 1780;
      colontmp__436212679 = (a_637535633).length - 1;
      F.line = 90;
      var res_436212680 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_436212680 <= colontmp__436212679)) break Label3;
            F.line = 1780;
            i_637535650 = res_436212680;
            F.line = 1780;
            L_637535642 = addInt(L_637535642, (a_637535633[chckIndx(i_637535650, 0, (a_637535633).length - 1)]).length);
            F.line = 93;
            res_436212680 = addInt(res_436212680, 1);
          }
      } while (false);
    } while (false);
    F.line = 1781;
    result_637535635 = nimCopy(null, mnewString(0), NTI33554439);
    F.line = 1782;
    result_637535635.push.apply(result_637535635, a_637535633[chckIndx(0, 0, (a_637535633).length - 1)]);;
    Label4: do {
      F.line = 1783;
      var i_637535662 = 0;
      F.line = 75;
      var colontmp__436212683 = 0;
      F.line = 1783;
      colontmp__436212683 = (a_637535633).length - 1;
      F.line = 90;
      var res_436212684 = 1;
      Label5: do {
        F.line = 91;
          Label6: while (true) {
          if (!(res_436212684 <= colontmp__436212683)) break Label6;
            F.line = 1783;
            i_637535662 = res_436212684;
            F.line = 1783;
            result_637535635.push.apply(result_637535635, sep_637535634);;
            F.line = 1783;
            result_637535635.push.apply(result_637535635, a_637535633[chckIndx(i_637535662, 0, (a_637535633).length - 1)]);;
            F.line = 93;
            res_436212684 = addInt(res_436212684, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      F.line = 1787;
      result_637535635 = nimCopy(null, [], NTI33554439);
    }
    
  framePtr = F.prev;

  return result_637535635;

}

function newSeq_419430869(len_419430871) {
  var result_419430872 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_419430872 = new Array(len_419430871); for (var i = 0 ; i < len_419430871 ; ++i) { result_419430872[i] = []; }  framePtr = F.prev;

  return result_419430872;

}

function len_1509950082(s_1509950084) {
  var result_1509950085 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 179;
    result_1509950085 = s_1509950084.counter;
  framePtr = F.prev;

  return result_1509950085;

}

function isFilled_956301350(hcode_956301351) {
  var result_956301352 = false;

  var F = {procname: "sets.isFilled", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 22;
    result_956301352 = !((hcode_956301351 == 0));
  framePtr = F.prev;

  return result_956301352;

}

function normalized_re_from_wordset_436207632(ws_436207634) {
  var result_436210322 = [];

  var F = {procname: "deran\xC4\xB1_from_latin_js.normalized_re_from_wordset", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 191;
    Label1: do {
      F.line = 783;
      var iHEX60gensym65_436210547 = 0;
      F.line = 784;
      var resultHEX60gensym65_436210609 = newSeq_419430869(chckRange(len_1509950082(ws_436207634), 0, 2147483647));
      Label2: do {
        F.line = 785;
        var itHEX60gensym65_436210613 = [];
        F.line = 262;
        var length_436212556 = len_1509950082(ws_436207634);
        Label3: do {
          F.line = 263;
          var h_436212558 = 0;
          F.line = 75;
          var colontmp__436212559 = 0;
          F.line = 263;
          colontmp__436212559 = (ws_436207634.data).length - 1;
          F.line = 90;
          var res_436212560 = 0;
          Label4: do {
            F.line = 91;
              Label5: while (true) {
              if (!(res_436212560 <= colontmp__436212559)) break Label5;
                F.line = 263;
                h_436212558 = res_436212560;
                if (isFilled_956301350(ws_436207634.data[chckIndx(h_436212558, 0, (ws_436207634.data).length - 1)].Field0)) {
                F.line = 785;
                itHEX60gensym65_436210613 = ws_436207634.data[chckIndx(h_436212558, 0, (ws_436207634.data).length - 1)].Field1;
                F.line = 786;
                resultHEX60gensym65_436210609[chckIndx(iHEX60gensym65_436210547, 0, (resultHEX60gensym65_436210609).length - 1)] = nimCopy(null, itHEX60gensym65_436210613, NTI33554439);
                F.line = 785;
                iHEX60gensym65_436210547 = addInt(iHEX60gensym65_436210547, 1);
                if (!((len_1509950082(ws_436207634) == length_436212556))) {
                F.line = 266;
                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim(266, 13) `len(s) == length` the length of the HashSet changed while iterating over it"));
                }
                
                }
                
                F.line = 93;
                res_436212560 = addInt(res_436212560, 1);
              }
          } while (false);
        } while (false);
      } while (false);
    } while (false);
    result_436210322 = nimCopy(null, nsuReplaceStr(toNFD_1426064548(nsuJoinSep(resultHEX60gensym65_436210609, makeNimstrLit("|"))), makeNimstrLit("i"), makeNimstrLit("\xC4\xB1")), NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436210322;

}

function parseSaturatedNatural_654311740(s_654311741, b_654311742, b_654311742_Idx, start_654311743) {
      var Temporary1;
          var Temporary4;

  var result_654311744 = 0;

  var F = {procname: "parseutils.parseSaturatedNatural", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 505;
    var i_654311745 = start_654311743;
    if (((i_654311745 < (s_654311741).length) && (s_654311741[chckIndx(i_654311745, 0, (s_654311741).length - 1)] == 43))) {
    F.line = 506;
    i_654311745 = addInt(i_654311745, 1);
    }
    
      if (!(i_654311745 < (s_654311741).length)) Temporary1 = false; else {        Temporary1 = (ConstSet6[s_654311741[chckIndx(i_654311745, 0, (s_654311741).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 508;
    b_654311742[b_654311742_Idx] = 0;
    Label2: do {
      F.line = 509;
        Label3: while (true) {
          if (!(i_654311745 < (s_654311741).length)) Temporary4 = false; else {            Temporary4 = (ConstSet7[s_654311741[chckIndx(i_654311745, 0, (s_654311741).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          F.line = 510;
          var c_654311764 = subInt(s_654311741[chckIndx(i_654311745, 0, (s_654311741).length - 1)], 48);
          if ((b_654311742[b_654311742_Idx] <= divInt(subInt(2147483647, c_654311764), 10))) {
          F.line = 512;
          b_654311742[b_654311742_Idx] = addInt(mulInt(b_654311742[b_654311742_Idx], 10), c_654311764);
          }
          else {
            F.line = 514;
            b_654311742[b_654311742_Idx] = 2147483647;
          }
          
          F.line = 515;
          i_654311745 = addInt(i_654311745, 1);
          Label5: do {
            F.line = 516;
              Label6: while (true) {
              if (!((i_654311745 < (s_654311741).length) && (s_654311741[chckIndx(i_654311745, 0, (s_654311741).length - 1)] == 95))) break Label6;
                F.line = 516;
                i_654311745 = addInt(i_654311745, 1);
              }
          } while (false);
        }
    } while (false);
    F.line = 517;
    result_654311744 = subInt(i_654311745, start_654311743);
    }
    
  framePtr = F.prev;

  return result_654311744;

}

function HEX5BHEX5D_838864026(s_838864029, x_838864030) {
  var result_838864031 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2563;
    var a_838864033 = x_838864030.a;
    F.line = 2564;
    var L_838864035 = addInt(subInt(subInt((s_838864029).length, x_838864030.b), a_838864033), 1);
    F.line = 2565;
    result_838864031 = nimCopy(null, mnewString(chckRange(L_838864035, 0, 2147483647)), NTI33554439);
    Label1: do {
      F.line = 2566;
      var i_838864040 = 0;
      F.line = 119;
      var i_436212687 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212687 < L_838864035)) break Label3;
            F.line = 2566;
            i_838864040 = i_436212687;
            F.line = 2566;
            result_838864031[chckIndx(i_838864040, 0, (result_838864031).length - 1)] = s_838864029[chckIndx(addInt(i_838864040, a_838864033), 0, (s_838864029).length - 1)];
            F.line = 122;
            i_436212687 = addInt(i_436212687, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_838864031;

}

function parseStandardFormatSpecifier_1409286202(s_1409286203, start_1409286204, ignoreUnknownSuffix_1409286205) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_1409286206 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

  var F = {procname: "strformat.parseStandardFormatSpecifier", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 430;
    result_1409286206.fill = 32;
    F.line = 431;
    result_1409286206.align = 0;
    F.line = 432;
    result_1409286206.sign = 45;
    F.line = 433;
    var i_1409286208 = start_1409286204;
    if (((addInt(i_1409286208, 1) < (s_1409286203).length) && (ConstSet2[s_1409286203[chckIndx(addInt(i_1409286208, 1), 0, (s_1409286203).length - 1)]] != undefined))) {
    F.line = 435;
    result_1409286206.fill = s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)];
    F.line = 436;
    result_1409286206.align = s_1409286203[chckIndx(addInt(i_1409286208, 1), 0, (s_1409286203).length - 1)];
    F.line = 437;
    i_1409286208 = addInt(i_1409286208, 2);
    }
    else {
    if (((i_1409286208 < (s_1409286203).length) && (ConstSet3[s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)]] != undefined))) {
    F.line = 439;
    result_1409286206.align = s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)];
    F.line = 440;
    i_1409286208 = addInt(i_1409286208, 1);
    }
    }
    if (((i_1409286208 < (s_1409286203).length) && (ConstSet4[s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)]] != undefined))) {
    F.line = 443;
    result_1409286206.sign = s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)];
    F.line = 444;
    i_1409286208 = addInt(i_1409286208, 1);
    }
    
    if (((i_1409286208 < (s_1409286203).length) && (s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)] == 35))) {
    F.line = 447;
    result_1409286206.alternateForm = true;
    F.line = 448;
    i_1409286208 = addInt(i_1409286208, 1);
    }
    
      if (!((addInt(i_1409286208, 1) < (s_1409286203).length) && (s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet5[s_1409286203[chckIndx(addInt(i_1409286208, 1), 0, (s_1409286203).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 451;
    result_1409286206.padWithZero = true;
    F.line = 452;
    i_1409286208 = addInt(i_1409286208, 1);
    }
    
    F.line = 454;
    var parsedLength_1409286245 = parseSaturatedNatural_654311740(s_1409286203, result_1409286206, "minimumWidth", i_1409286208);
    F.line = 455;
    i_1409286208 = addInt(i_1409286208, parsedLength_1409286245);
    if (((i_1409286208 < (s_1409286203).length) && (s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)] == 46))) {
    F.line = 457;
    i_1409286208 = addInt(i_1409286208, 1);
    F.line = 458;
    var parsedLengthB_1409286254 = parseSaturatedNatural_654311740(s_1409286203, result_1409286206, "precision", i_1409286208);
    F.line = 459;
    i_1409286208 = addInt(i_1409286208, parsedLengthB_1409286254);
    }
    else {
      F.line = 461;
      result_1409286206.precision = -1;
    }
    
      if (!(i_1409286208 < (s_1409286203).length)) Temporary2 = false; else {        Temporary2 = (ConstSet8[s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)]] != undefined);      }    if (Temporary2) {
    F.line = 464;
    result_1409286206.typ = s_1409286203[chckIndx(i_1409286208, 0, (s_1409286203).length - 1)];
    F.line = 465;
    i_1409286208 = addInt(i_1409286208, 1);
    }
    
    F.line = 466;
    result_1409286206.endPosition = i_1409286208;
      if (!!((i_1409286208 == (s_1409286203).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_1409286205);      }    if (Temporary3) {
    F.line = 468;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_838864026(s_1409286203, HEX2EHEX2E_805306448(i_1409286208, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_1409286206;

}

function nucruneLen(s_838860810) {
  var result_838860811 = 0;

  var F = {procname: "unicode.runeLen", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 42;
    result_838860811 = 0;
    F.line = 43;
    var i_838860812 = 0;
    Label1: do {
      F.line = 44;
        Label2: while (true) {
        if (!(i_838860812 < (s_838860810).length)) break Label2;
          if ((s_838860810[chckIndx(i_838860812, 0, (s_838860810).length - 1)] <= 127)) {
          F.line = 45;
          i_838860812 = addInt(i_838860812, 1);
          }
          else {
          if (((s_838860810[chckIndx(i_838860812, 0, (s_838860810).length - 1)] >>> 5) == 6)) {
          F.line = 46;
          i_838860812 = addInt(i_838860812, 2);
          }
          else {
          if (((s_838860810[chckIndx(i_838860812, 0, (s_838860810).length - 1)] >>> 4) == 14)) {
          F.line = 47;
          i_838860812 = addInt(i_838860812, 3);
          }
          else {
          if (((s_838860810[chckIndx(i_838860812, 0, (s_838860810).length - 1)] >>> 3) == 30)) {
          F.line = 48;
          i_838860812 = addInt(i_838860812, 4);
          }
          else {
          if (((s_838860810[chckIndx(i_838860812, 0, (s_838860810).length - 1)] >>> 2) == 62)) {
          F.line = 49;
          i_838860812 = addInt(i_838860812, 5);
          }
          else {
          if (((s_838860810[chckIndx(i_838860812, 0, (s_838860810).length - 1)] >>> 1) == 126)) {
          F.line = 50;
          i_838860812 = addInt(i_838860812, 6);
          }
          else {
            F.line = 51;
          i_838860812 = addInt(i_838860812, 1);
          }
          }}}}}
          F.line = 52;
          result_838860811 = addInt(result_838860811, 1);
        }
    } while (false);
  framePtr = F.prev;

  return result_838860811;

}

function runeLenAt_838860865(s_838860866, i_838860867) {
  var result_838860868 = 0;

  var F = {procname: "unicode.runeLenAt", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    if ((s_838860866[chckIndx(i_838860867, 0, (s_838860866).length - 1)] <= 127)) {
    F.line = 64;
    result_838860868 = 1;
    }
    else {
    if (((s_838860866[chckIndx(i_838860867, 0, (s_838860866).length - 1)] >>> 5) == 6)) {
    F.line = 65;
    result_838860868 = 2;
    }
    else {
    if (((s_838860866[chckIndx(i_838860867, 0, (s_838860866).length - 1)] >>> 4) == 14)) {
    F.line = 66;
    result_838860868 = 3;
    }
    else {
    if (((s_838860866[chckIndx(i_838860867, 0, (s_838860866).length - 1)] >>> 3) == 30)) {
    F.line = 67;
    result_838860868 = 4;
    }
    else {
    if (((s_838860866[chckIndx(i_838860867, 0, (s_838860866).length - 1)] >>> 2) == 62)) {
    F.line = 68;
    result_838860868 = 5;
    }
    else {
    if (((s_838860866[chckIndx(i_838860867, 0, (s_838860866).length - 1)] >>> 1) == 126)) {
    F.line = 69;
    result_838860868 = 6;
    }
    else {
      F.line = 70;
      result_838860868 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_838860868;

}

function runeOffset_838861437(s_838861438, pos_838861439, start_838861440) {
  var result_838861441 = 0;

  var F = {procname: "unicode.runeOffset", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 321;
    var i_838861442 = 0;
    F.line = 322;
    var o_838861443 = start_838861440;
    Label1: do {
      F.line = 323;
        Label2: while (true) {
        if (!(i_838861442 < pos_838861439)) break Label2;
          F.line = 324;
          o_838861443 = addInt(o_838861443, chckRange(runeLenAt_838860865(s_838861438, o_838861443), 0, 2147483647));
          if (((s_838861438).length <= o_838861443)) {
          F.line = 326;
          result_838861441 = -1;
          break BeforeRet;
          }
          
          F.line = 327;
          i_838861442 = addInt(i_838861442, 1);
        }
    } while (false);
    F.line = 328;
    result_838861441 = o_838861443;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_838861441;

}

function validateUtf8_838861077(s_838861078) {
            var Temporary3;
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;

  var result_838861079 = 0;

  var F = {procname: "unicode.validateUtf8", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 174;
    var i_838861080 = 0;
    F.line = 175;
    var L_838861081 = (s_838861078).length;
    Label1: do {
      F.line = 176;
        Label2: while (true) {
        if (!(i_838861080 < L_838861081)) break Label2;
          if ((s_838861078[chckIndx(i_838861080, 0, (s_838861078).length - 1)] <= 127)) {
          F.line = 178;
          i_838861080 = addInt(i_838861080, 1);
          }
          else {
          if (((s_838861078[chckIndx(i_838861080, 0, (s_838861078).length - 1)] >>> 5) == 6)) {
          if ((s_838861078[chckIndx(i_838861080, 0, (s_838861078).length - 1)] < 194)) {
          F.line = 180;
          result_838861079 = i_838861080;
          break BeforeRet;
          }
          
            if (!(addInt(i_838861080, 1) < L_838861081)) Temporary3 = false; else {              Temporary3 = ((s_838861078[chckIndx(addInt(i_838861080, 1), 0, (s_838861078).length - 1)] >>> 6) == 2);            }          if (Temporary3) {
          F.line = 181;
          i_838861080 = addInt(i_838861080, 2);
          }
          else {
            F.line = 182;
            result_838861079 = i_838861080;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_838861078[chckIndx(i_838861080, 0, (s_838861078).length - 1)] >>> 4) == 14)) {
            if (!(addInt(i_838861080, 2) < L_838861081)) Temporary5 = false; else {              Temporary5 = ((s_838861078[chckIndx(addInt(i_838861080, 1), 0, (s_838861078).length - 1)] >>> 6) == 2);            }            if (!Temporary5) Temporary4 = false; else {              Temporary4 = ((s_838861078[chckIndx(addInt(i_838861080, 2), 0, (s_838861078).length - 1)] >>> 6) == 2);            }          if (Temporary4) {
          F.line = 185;
          i_838861080 = addInt(i_838861080, 3);
          }
          else {
            F.line = 186;
            result_838861079 = i_838861080;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_838861078[chckIndx(i_838861080, 0, (s_838861078).length - 1)] >>> 3) == 30)) {
            if (!(addInt(i_838861080, 3) < L_838861081)) Temporary8 = false; else {              Temporary8 = ((s_838861078[chckIndx(addInt(i_838861080, 1), 0, (s_838861078).length - 1)] >>> 6) == 2);            }            if (!Temporary8) Temporary7 = false; else {              Temporary7 = ((s_838861078[chckIndx(addInt(i_838861080, 2), 0, (s_838861078).length - 1)] >>> 6) == 2);            }            if (!Temporary7) Temporary6 = false; else {              Temporary6 = ((s_838861078[chckIndx(addInt(i_838861080, 3), 0, (s_838861078).length - 1)] >>> 6) == 2);            }          if (Temporary6) {
          F.line = 191;
          i_838861080 = addInt(i_838861080, 4);
          }
          else {
            F.line = 192;
            result_838861079 = i_838861080;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 194;
            result_838861079 = i_838861080;
            break BeforeRet;
          }
          }}}
        }
    } while (false);
    F.line = 195;
    result_838861079 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_838861079;

}

function nsuRepeatChar(c_637535227, count_637535228) {
  var result_637535229 = [];

  var F = {procname: "strutils.repeat", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1263;
    result_637535229 = nimCopy(null, mnewString(count_637535228), NTI33554439);
    Label1: do {
      F.line = 1264;
      var i_637535234 = 0;
      F.line = 75;
      var colontmp__1174405168 = 0;
      F.line = 1264;
      colontmp__1174405168 = subInt(count_637535228, 1);
      F.line = 90;
      var res_1174405169 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_1174405169 <= colontmp__1174405168)) break Label3;
            F.line = 1264;
            i_637535234 = res_1174405169;
            F.line = 1264;
            result_637535229[chckIndx(i_637535234, 0, (result_637535229).length - 1)] = c_637535227;
            F.line = 93;
            res_1174405169 = addInt(res_1174405169, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_637535229;

}

function alignString_1409286164(s_1409286165, minimumWidth_1409286166, align_1409286167, fill_1409286168) {
      var Temporary1;

  var result_1409286169 = [];

  var F = {procname: "strformat.alignString", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    if ((minimumWidth_1409286166 == 0)) {
    F.line = 331;
    result_1409286169 = nimCopy(null, s_1409286165, NTI33554439);
    }
    else {
      F.line = 333;
      if ((validateUtf8_838861077(s_1409286165) == -1)) {
      Temporary1 = nucruneLen(s_1409286165);
      }
      else {
      Temporary1 = (s_1409286165).length;
      }
      
      var sRuneLen_1409286170 = Temporary1;
      F.line = 334;
      var toFill_1409286171 = subInt(minimumWidth_1409286166, sRuneLen_1409286170);
      if ((toFill_1409286171 <= 0)) {
      F.line = 336;
      result_1409286169 = nimCopy(null, s_1409286165, NTI33554439);
      }
      else {
      if (((align_1409286167 == 60) || (align_1409286167 == 0))) {
      F.line = 338;
      result_1409286169 = nimCopy(null, (s_1409286165 || []).concat(nsuRepeatChar(fill_1409286168, chckRange(toFill_1409286171, 0, 2147483647)) || []), NTI33554439);
      }
      else {
      if ((align_1409286167 == 94)) {
      F.line = 340;
      var half_1409286172 = divInt(toFill_1409286171, 2);
      F.line = 341;
      result_1409286169 = nimCopy(null, (nsuRepeatChar(fill_1409286168, chckRange(half_1409286172, 0, 2147483647)) || []).concat(s_1409286165 || [],nsuRepeatChar(fill_1409286168, chckRange(subInt(toFill_1409286171, half_1409286172), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        F.line = 343;
        result_1409286169 = nimCopy(null, (nsuRepeatChar(fill_1409286168, chckRange(toFill_1409286171, 0, 2147483647)) || []).concat(s_1409286165 || []), NTI33554439);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_1409286169;

}

function formatValue_1409286306(result_1409286307, result_1409286307_Idx, value_1409286308, specifier_1409286309) {
  var F = {procname: "strformat.formatValue", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strformat.nim", line: 0};
  framePtr = F;
    F.line = 553;
    var spec_1409286310 = parseStandardFormatSpecifier_1409286202(specifier_1409286309, 0, false);
    F.line = 554;
    var value_1409286311 = nimCopy(null, value_1409286308, NTI33554439);
    F.line = 555;
    switch (spec_1409286310.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 558;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_1409286310.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_1409286310.precision == -1))) {
    if ((spec_1409286310.precision < nucruneLen(value_1409286311))) {
    F.line = 563;
    (value_1409286311.length = chckRange(runeOffset_838861437(value_1409286311, chckRange(spec_1409286310.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 564;
    result_1409286307[result_1409286307_Idx].push.apply(result_1409286307[result_1409286307_Idx], alignString_1409286164(value_1409286311, spec_1409286310.minimumWidth, spec_1409286310.align, spec_1409286310.fill));;
  framePtr = F.prev;

  
}

function canOpt_1258291814(litOpt_1258291815) {
  var result_1258291816 = false;

  var F = {procname: "litopt.canOpt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 230;
    result_1258291816 = (0 < (litOpt_1258291815.nfa.s).length);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1258291816;

}

function new_1241514763() {
  var result_1241514766 = null;

  var F = {procname: "new.new", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 903;
    var r_1241514768 = null;
    F.line = 906;
    r_1241514768 = ({sx: [], ss: [], si: 0});
    F.line = 907;
    result_1241514766 = r_1241514768;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1241514766;

}

function newSeq_1241514794(len_1241514796) {
  var result_1241514797 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_1241514797 = new Array(len_1241514796); for (var i = 0 ; i < len_1241514796 ; ++i) { result_1241514797[i] = {Field0: 0, Field1: 0, Field2: ({a: 0, b: 0})}; }  framePtr = F.prev;

  return result_1241514797;

}

function newSeq_1090519430(len_1090519432) {
  var result_1090519433 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_1090519433 = new Array(len_1090519432); for (var i = 0 ; i < len_1090519432 ; ++i) { result_1090519433[i] = 0; }  framePtr = F.prev;

  return result_1090519433;

}

function newSubmatches_1241514760(size_1241514761) {
  var result_1241514762 = null;

  var F = {procname: "nfatype.newSubmatches", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    F.line = 103;
    result_1241514762 = new_1241514763();
    F.line = 104;
    result_1241514762.sx = nimCopy(null, newSeq_1241514794(8), NTI1241514531);
    F.line = 105;
    result_1241514762.ss = nimCopy(null, newSeq_1090519430(chckRange(size_1241514761, 0, 2147483647)), NTI1090519307);
    F.line = 106;
    result_1241514762.si = 0;
  framePtr = F.prev;

  return result_1241514762;

}

function contains_1174405250(s_1174405254, value_1174405255) {
  var result_1174405256 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 823;
    result_1174405256 = ((s_1174405254.a <= value_1174405255) && (value_1174405255 <= s_1174405254.b));
  framePtr = F.prev;

  return result_1174405256;

}

function HEX2EHEX2E_838861651(a_838861654, b_838861655) {
  var result_838861656 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 512;
    result_838861656 = nimCopy(result_838861656, {a: a_838861654, b: b_838861655}, NTI687865917);
  framePtr = F.prev;

  return result_838861656;

}

function bwRuneAt_1140850730(s_1140850731, n_1140850732) {
          var Temporary3;

  var result_1140850733 = 0;

  var F = {procname: "common.bwRuneAt", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
  framePtr = F;
    if (!((0 <= n_1140850732))) {
    F.line = 40;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim(40, 12) `n >= 0` "));
    }
    
    if (!((n_1140850732 <= subInt((s_1140850731).length, 1)))) {
    F.line = 41;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim(41, 12) `n <= s.len - 1` "));
    }
    
    F.line = 42;
    var n_1140850744 = n_1140850732;
    Label1: do {
      F.line = 43;
        Label2: while (true) {
          if (!(0 < n_1140850744)) Temporary3 = false; else {            Temporary3 = ((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] >> 6) == 2);          }        if (!Temporary3) break Label2;
          F.line = 44;
          n_1140850744 = subInt(n_1140850744, 1);
        }
    } while (false);
    if ((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] <= 127)) {
    F.line = 81;
    result_1140850733 = chckRange(s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)], -2147483648, 2147483647);
    }
    else {
    if (((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] >>> 5) == 6)) {
    if ((n_1140850744 <= subInt((s_1140850731).length, 2))) {
    F.line = 86;
    result_1140850733 = chckRange((((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] & 31) << 6) | (s_1140850731[chckIndx(addInt(n_1140850744, 1), 0, (s_1140850731).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 90;
      result_1140850733 = 65533;
    }
    
    }
    else {
    if (((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] >>> 4) == 14)) {
    if ((n_1140850744 <= subInt((s_1140850731).length, 3))) {
    F.line = 96;
    result_1140850733 = chckRange(((((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] & 15) << 12) | ((s_1140850731[chckIndx(addInt(n_1140850744, 1), 0, (s_1140850731).length - 1)] & 63) << 6)) | (s_1140850731[chckIndx(addInt(n_1140850744, 2), 0, (s_1140850731).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 101;
      result_1140850733 = 65533;
    }
    
    }
    else {
    if (((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] >>> 3) == 30)) {
    if ((n_1140850744 <= subInt((s_1140850731).length, 4))) {
    F.line = 108;
    result_1140850733 = chckRange((((((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] & 7) << 18) | ((s_1140850731[chckIndx(addInt(n_1140850744, 1), 0, (s_1140850731).length - 1)] & 63) << 12)) | ((s_1140850731[chckIndx(addInt(n_1140850744, 2), 0, (s_1140850731).length - 1)] & 63) << 6)) | (s_1140850731[chckIndx(addInt(n_1140850744, 3), 0, (s_1140850731).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 114;
      result_1140850733 = 65533;
    }
    
    }
    else {
    if (((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] >>> 2) == 62)) {
    if ((n_1140850744 <= subInt((s_1140850731).length, 5))) {
    F.line = 122;
    result_1140850733 = chckRange(((((((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] & 3) << 24) | ((s_1140850731[chckIndx(addInt(n_1140850744, 1), 0, (s_1140850731).length - 1)] & 63) << 18)) | ((s_1140850731[chckIndx(addInt(n_1140850744, 2), 0, (s_1140850731).length - 1)] & 63) << 12)) | ((s_1140850731[chckIndx(addInt(n_1140850744, 3), 0, (s_1140850731).length - 1)] & 63) << 6)) | (s_1140850731[chckIndx(addInt(n_1140850744, 4), 0, (s_1140850731).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 129;
      result_1140850733 = 65533;
    }
    
    }
    else {
    if (((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] >>> 1) == 126)) {
    if ((n_1140850744 <= subInt((s_1140850731).length, 6))) {
    F.line = 138;
    result_1140850733 = chckRange((((((((s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)] & 1) << 30) | ((s_1140850731[chckIndx(addInt(n_1140850744, 1), 0, (s_1140850731).length - 1)] & 63) << 24)) | ((s_1140850731[chckIndx(addInt(n_1140850744, 2), 0, (s_1140850731).length - 1)] & 63) << 18)) | ((s_1140850731[chckIndx(addInt(n_1140850744, 3), 0, (s_1140850731).length - 1)] & 63) << 12)) | ((s_1140850731[chckIndx(addInt(n_1140850744, 4), 0, (s_1140850731).length - 1)] & 63) << 6)) | (s_1140850731[chckIndx(addInt(n_1140850744, 5), 0, (s_1140850731).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 146;
      result_1140850733 = 65533;
    }
    
    }
    else {
      F.line = 149;
      result_1140850733 = chckRange(s_1140850731[chckIndx(n_1140850744, 0, (s_1140850731).length - 1)], -2147483648, 2147483647);
    }
    }}}}}
  framePtr = F.prev;

  return result_1140850733;

}

function clear_1241514874(sm_1241514875, sm_1241514875_Idx) {
  var F = {procname: "nfatype.clear", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    F.line = 131;
    sm_1241514875[sm_1241514875_Idx].si = 0;
  framePtr = F.prev;

  
}

function hasState_1241514836(sm_1241514837, n_1241514838) {
    var Temporary1;

  var result_1241514839 = false;

  var F = {procname: "nfatype.hasState", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    F.line = 116;
    if (!(sm_1241514837.ss[chckIndx(n_1241514838, 0, (sm_1241514837.ss).length - 1)] < sm_1241514837.si)) Temporary1 = false; else {      Temporary1 = (sm_1241514837.sx[chckIndx(sm_1241514837.ss[chckIndx(n_1241514838, 0, (sm_1241514837.ss).length - 1)], 0, (sm_1241514837.sx).length - 1)].Field0 == n_1241514838);    }    result_1241514839 = Temporary1;
  framePtr = F.prev;

  return result_1241514839;

}

function add_1241514840(sm_1241514841, sm_1241514841_Idx, item_1241514842) {
    var Temporary1;

  var F = {procname: "nfatype.add", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    if (!(!(hasState_1241514836(sm_1241514841[sm_1241514841_Idx], item_1241514842.Field0)))) {
    F.line = 119;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim(119, 9) `not sm.hasState(item.ni)` "));
    }
    
    if (!((((sm_1241514841[sm_1241514841_Idx].si) | 0) <= (sm_1241514841[sm_1241514841_Idx].sx).length))) {
    F.line = 120;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim(120, 10) `sm.si <= sm.sx.len` "));
    }
    
    if ((((sm_1241514841[sm_1241514841_Idx].si) | 0) == (sm_1241514841[sm_1241514841_Idx].sx).length)) {
    F.line = 122;
    if (sm_1241514841[sm_1241514841_Idx].sx.length < (Temporary1 = chckRange(mulInt((sm_1241514841[sm_1241514841_Idx].sx).length, 2), 0, 2147483647), Temporary1)) { for (var i = sm_1241514841[sm_1241514841_Idx].sx.length ; i < Temporary1 ; ++i) sm_1241514841[sm_1241514841_Idx].sx.push({Field0: 0, Field1: 0, Field2: ({a: 0, b: 0})}); }
               else { sm_1241514841[sm_1241514841_Idx].sx.length = Temporary1; };
    }
    
    F.line = 123;
    sm_1241514841[sm_1241514841_Idx].sx[chckIndx(sm_1241514841[sm_1241514841_Idx].si, 0, (sm_1241514841[sm_1241514841_Idx].sx).length - 1)] = nimCopy(sm_1241514841[sm_1241514841_Idx].sx[chckIndx(sm_1241514841[sm_1241514841_Idx].si, 0, (sm_1241514841[sm_1241514841_Idx].sx).length - 1)], item_1241514842, NTI1241514495);
    F.line = 124;
    sm_1241514841[sm_1241514841_Idx].ss[chckIndx(item_1241514842.Field0, 0, (sm_1241514841[sm_1241514841_Idx].ss).length - 1)] = sm_1241514841[sm_1241514841_Idx].si;
    F.line = 125;
    sm_1241514841[sm_1241514841_Idx].si = addInt(sm_1241514841[sm_1241514841_Idx].si, 1);
  framePtr = F.prev;

  
}

function len_1241514871(sm_1241514872) {
  var result_1241514873 = 0;

  var F = {procname: "nfatype.len", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    F.line = 128;
    result_1241514873 = ((sm_1241514872.si) | 0);
  framePtr = F.prev;

  return result_1241514873;

}

function HEX3DHEX3D_838861719(a_838861720, b_838861721) {
  var result_838861722 = false;

  var F = {procname: "unicode.==", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 452;
    result_838861722 = (((a_838861720) | 0) == ((b_838861721) | 0));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_838861722;

}

function contains_1291845676(ut_1291845677, utm_1291845678) {
  var result_1291845679 = false;

  var F = {procname: "types.contains", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
  framePtr = F;
    F.line = 84;
    result_1291845679 = !(((ut_1291845677 & utm_1291845678) == 0));
  framePtr = F.prev;

  return result_1291845679;

}

function unicodeTypes_1291845635(cp_1291845636) {
  var result_1291845637 = 0;

  var F = {procname: "types.unicodeTypes", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim", line: 0};
  framePtr = F;
    if (!((((cp_1291845636) | 0) <= 1114111))) {
    F.line = 23;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/types.nim(23, 10) `cp.int <= 0x0010FFFF` "));
    }
    
    F.line = 25;
    var blockOffset_1291845647 = mulInt(((typesOffsets_1308622858[chckIndx(divInt(((cp_1291845636) | 0), 64), 0, (typesOffsets_1308622858).length - 1)]) | 0), 64);
    F.line = 26;
    var idx_1291845648 = typesIndices_1308622859[chckIndx(addInt(blockOffset_1291845647, modInt(((cp_1291845636) | 0), 64)), 0, (typesIndices_1308622859).length - 1)];
    F.line = 27;
    result_1291845637 = ((typesData_1308622860[chckIndx(idx_1291845648, 0, (typesData_1308622860).length - 1)]) | 0);
  framePtr = F.prev;

  return result_1291845637;

}

function isWord_1275068423(r_1275068424) {
  var result_1275068425 = false;

  var F = {procname: "nodematch.isWord", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 11;
    result_1275068425 = contains_1291845676(unicodeTypes_1291845635(r_1275068424), 128);
  framePtr = F.prev;

  return result_1275068425;

}

function isDecimal_1275068426(r_1275068427) {
  var result_1275068428 = false;

  var F = {procname: "nodematch.isDecimal", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 14;
    result_1275068428 = contains_1291845676(unicodeTypes_1291845635(r_1275068427), 1);
  framePtr = F.prev;

  return result_1275068428;

}

function isWhiteSpace_1275068504(r_1275068505) {
  var result_1275068506 = false;

  var F = {procname: "nodematch.isWhiteSpace", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 77;
    result_1275068506 = contains_1291845676(unicodeTypes_1291845635(r_1275068505), 64);
  framePtr = F.prev;

  return result_1275068506;

}

function hasJsBigInt_754974763() {
  var result_754974764 = false;

    result_754974764 = typeof BigInt != 'undefined'

  return result_754974764;

}

function hiXorLoJs_973078613(a_973078614, b_973078615) {
  var result_973078616 = 0n;

  var F = {procname: "hashes.hiXorLoJs", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 136;
    var prod_973078617 = (a_973078614 * b_973078615);
    F.line = 137;
    var mask_973078618 = BigInt("0xffffffffffffffff");
    F.line = 138;
    result_973078616 = ((prod_973078617 >> BigInt("64")) ^ (prod_973078617 & mask_973078618));
  framePtr = F.prev;

  return result_973078616;

}

function hashWangYi1_973078706(x_973078708) {
  var result_973078709 = 0;

  var F = {procname: "hashWangYi1.hashWangYi1", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    if (hasJsBigInt_754974763()) {
    F.line = 178;
    F.line = 142;
    var P0HEX60gensym6_973078728 = BigInt("0xa0761d6478bd642f");
    F.line = 143;
    var P1HEX60gensym6_973078729 = BigInt("0xe7037ed1a0b428db");
    F.line = 144;
    var P58HEX60gensym6_973078730 = BigInt("0xeb44accab455d16d");
    F.line = 145;
    var resHEX60gensym6_973078731 = hiXorLoJs_973078613(hiXorLoJs_973078613(P0HEX60gensym6_973078728, (BigInt(x_973078708) ^ P1HEX60gensym6_973078729)), P58HEX60gensym6_973078730);
    result_973078709 = Number((() => { const i = resHEX60gensym6_973078731, b = 32; return BigInt.asIntN(b, i) })());
    }
    else {
      F.line = 180;
      result_973078709 = (x_973078708 & 4294967295);
    }
    
  framePtr = F.prev;

  return result_973078709;

}

function hash_1174405839(x_1174405841) {
  var result_1174405842 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 210;
    result_1174405842 = hashWangYi1_973078706(x_1174405841);
  framePtr = F.prev;

  return result_1174405842;

}

function nextTry_956301353(h_956301354, maxHash_956301355) {
  var result_956301356 = 0;

  var F = {procname: "sets.nextTry", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 25;
    result_956301356 = (addInt(h_956301354, 1) & maxHash_956301355);
  framePtr = F.prev;

  return result_956301356;

}

function rawGet_1174405832(t_1174405835, key_1174405836, hc_1174405837, hc_1174405837_Idx) {
            var Temporary3;

  var result_1174405838 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 64;
    hc_1174405837[hc_1174405837_Idx] = hash_1174405839(key_1174405836);
    if ((hc_1174405837[hc_1174405837_Idx] == 0)) {
    F.line = 66;
    hc_1174405837[hc_1174405837_Idx] = 314159265;
    }
    
    if (((t_1174405835.data).length == 0)) {
    F.line = 48;
    result_1174405838 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_1174405871 = (hc_1174405837[hc_1174405837_Idx] & (t_1174405835.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_956301350(t_1174405835.data[chckIndx(h_1174405871, 0, (t_1174405835.data).length - 1)].Field0)) break Label2;
            if (!(t_1174405835.data[chckIndx(h_1174405871, 0, (t_1174405835.data).length - 1)].Field0 == hc_1174405837[hc_1174405837_Idx])) Temporary3 = false; else {              Temporary3 = HEX3DHEX3D_838861719(t_1174405835.data[chckIndx(h_1174405871, 0, (t_1174405835.data).length - 1)].Field1, key_1174405836);            }          if (Temporary3) {
          F.line = 56;
          result_1174405838 = h_1174405871;
          break BeforeRet;
          }
          
          F.line = 57;
          h_1174405871 = nextTry_956301353(h_1174405871, (t_1174405835.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_1174405838 = subInt(-1, h_1174405871);
  } while (false);
  framePtr = F.prev;

  return result_1174405838;

}

function contains_1275068568(s_1275068570, key_1275068571) {
  var result_1275068572 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 163;
    var hc_1275068573 = [0];
    F.line = 164;
    var index_1275068587 = rawGet_1174405832(s_1275068570, key_1275068571, hc_1275068573, 0);
    F.line = 165;
    result_1275068572 = (0 <= index_1275068587);
  framePtr = F.prev;

  return result_1275068572;

}

function HEX3CHEX3D_1140850722(x_1140850723, y_1140850724) {
  var result_1140850725 = false;

  var F = {procname: "common.<=", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
  framePtr = F;
    F.line = 33;
    result_1140850725 = (((x_1140850723) | 0) <= ((y_1140850724) | 0));
  framePtr = F.prev;

  return result_1140850725;

}

function contains_1275068497(s_1275068501, value_1275068502) {
  var result_1275068503 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 823;
    result_1275068503 = (HEX3CHEX3D_1140850722(s_1275068501.a, value_1275068502) && HEX3CHEX3D_1140850722(value_1275068502, s_1275068501.b));
  framePtr = F.prev;

  return result_1275068503;

}

function contains_1275068475(sr_1275068477, r_1275068478) {
  var result_1275068479 = false;

  var F = {procname: "nodematch.contains", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 70;
    result_1275068479 = false;
    Label1: do {
      F.line = 71;
      var sl_1275068483 = ({a: 0, b: 0});
      F.line = 235;
      var i_436212767 = 0;
      F.line = 236;
      var L_436212768 = (sr_1275068477).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_436212767 < L_436212768)) break Label3;
            F.line = 71;
            sl_1275068483 = sr_1275068477[chckIndx(i_436212767, 0, (sr_1275068477).length - 1)];
            F.line = 72;
            result_1275068479 = contains_1275068497(sl_1275068483, r_1275068478);
            if (result_1275068479) {
            F.line = 74;
            break Label1;
            }
            
            F.line = 239;
            i_436212767 = addInt(i_436212767, 1);
            if (!(((sr_1275068477).length == L_436212768))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1275068479;

}

function binarySearch_838861813(c_838861814, tab_838861815, len_838861816, stride_838861817) {
      var Temporary3;

  var result_838861818 = 0;

  var F = {procname: "unicode.binarySearch", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 458;
    var n_838861819 = len_838861816;
    F.line = 459;
    var t_838861820 = 0;
    Label1: do {
      F.line = 460;
        Label2: while (true) {
        if (!(1 < n_838861819)) break Label2;
          F.line = 461;
          var m_838861821 = divInt(n_838861819, 2);
          F.line = 462;
          var p_838861822 = addInt(t_838861820, mulInt(m_838861821, stride_838861817));
          if ((tab_838861815[chckIndx(p_838861822, 0, (tab_838861815).length - 1)] <= ((c_838861814) | 0))) {
          F.line = 464;
          t_838861820 = p_838861822;
          F.line = 465;
          n_838861819 = subInt(n_838861819, m_838861821);
          }
          else {
            F.line = 467;
            n_838861819 = m_838861821;
          }
          
        }
    } while (false);
      if (!!((n_838861819 == 0))) Temporary3 = false; else {        Temporary3 = (tab_838861815[chckIndx(t_838861820, 0, (tab_838861815).length - 1)] <= ((c_838861814) | 0));      }    if (Temporary3) {
    F.line = 469;
    result_838861818 = t_838861820;
    break BeforeRet;
    }
    
    F.line = 470;
    result_838861818 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_838861818;

}

function nuctoLower(c_838861824) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_838861825 = 0;

  var F = {procname: "unicode.toLower", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 481;
    var c_838861826 = c_838861824;
    F.line = 482;
    var p_838861835 = binarySearch_838861813(c_838861826, toLowerRanges_838861723, 45, 3);
      if (!(0 <= p_838861835)) Temporary2 = false; else {        Temporary2 = (toLowerRanges_838861723[chckIndx(p_838861835, 0, (toLowerRanges_838861723).length - 1)] <= ((c_838861826) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_838861826) | 0) <= toLowerRanges_838861723[chckIndx(addInt(p_838861835, 1), 0, (toLowerRanges_838861723).length - 1)]);      }    if (Temporary1) {
    F.line = 484;
    result_838861825 = ((subInt(addInt(((c_838861826) | 0), toLowerRanges_838861723[chckIndx(addInt(p_838861835, 2), 0, (toLowerRanges_838861723).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    F.line = 485;
    p_838861835 = binarySearch_838861813(c_838861826, toLowerSinglets_838861724, 610, 2);
      if (!(0 <= p_838861835)) Temporary3 = false; else {        Temporary3 = (((c_838861826) | 0) == toLowerSinglets_838861724[chckIndx(p_838861835, 0, (toLowerSinglets_838861724).length - 1)]);      }    if (Temporary3) {
    F.line = 487;
    result_838861825 = ((subInt(addInt(((c_838861826) | 0), toLowerSinglets_838861724[chckIndx(addInt(p_838861835, 1), 0, (toLowerSinglets_838861724).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    F.line = 488;
    result_838861825 = c_838861826;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_838861825;

}

function nuctoUpper(c_838861872) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_838861873 = 0;

  var F = {procname: "unicode.toUpper", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 499;
    var c_838861874 = c_838861872;
    F.line = 500;
    var p_838861883 = binarySearch_838861813(c_838861874, toUpperRanges_838861725, 46, 3);
      if (!(0 <= p_838861883)) Temporary2 = false; else {        Temporary2 = (toUpperRanges_838861725[chckIndx(p_838861883, 0, (toUpperRanges_838861725).length - 1)] <= ((c_838861874) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_838861874) | 0) <= toUpperRanges_838861725[chckIndx(addInt(p_838861883, 1), 0, (toUpperRanges_838861725).length - 1)]);      }    if (Temporary1) {
    F.line = 502;
    result_838861873 = ((subInt(addInt(((c_838861874) | 0), toUpperRanges_838861725[chckIndx(addInt(p_838861883, 2), 0, (toUpperRanges_838861725).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    F.line = 503;
    p_838861883 = binarySearch_838861813(c_838861874, toUpperSinglets_838861726, 624, 2);
      if (!(0 <= p_838861883)) Temporary3 = false; else {        Temporary3 = (((c_838861874) | 0) == toUpperSinglets_838861726[chckIndx(p_838861883, 0, (toUpperSinglets_838861726).length - 1)]);      }    if (Temporary3) {
    F.line = 505;
    result_838861873 = ((subInt(addInt(((c_838861874) | 0), toUpperSinglets_838861726[chckIndx(addInt(p_838861883, 1), 0, (toUpperSinglets_838861726).length - 1)]), 500)) | 0);
    break BeforeRet;
    }
    
    F.line = 506;
    result_838861873 = c_838861874;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_838861873;

}

function swapCase_1275068544(r_1275068545) {
  var result_1275068546 = 0;

  var F = {procname: "nodematch.swapCase", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 105;
    result_1275068546 = nuctoLower(r_1275068545);
    if (!(HEX3DHEX3D_838861719(result_1275068546, r_1275068545))) {
    F.line = 107;
    break BeforeRet;
    }
    
    F.line = 108;
    result_1275068546 = nuctoUpper(r_1275068545);
  } while (false);
  framePtr = F.prev;

  return result_1275068546;

}

function isWordAscii_1275068429(r_1275068430) {
    var Temporary1;

  var result_1275068431 = false;

  var F = {procname: "nodematch.isWordAscii", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 17;
    F.line = 19;
    switch (((r_1275068430) | 0)) {
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 95:
      Temporary1 = true;
      break;
    default: 
      Temporary1 = false;
      break;
    }
    result_1275068431 = Temporary1;
  framePtr = F.prev;

  return result_1275068431;

}

function isDigitAscii_1275068528(r_1275068529) {
    var Temporary1;

  var result_1275068530 = false;

  var F = {procname: "nodematch.isDigitAscii", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 92;
    F.line = 92;
    switch (((r_1275068529) | 0)) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      Temporary1 = true;
      break;
    default: 
      Temporary1 = false;
      break;
    }
    result_1275068530 = Temporary1;
  framePtr = F.prev;

  return result_1275068530;

}

function isWhiteSpaceAscii_1275068507(r_1275068508) {
    var Temporary1;

  var result_1275068509 = false;

  var F = {procname: "nodematch.isWhiteSpaceAscii", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 80;
    F.line = 80;
    switch (((r_1275068508) | 0)) {
    case 32:
    case 9:
    case 10:
    case 13:
    case 12:
    case 11:
      Temporary1 = true;
      break;
    default: 
      Temporary1 = false;
      break;
    }
    result_1275068509 = Temporary1;
  framePtr = F.prev;

  return result_1275068509;

}

function contains_1107296260(a_1107296261, b_1107296262) {
  var result_1107296263 = false;

  var F = {procname: "properties.contains", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    F.line = 54;
    result_1107296263 = !(((((b_1107296262) | 0) & ((a_1107296261) | 0)) == 0));
  framePtr = F.prev;

  return result_1107296263;

}

function unicodeCategory_1107296389(props_1107296390) {
  var result_1107296391 = 0;

  var F = {procname: "properties.unicodeCategory", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    F.line = 239;
    result_1107296391 = props_1107296390[chckIndx(0, 0, (props_1107296390).length - 1)];
  framePtr = F.prev;

  return result_1107296391;

}

function unicodeCategory_1107296392(cp_1107296393) {
  var result_1107296394 = 0;

  var F = {procname: "properties.unicodeCategory", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    F.line = 242;
    result_1107296394 = unicodeCategory_1107296389(properties_1107296339(cp_1107296393));
  framePtr = F.prev;

  return result_1107296394;

}

function isAnyAscii_1275068537(r_1275068538) {
    var Temporary1;

  var result_1275068539 = false;

  var F = {procname: "nodematch.isAnyAscii", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 99;
    if (!(((r_1275068538) | 0) <= 127)) Temporary1 = false; else {      Temporary1 = !(HEX3DHEX3D_838861719(r_1275068538, 10));    }    result_1275068539 = Temporary1;
  framePtr = F.prev;

  return result_1275068539;

}

function match_1275068547(n_1275068548, r_1275068549) {
    var Temporary1;

  var result_1275068550 = false;

  var F = {procname: "nodematch.match", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 111;
    if ((((r_1275068549) | 0) < 0)) {
    F.line = 115;
    result_1275068550 = (n_1275068548.kind == 46);
    break BeforeRet;
    }
    
    F.line = 116;
    switch (n_1275068548.kind) {
    case 46:
      Temporary1 = HEX3DHEX3D_838861719(r_1275068549, -1);
      break;
    case 19:
      Temporary1 = isWord_1275068423(r_1275068549);
      break;
    case 23:
      Temporary1 = !(isWord_1275068423(r_1275068549));
      break;
    case 20:
      Temporary1 = isDecimal_1275068426(r_1275068549);
      break;
    case 24:
      Temporary1 = !(isDecimal_1275068426(r_1275068549));
      break;
    case 21:
      Temporary1 = isWhiteSpace_1275068504(r_1275068549);
      break;
    case 25:
      Temporary1 = !(isWhiteSpace_1275068504(r_1275068549));
      break;
    case 39:
    case 40:
      F.line = 132;
      var matches_1275068588 = (contains_1275068568(n_1275068548.cps, r_1275068549) || contains_1275068475(n_1275068548.ranges, r_1275068549));
      if (!(matches_1275068588)) {
      Label2: do {
        F.line = 136;
        var nn_1275068592 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
        F.line = 235;
        var i_436212762 = 0;
        F.line = 236;
        var L_436212763 = (n_1275068548.shorthands).length;
        Label3: do {
          F.line = 237;
            Label4: while (true) {
            if (!(i_436212762 < L_436212763)) break Label4;
              F.line = 136;
              nn_1275068592 = n_1275068548.shorthands[chckIndx(i_436212762, 0, (n_1275068548.shorthands).length - 1)];
              F.line = 137;
              matches_1275068588 = match_1275068547(nn_1275068592, r_1275068549);
              if (matches_1275068588) {
              F.line = 138;
              break Label2;
              }
              
              F.line = 239;
              i_436212762 = addInt(i_436212762, 1);
              if (!(((n_1275068548.shorthands).length == L_436212763))) {
              F.line = 240;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      }
      
      Temporary1 = ((matches_1275068588 && (n_1275068548.kind == 39)) || (!(matches_1275068588) && (n_1275068548.kind == 40)));
      break;
    case 27:
      Temporary1 = !(HEX3DHEX3D_838861719(r_1275068549, 10));
      break;
    case 28:
      Temporary1 = true;
      break;
    case 1:
      Temporary1 = (HEX3DHEX3D_838861719(r_1275068549, n_1275068548.cp) || HEX3DHEX3D_838861719(r_1275068549, swapCase_1275068544(n_1275068548.cp)));
      break;
    case 31:
      Temporary1 = isWordAscii_1275068429(r_1275068549);
      break;
    case 32:
      Temporary1 = isDigitAscii_1275068528(r_1275068549);
      break;
    case 33:
      Temporary1 = isWhiteSpaceAscii_1275068507(r_1275068549);
      break;
    case 22:
      Temporary1 = contains_1107296260(n_1275068548.cc, unicodeCategory_1107296392(r_1275068549));
      break;
    case 34:
      Temporary1 = !(isWordAscii_1275068429(r_1275068549));
      break;
    case 35:
      Temporary1 = !(isDigitAscii_1275068528(r_1275068549));
      break;
    case 36:
      Temporary1 = !(isWhiteSpaceAscii_1275068507(r_1275068549));
      break;
    case 26:
      Temporary1 = !(contains_1107296260(n_1275068548.cc, unicodeCategory_1107296392(r_1275068549)));
      break;
    case 37:
      Temporary1 = isAnyAscii_1275068537(r_1275068549);
      break;
    case 38:
      Temporary1 = (isAnyAscii_1275068537(r_1275068549) || HEX3DHEX3D_838861719(r_1275068549, 10));
      break;
    default: 
      if (!((n_1275068548.kind == 0))) {
      F.line = 168;
      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim(168, 12) `n.kind == reChar` "));
      }
      
      Temporary1 = HEX3DHEX3D_838861719(n_1275068548.cp, r_1275068549);
      break;
    }
    result_1275068550 = Temporary1;
  } while (false);
  framePtr = F.prev;

  return result_1275068550;

}

function isWordBoundary_1275068457(r_1275068458, nxt_1275068459) {
    var Temporary1;
    var Temporary2;

  var result_1275068460 = false;

  var F = {procname: "nodematch.isWordBoundary", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 33;
    if (!(-1 < ((r_1275068458) | 0))) Temporary1 = false; else {      Temporary1 = isWord_1275068423(r_1275068458);    }    if (!(-1 < ((nxt_1275068459) | 0))) Temporary2 = false; else {      Temporary2 = isWord_1275068423(nxt_1275068459);    }    result_1275068460 = (Temporary1 != Temporary2);
  framePtr = F.prev;

  return result_1275068460;

}

function isWordBoundaryAscii_1275068461(r_1275068462, nxt_1275068463) {
    var Temporary1;
    var Temporary2;

  var result_1275068464 = false;

  var F = {procname: "nodematch.isWordBoundaryAscii", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 38;
    if (!(-1 < ((r_1275068462) | 0))) Temporary1 = false; else {      Temporary1 = isWordAscii_1275068429(r_1275068462);    }    if (!(-1 < ((nxt_1275068463) | 0))) Temporary2 = false; else {      Temporary2 = isWordAscii_1275068429(nxt_1275068463);    }    result_1275068464 = (Temporary1 != Temporary2);
  framePtr = F.prev;

  return result_1275068464;

}

function match_1275068465(n_1275068466, r_1275068467, nxt_1275068468) {
    var Temporary1;

  var result_1275068469 = false;

  var F = {procname: "nodematch.match", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim", line: 0};
  framePtr = F;
    F.line = 43;
    F.line = 46;
    switch (n_1275068466.kind) {
    case 15:
    case 11:
      Temporary1 = HEX3DHEX3D_838861719(r_1275068467, -1);
      break;
    case 16:
    case 12:
      Temporary1 = HEX3DHEX3D_838861719(nxt_1275068468, -1);
      break;
    case 13:
      Temporary1 = (HEX3DHEX3D_838861719(r_1275068467, -1) || HEX3DHEX3D_838861719(r_1275068467, 10));
      break;
    case 14:
      Temporary1 = (HEX3DHEX3D_838861719(nxt_1275068468, -1) || HEX3DHEX3D_838861719(nxt_1275068468, 10));
      break;
    case 17:
      Temporary1 = isWordBoundary_1275068457(r_1275068467, nxt_1275068468);
      break;
    case 18:
      Temporary1 = !(isWordBoundary_1275068457(r_1275068467, nxt_1275068468));
      break;
    case 29:
      Temporary1 = isWordBoundaryAscii_1275068461(r_1275068467, nxt_1275068468);
      break;
    case 30:
      Temporary1 = !(isWordBoundaryAscii_1275068461(r_1275068467, nxt_1275068468));
      break;
    default: 
      if (true) {
      F.line = 66;
      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nodematch.nim(66, 12) `false` "));
      }
      
      Temporary1 = false;
      break;
    }
    result_1275068469 = Temporary1;
  framePtr = F.prev;

  return result_1275068469;

}

function grow_1241514933(sm_1241514934) {
    var Temporary1;

  var F = {procname: "nfatype.grow", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    if (!((sm_1241514934.i <= (sm_1241514934.s).length))) {
    F.line = 180;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim(180, 12) `sm.i <= sm.s.len` "));
    }
    
    if ((sm_1241514934.i == (sm_1241514934.s).length)) {
    F.line = 182;
    if (sm_1241514934.s.length < (Temporary1 = chckRange(mulInt(nimMax(1, (sm_1241514934.s).length), 2), 0, 2147483647), Temporary1)) { for (var i = sm_1241514934.s.length ; i < Temporary1 ; ++i) sm_1241514934.s.push(({a: null, b: null})); }
               else { sm_1241514934.s.length = Temporary1; };
    }
    
    F.line = 183;
    sm_1241514934.i = addInt(sm_1241514934.i, 1);
  framePtr = F.prev;

  
}

function setLen_1241514889(sm_1241514890, sm_1241514890_Idx, size_1241514891) {
  var F = {procname: "nfatype.setLen", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    F.line = 146;
    if (sm_1241514890[sm_1241514890_Idx].ss.length < chckRange(size_1241514891, 0, 2147483647)) { for (var i = sm_1241514890[sm_1241514890_Idx].ss.length ; i < chckRange(size_1241514891, 0, 2147483647) ; ++i) sm_1241514890[sm_1241514890_Idx].ss.push(0); }
               else { sm_1241514890[sm_1241514890_Idx].ss.length = chckRange(size_1241514891, 0, 2147483647); };
  framePtr = F.prev;

  
}

function setLen_1241514902(item_1241514903, size_1241514904) {
  var F = {procname: "nfatype.setLen", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    if ((item_1241514903.a == null)) {
    if (!((item_1241514903.b == null))) {
    F.line = 162;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim(162, 14) `item.b == nil` "));
    }
    
    F.line = 163;
    item_1241514903.a = newSubmatches_1241514760(size_1241514904);
    F.line = 164;
    item_1241514903.b = newSubmatches_1241514760(size_1241514904);
    }
    else {
      if (!(!((item_1241514903.b == null)))) {
      F.line = 166;
      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim(166, 14) `item.b != nil` "));
      }
      
      F.line = 167;
      setLen_1241514889(item_1241514903, "a", size_1241514904);
      F.line = 168;
      setLen_1241514889(item_1241514903, "b", size_1241514904);
    }
    
  framePtr = F.prev;

  
}

function removeLast_1241514958(sm_1241514959) {
  var F = {procname: "nfatype.removeLast", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    if (!((0 < sm_1241514959.i))) {
    F.line = 186;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim(186, 12) `sm.i > 0` "));
    }
    
    F.line = 187;
    sm_1241514959.i = subInt(sm_1241514959.i, 1);
  framePtr = F.prev;

  
}

function HEX5BHEX5D_1241514827(sm_1241514828, i_1241514829) {
  var result_1241514830 = {Field0: 0, Field1: 0, Field2: ({a: 0, b: 0})};

  var F = {procname: "nfatype.[]", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    F.line = 112;
    if (!((i_1241514829 < ((sm_1241514828.si) | 0)))) {
    F.line = 112;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim(112, 10) `i < sm.si` "));
    }
    
    result_1241514830 = nimCopy(result_1241514830, sm_1241514828.sx[chckIndx(i_1241514829, 0, (sm_1241514828.sx).length - 1)], NTI1241514495);
  framePtr = F.prev;

  return result_1241514830;

}

function reverse_1241514161(capts_1241514162, capts_1241514162_Idx, a_1241514163, b_1241514164) {
  var result_1241514165 = 0;

  var F = {procname: "nfatype.reverse", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (!((b_1241514164 <= a_1241514163))) {
    F.line = 46;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim(46, 12) `a >= b` "));
    }
    
    F.line = 47;
    var capt_1241514171 = a_1241514163;
    F.line = 48;
    var parent_1241514172 = b_1241514164;
    Label1: do {
      F.line = 49;
        Label2: while (true) {
        if (!!((capt_1241514171 == b_1241514164))) break Label2;
          F.line = 50;
          var p_1241514173 = capts_1241514162[capts_1241514162_Idx][chckIndx(capt_1241514171, 0, (capts_1241514162[capts_1241514162_Idx]).length - 1)].parent;
          F.line = 51;
          capts_1241514162[capts_1241514162_Idx][chckIndx(capt_1241514171, 0, (capts_1241514162[capts_1241514162_Idx]).length - 1)].parent = parent_1241514172;
          F.line = 52;
          parent_1241514172 = capt_1241514171;
          F.line = 53;
          capt_1241514171 = p_1241514173;
        }
    } while (false);
    F.line = 54;
    result_1241514165 = parent_1241514172;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1241514165;

}

function matchImpl_1375731751(smA_1375731752, smA_1375731752_Idx, smB_1375731753, smB_1375731753_Idx, capts_1375731754, capts_1375731754_Idx, captIdx_1375731755, captIdx_1375731755_Idx, text_1375731756, nfa_1375731757, look_1375731758, start_1375731759, flags_1375731760) {
                                        var Temporary14;
                                        var Temporary15;
            var Temporary17;
                                  var Temporary29;
                                  var Temporary30;

  var result_1375731761 = false;

  var F = {procname: "nfamatch.matchImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 130;
    var c_1375731762 = -1;
    F.line = 131;
    var cPrev_1375731763 = -1;
    F.line = 132;
    var i_1375731764 = start_1375731759;
    F.line = 133;
    var iNext_1375731765 = start_1375731759;
    F.line = 134;
    var captx_1375731766 = [-1];
    F.line = 135;
    var matched_1375731767 = false;
    F.line = 136;
    var anchored_1375731773 = (flags_1375731760[4] != undefined);
    if (contains_1174405250(HEX2EHEX2E_838861651(0, subInt((text_1375731756).length, 1)), subInt(start_1375731759, 1))) {
    F.line = 138;
    cPrev_1375731763 = bwRuneAt_1140850730(text_1375731756, subInt(start_1375731759, 1));
    }
    
    F.line = 139;
    clear_1241514874(smA_1375731752, smA_1375731752_Idx);
    F.line = 140;
    add_1241514840(smA_1375731752, smA_1375731752_Idx, {Field0: 0, Field1: captIdx_1375731755[captIdx_1375731755_Idx], Field2: HEX2EHEX2E_838861651(i_1375731764, subInt(i_1375731764, 1))});
    Label1: do {
      F.line = 141;
        Label2: while (true) {
        if (!(i_1375731764 < (text_1375731756).length)) break Label2;
          if ((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] <= 127)) {
          F.line = 81;
          c_1375731762 = chckRange(text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)], -2147483648, 2147483647);
          F.line = 82;
          iNext_1375731765 = addInt(iNext_1375731765, 1);
          }
          else {
          if (((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] >>> 5) == 6)) {
          if ((iNext_1375731765 <= subInt((text_1375731756).length, 2))) {
          F.line = 86;
          c_1375731762 = chckRange((((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] & 31) << 6) | (text_1375731756[chckIndx(addInt(iNext_1375731765, 1), 0, (text_1375731756).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 88;
          iNext_1375731765 = addInt(iNext_1375731765, 2);
          }
          else {
            F.line = 90;
            c_1375731762 = 65533;
            F.line = 91;
            iNext_1375731765 = addInt(iNext_1375731765, 1);
          }
          
          }
          else {
          if (((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] >>> 4) == 14)) {
          if ((iNext_1375731765 <= subInt((text_1375731756).length, 3))) {
          F.line = 96;
          c_1375731762 = chckRange(((((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] & 15) << 12) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 1), 0, (text_1375731756).length - 1)] & 63) << 6)) | (text_1375731756[chckIndx(addInt(iNext_1375731765, 2), 0, (text_1375731756).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 99;
          iNext_1375731765 = addInt(iNext_1375731765, 3);
          }
          else {
            F.line = 101;
            c_1375731762 = 65533;
            F.line = 102;
            iNext_1375731765 = addInt(iNext_1375731765, 1);
          }
          
          }
          else {
          if (((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] >>> 3) == 30)) {
          if ((iNext_1375731765 <= subInt((text_1375731756).length, 4))) {
          F.line = 108;
          c_1375731762 = chckRange((((((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] & 7) << 18) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 1), 0, (text_1375731756).length - 1)] & 63) << 12)) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 2), 0, (text_1375731756).length - 1)] & 63) << 6)) | (text_1375731756[chckIndx(addInt(iNext_1375731765, 3), 0, (text_1375731756).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 112;
          iNext_1375731765 = addInt(iNext_1375731765, 4);
          }
          else {
            F.line = 114;
            c_1375731762 = 65533;
            F.line = 115;
            iNext_1375731765 = addInt(iNext_1375731765, 1);
          }
          
          }
          else {
          if (((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] >>> 2) == 62)) {
          if ((iNext_1375731765 <= subInt((text_1375731756).length, 5))) {
          F.line = 122;
          c_1375731762 = chckRange(((((((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] & 3) << 24) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 1), 0, (text_1375731756).length - 1)] & 63) << 18)) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 2), 0, (text_1375731756).length - 1)] & 63) << 12)) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 3), 0, (text_1375731756).length - 1)] & 63) << 6)) | (text_1375731756[chckIndx(addInt(iNext_1375731765, 4), 0, (text_1375731756).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 127;
          iNext_1375731765 = addInt(iNext_1375731765, 5);
          }
          else {
            F.line = 129;
            c_1375731762 = 65533;
            F.line = 130;
            iNext_1375731765 = addInt(iNext_1375731765, 1);
          }
          
          }
          else {
          if (((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] >>> 1) == 126)) {
          if ((iNext_1375731765 <= subInt((text_1375731756).length, 6))) {
          F.line = 138;
          c_1375731762 = chckRange((((((((text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)] & 1) << 30) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 1), 0, (text_1375731756).length - 1)] & 63) << 24)) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 2), 0, (text_1375731756).length - 1)] & 63) << 18)) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 3), 0, (text_1375731756).length - 1)] & 63) << 12)) | ((text_1375731756[chckIndx(addInt(iNext_1375731765, 4), 0, (text_1375731756).length - 1)] & 63) << 6)) | (text_1375731756[chckIndx(addInt(iNext_1375731765, 5), 0, (text_1375731756).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 144;
          iNext_1375731765 = addInt(iNext_1375731765, 6);
          }
          else {
            F.line = 146;
            c_1375731762 = 65533;
            F.line = 147;
            iNext_1375731765 = addInt(iNext_1375731765, 1);
          }
          
          }
          else {
            F.line = 149;
            c_1375731762 = chckRange(text_1375731756[chckIndx(iNext_1375731765, 0, (text_1375731756).length - 1)], -2147483648, 2147483647);
            F.line = 150;
            iNext_1375731765 = addInt(iNext_1375731765, 1);
          }
          }}}}}
          F.line = 78;
          clear_1241514874(smB_1375731753, smB_1375731753_Idx);
          Label3: do {
            F.line = 79;
            var n_1375732041 = 0;
            F.line = 79;
            var capt_1375732042 = 0;
            F.line = 79;
            var bounds_1375732043 = ({a: 0, b: 0});
            Label4: do {
              F.line = 134;
              var i_436212735 = 0;
              F.line = 75;
              var colontmp__436212736 = 0;
              F.line = 134;
              colontmp__436212736 = subInt(len_1241514871(smA_1375731752[smA_1375731752_Idx]), 1);
              F.line = 90;
              var res_436212737 = 0;
              Label5: do {
                F.line = 91;
                  Label6: while (true) {
                  if (!(res_436212737 <= colontmp__436212736)) break Label6;
                    F.line = 134;
                    i_436212735 = res_436212737;
                    F.line = 79;
                    var colontmp__436212740 = nimCopy(null, smA_1375731752[smA_1375731752_Idx].sx[chckIndx(i_436212735, 0, (smA_1375731752[smA_1375731752_Idx].sx).length - 1)], NTI1241514495);
                    F.line = 79;
                    n_1375732041 = colontmp__436212740["Field0"];
                    F.line = 79;
                    capt_1375732042 = colontmp__436212740["Field1"];
                    F.line = 79;
                    bounds_1375732043 = nimCopy(bounds_1375732043, colontmp__436212740["Field2"], NTI687865917);
                    if ((anchored_1375731773 && (nfa_1375731757.s[chckIndx(n_1375732041, 0, (nfa_1375731757.s).length - 1)].kind == 46))) {
                    if (!(hasState_1241514836(smB_1375731753[smB_1375731753_Idx], n_1375732041))) {
                    F.line = 82;
                    add_1241514840(smB_1375731753, smB_1375731753_Idx, {Field0: n_1375732041, Field1: capt_1375732042, Field2: nimCopy(null, bounds_1375732043, NTI687865917)});
                    }
                    
                    F.line = 83;
                    break Label3;
                    }
                    
                    Label7: do {
                      F.line = 84;
                      var nti_1375732053 = 0;
                      F.line = 84;
                      var nt_1375732054 = 0;
                      F.line = 166;
                      var colontmp__436212726 = [];
                      F.line = 84;
                      colontmp__436212726 = nfa_1375731757.s[chckIndx(n_1375732041, 0, (nfa_1375731757.s).length - 1)].next;
                      F.line = 168;
                      var i_436212727 = 0;
                      F.line = 169;
                      var L_436212728 = (colontmp__436212726).length;
                      Label8: do {
                        F.line = 170;
                          Label9: while (true) {
                          if (!(i_436212727 < L_436212728)) break Label9;
                            F.line = 84;
                            nti_1375732053 = i_436212727;
                            F.line = 84;
                            nt_1375732054 = colontmp__436212726[chckIndx(i_436212727, 0, (colontmp__436212726).length - 1)];
                            Label10: do {
                              if (hasState_1241514836(smB_1375731753[smB_1375731753_Idx], nt_1375732054)) {
                              F.line = 86;
                              break Label10;
                              }
                              
                              if (!(match_1275068547(nfa_1375731757.s[chckIndx(nt_1375732054, 0, (nfa_1375731757.s).length - 1)], c_1375731762))) {
                              if (!((anchored_1375731773 && (nfa_1375731757.s[chckIndx(nt_1375732054, 0, (nfa_1375731757.s).length - 1)].kind == 46)))) {
                              F.line = 89;
                              break Label10;
                              }
                              
                              }
                              
                              if ((nfa_1375731757.t.allZ[chckIndx(n_1375732041, 0, (nfa_1375731757.t.allZ).length - 1)][chckIndx(nti_1375732053, 0, (nfa_1375731757.t.allZ[chckIndx(n_1375732041, 0, (nfa_1375731757.t.allZ).length - 1)]).length - 1)] == -1)) {
                              F.line = 91;
                              add_1241514840(smB_1375731753, smB_1375731753_Idx, {Field0: nt_1375732054, Field1: capt_1375732042, Field2: HEX2EHEX2E_838861651(bounds_1375732043.a, subInt(i_1375731764, 1))});
                              F.line = 92;
                              break Label10;
                              }
                              
                              F.line = 93;
                              matched_1375731767 = true;
                              F.line = 94;
                              captx_1375731766[0] = capt_1375732042;
                              Label11: do {
                                F.line = 95;
                                var z_1375732067 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
                                F.line = 233;
                                var colontmp__436212722 = [];
                                F.line = 95;
                                colontmp__436212722 = nfa_1375731757.t.z[chckIndx(nfa_1375731757.t.allZ[chckIndx(n_1375732041, 0, (nfa_1375731757.t.allZ).length - 1)][chckIndx(nti_1375732053, 0, (nfa_1375731757.t.allZ[chckIndx(n_1375732041, 0, (nfa_1375731757.t.allZ).length - 1)]).length - 1)], 0, (nfa_1375731757.t.z).length - 1)];
                                F.line = 235;
                                var i_436212723 = 0;
                                F.line = 236;
                                var L_436212724 = (colontmp__436212722).length;
                                Label12: do {
                                  F.line = 237;
                                    Label13: while (true) {
                                    if (!(i_436212723 < L_436212724)) break Label13;
                                      F.line = 95;
                                      z_1375732067 = colontmp__436212722[chckIndx(i_436212723, 0, (colontmp__436212722).length - 1)];
                                      if (!(matched_1375731767)) {
                                      F.line = 97;
                                      break Label11;
                                      }
                                      
                                      F.line = 95;
                                      switch (z_1375732067.kind) {
                                      case 3:
                                      case 4:
                                        F.line = 100;
                                        capts_1375731754[capts_1375731754_Idx].push({parent: captx_1375731766[0], bound: i_1375731764, idx: z_1375732067.idx});;
                                        F.line = 104;
                                        captx_1375731766[0] = ((subInt((capts_1375731754[capts_1375731754_Idx]).length, 1)) | 0);
                                        break;
                                      case 11:
                                      case 12:
                                      case 13:
                                      case 14:
                                      case 15:
                                      case 16:
                                      case 17:
                                      case 18:
                                      case 29:
                                      case 30:
                                        F.line = 109;
                                        matched_1375731767 = match_1275068465(z_1375732067, cPrev_1375731763, c_1375731762);
                                        break;
                                      case 41:
                                      case 42:
                                      case 43:
                                      case 44:
                                        F.line = 47;
                                        if (z_1375732067.subExp.reverseCapts) {
                                        Temporary14 = ConstSet9;
                                        }
                                        else {
                                        Temporary14 = ConstSet10;
                                        }
                                        
                                        var flags2_1375732083 = nimCopy(null, Temporary14, NTI1375732290);
                                        F.line = 51;
                                        grow_1241514933(look_1375731758.smL);
                                        F.line = 52;
                                        setLen_1241514902(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], (z_1375732067.subExp.nfa.s).length);
                                        F.line = 53;
                                        F.line = 53;
                                        switch (z_1375732067.kind) {
                                        case 41:
                                          Temporary15 = look_1375731758.ahead(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "a", look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "b", capts_1375731754, capts_1375731754_Idx, captx_1375731766, 0, text_1375731756, z_1375732067.subExp.nfa, look_1375731758, i_1375731764, flags2_1375732083);
                                          break;
                                        case 43:
                                          Temporary15 = !(look_1375731758.ahead(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "a", look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "b", capts_1375731754, capts_1375731754_Idx, captx_1375731766, 0, text_1375731756, z_1375732067.subExp.nfa, look_1375731758, i_1375731764, flags2_1375732083));
                                          break;
                                        case 42:
                                          Temporary15 = !((look_1375731758.behind(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "a", look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "b", capts_1375731754, capts_1375731754_Idx, captx_1375731766, 0, text_1375731756, z_1375732067.subExp.nfa, look_1375731758, i_1375731764, 0, flags2_1375732083) == -1));
                                          break;
                                        case 44:
                                          Temporary15 = (look_1375731758.behind(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "a", look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "b", capts_1375731754, capts_1375731754_Idx, captx_1375731766, 0, text_1375731756, z_1375732067.subExp.nfa, look_1375731758, i_1375731764, 0, flags2_1375732083) == -1);
                                          break;
                                        default: 
                                          if (true) {
                                          F.line = 71;
                                          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(71, 14) `false` "));
                                          }
                                          
                                          Temporary15 = false;
                                          break;
                                        }
                                        matched_1375731767 = Temporary15;
                                        F.line = 73;
                                        removeLast_1241514958(look_1375731758.smL);
                                        break;
                                      default: 
                                        if (true) {
                                        F.line = 113;
                                        failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(113, 20) `false` "));
                                        }
                                        
                                        break;
                                      }
                                      F.line = 239;
                                      i_436212723 = addInt(i_436212723, 1);
                                      if (!(((colontmp__436212722).length == L_436212724))) {
                                      F.line = 240;
                                      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                                      }
                                      
                                    }
                                } while (false);
                              } while (false);
                              if (matched_1375731767) {
                              F.line = 116;
                              add_1241514840(smB_1375731753, smB_1375731753_Idx, {Field0: nt_1375732054, Field1: captx_1375731766[0], Field2: HEX2EHEX2E_838861651(bounds_1375732043.a, subInt(i_1375731764, 1))});
                              }
                              
                            } while (false);
                            F.line = 172;
                            i_436212727 = addInt(i_436212727, 1);
                            if (!(((colontmp__436212726).length == L_436212728))) {
                            F.line = 173;
                            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                            }
                            
                          }
                      } while (false);
                    } while (false);
                    F.line = 93;
                    res_436212737 = addInt(res_436212737, 1);
                  }
              } while (false);
            } while (false);
          } while (false);
          F.line = 143;
          var Temporary16 = smA_1375731752[smA_1375731752_Idx]; smA_1375731752[smA_1375731752_Idx] = smB_1375731753[smB_1375731753_Idx]; smB_1375731753[smB_1375731753_Idx] = Temporary16;          if ((len_1241514871(smA_1375731752[smA_1375731752_Idx]) == 0)) {
          F.line = 145;
          result_1375731761 = false;
          break BeforeRet;
          }
          
            if (!anchored_1375731773) Temporary17 = false; else {              Temporary17 = (nfa_1375731757.s[chckIndx(HEX5BHEX5D_1241514827(smA_1375731752[smA_1375731752_Idx], 0).Field0, 0, (nfa_1375731757.s).length - 1)].kind == 46);            }          if (Temporary17) {
          F.line = 147;
          break Label1;
          }
          
          F.line = 148;
          i_1375731764 = iNext_1375731765;
          F.line = 149;
          cPrev_1375731763 = c_1375731762;
        }
    } while (false);
    F.line = 150;
    c_1375731762 = -1;
    F.line = 78;
    clear_1241514874(smB_1375731753, smB_1375731753_Idx);
    Label18: do {
      F.line = 79;
      var n_1375732111 = 0;
      F.line = 79;
      var capt_1375732112 = 0;
      F.line = 79;
      var bounds_1375732113 = ({a: 0, b: 0});
      Label19: do {
        F.line = 134;
        var i_436212754 = 0;
        F.line = 75;
        var colontmp__436212755 = 0;
        F.line = 134;
        colontmp__436212755 = subInt(len_1241514871(smA_1375731752[smA_1375731752_Idx]), 1);
        F.line = 90;
        var res_436212756 = 0;
        Label20: do {
          F.line = 91;
            Label21: while (true) {
            if (!(res_436212756 <= colontmp__436212755)) break Label21;
              F.line = 134;
              i_436212754 = res_436212756;
              F.line = 79;
              var colontmp__436212759 = nimCopy(null, smA_1375731752[smA_1375731752_Idx].sx[chckIndx(i_436212754, 0, (smA_1375731752[smA_1375731752_Idx].sx).length - 1)], NTI1241514495);
              F.line = 79;
              n_1375732111 = colontmp__436212759["Field0"];
              F.line = 79;
              capt_1375732112 = colontmp__436212759["Field1"];
              F.line = 79;
              bounds_1375732113 = nimCopy(bounds_1375732113, colontmp__436212759["Field2"], NTI687865917);
              if ((anchored_1375731773 && (nfa_1375731757.s[chckIndx(n_1375732111, 0, (nfa_1375731757.s).length - 1)].kind == 46))) {
              if (!(hasState_1241514836(smB_1375731753[smB_1375731753_Idx], n_1375732111))) {
              F.line = 82;
              add_1241514840(smB_1375731753, smB_1375731753_Idx, {Field0: n_1375732111, Field1: capt_1375732112, Field2: nimCopy(null, bounds_1375732113, NTI687865917)});
              }
              
              F.line = 83;
              break Label18;
              }
              
              Label22: do {
                F.line = 84;
                var nti_1375732123 = 0;
                F.line = 84;
                var nt_1375732124 = 0;
                F.line = 166;
                var colontmp__436212749 = [];
                F.line = 84;
                colontmp__436212749 = nfa_1375731757.s[chckIndx(n_1375732111, 0, (nfa_1375731757.s).length - 1)].next;
                F.line = 168;
                var i_436212750 = 0;
                F.line = 169;
                var L_436212751 = (colontmp__436212749).length;
                Label23: do {
                  F.line = 170;
                    Label24: while (true) {
                    if (!(i_436212750 < L_436212751)) break Label24;
                      F.line = 84;
                      nti_1375732123 = i_436212750;
                      F.line = 84;
                      nt_1375732124 = colontmp__436212749[chckIndx(i_436212750, 0, (colontmp__436212749).length - 1)];
                      Label25: do {
                        if (hasState_1241514836(smB_1375731753[smB_1375731753_Idx], nt_1375732124)) {
                        F.line = 86;
                        break Label25;
                        }
                        
                        if (!(match_1275068547(nfa_1375731757.s[chckIndx(nt_1375732124, 0, (nfa_1375731757.s).length - 1)], c_1375731762))) {
                        if (!((anchored_1375731773 && (nfa_1375731757.s[chckIndx(nt_1375732124, 0, (nfa_1375731757.s).length - 1)].kind == 46)))) {
                        F.line = 89;
                        break Label25;
                        }
                        
                        }
                        
                        if ((nfa_1375731757.t.allZ[chckIndx(n_1375732111, 0, (nfa_1375731757.t.allZ).length - 1)][chckIndx(nti_1375732123, 0, (nfa_1375731757.t.allZ[chckIndx(n_1375732111, 0, (nfa_1375731757.t.allZ).length - 1)]).length - 1)] == -1)) {
                        F.line = 91;
                        add_1241514840(smB_1375731753, smB_1375731753_Idx, {Field0: nt_1375732124, Field1: capt_1375732112, Field2: HEX2EHEX2E_838861651(bounds_1375732113.a, subInt(i_1375731764, 1))});
                        F.line = 92;
                        break Label25;
                        }
                        
                        F.line = 93;
                        matched_1375731767 = true;
                        F.line = 94;
                        captx_1375731766[0] = capt_1375732112;
                        Label26: do {
                          F.line = 95;
                          var z_1375732137 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
                          F.line = 233;
                          var colontmp__436212745 = [];
                          F.line = 95;
                          colontmp__436212745 = nfa_1375731757.t.z[chckIndx(nfa_1375731757.t.allZ[chckIndx(n_1375732111, 0, (nfa_1375731757.t.allZ).length - 1)][chckIndx(nti_1375732123, 0, (nfa_1375731757.t.allZ[chckIndx(n_1375732111, 0, (nfa_1375731757.t.allZ).length - 1)]).length - 1)], 0, (nfa_1375731757.t.z).length - 1)];
                          F.line = 235;
                          var i_436212746 = 0;
                          F.line = 236;
                          var L_436212747 = (colontmp__436212745).length;
                          Label27: do {
                            F.line = 237;
                              Label28: while (true) {
                              if (!(i_436212746 < L_436212747)) break Label28;
                                F.line = 95;
                                z_1375732137 = colontmp__436212745[chckIndx(i_436212746, 0, (colontmp__436212745).length - 1)];
                                if (!(matched_1375731767)) {
                                F.line = 97;
                                break Label26;
                                }
                                
                                F.line = 95;
                                switch (z_1375732137.kind) {
                                case 3:
                                case 4:
                                  F.line = 100;
                                  capts_1375731754[capts_1375731754_Idx].push({parent: captx_1375731766[0], bound: i_1375731764, idx: z_1375732137.idx});;
                                  F.line = 104;
                                  captx_1375731766[0] = ((subInt((capts_1375731754[capts_1375731754_Idx]).length, 1)) | 0);
                                  break;
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 18:
                                case 29:
                                case 30:
                                  F.line = 109;
                                  matched_1375731767 = match_1275068465(z_1375732137, cPrev_1375731763, c_1375731762);
                                  break;
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                  F.line = 47;
                                  if (z_1375732137.subExp.reverseCapts) {
                                  Temporary29 = ConstSet11;
                                  }
                                  else {
                                  Temporary29 = ConstSet12;
                                  }
                                  
                                  var flags2_1375732153 = nimCopy(null, Temporary29, NTI1375732390);
                                  F.line = 51;
                                  grow_1241514933(look_1375731758.smL);
                                  F.line = 52;
                                  setLen_1241514902(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], (z_1375732137.subExp.nfa.s).length);
                                  F.line = 53;
                                  F.line = 53;
                                  switch (z_1375732137.kind) {
                                  case 41:
                                    Temporary30 = look_1375731758.ahead(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "a", look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "b", capts_1375731754, capts_1375731754_Idx, captx_1375731766, 0, text_1375731756, z_1375732137.subExp.nfa, look_1375731758, i_1375731764, flags2_1375732153);
                                    break;
                                  case 43:
                                    Temporary30 = !(look_1375731758.ahead(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "a", look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "b", capts_1375731754, capts_1375731754_Idx, captx_1375731766, 0, text_1375731756, z_1375732137.subExp.nfa, look_1375731758, i_1375731764, flags2_1375732153));
                                    break;
                                  case 42:
                                    Temporary30 = !((look_1375731758.behind(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "a", look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "b", capts_1375731754, capts_1375731754_Idx, captx_1375731766, 0, text_1375731756, z_1375732137.subExp.nfa, look_1375731758, i_1375731764, 0, flags2_1375732153) == -1));
                                    break;
                                  case 44:
                                    Temporary30 = (look_1375731758.behind(look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "a", look_1375731758.smL.s[chckIndx(subInt(look_1375731758.smL.i, 1), 0, (look_1375731758.smL.s).length - 1)], "b", capts_1375731754, capts_1375731754_Idx, captx_1375731766, 0, text_1375731756, z_1375732137.subExp.nfa, look_1375731758, i_1375731764, 0, flags2_1375732153) == -1);
                                    break;
                                  default: 
                                    if (true) {
                                    F.line = 71;
                                    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(71, 14) `false` "));
                                    }
                                    
                                    Temporary30 = false;
                                    break;
                                  }
                                  matched_1375731767 = Temporary30;
                                  F.line = 73;
                                  removeLast_1241514958(look_1375731758.smL);
                                  break;
                                default: 
                                  if (true) {
                                  F.line = 113;
                                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(113, 20) `false` "));
                                  }
                                  
                                  break;
                                }
                                F.line = 239;
                                i_436212746 = addInt(i_436212746, 1);
                                if (!(((colontmp__436212745).length == L_436212747))) {
                                F.line = 240;
                                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                                }
                                
                              }
                          } while (false);
                        } while (false);
                        if (matched_1375731767) {
                        F.line = 116;
                        add_1241514840(smB_1375731753, smB_1375731753_Idx, {Field0: nt_1375732124, Field1: captx_1375731766[0], Field2: HEX2EHEX2E_838861651(bounds_1375732113.a, subInt(i_1375731764, 1))});
                        }
                        
                      } while (false);
                      F.line = 172;
                      i_436212750 = addInt(i_436212750, 1);
                      if (!(((colontmp__436212749).length == L_436212751))) {
                      F.line = 173;
                      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
              F.line = 93;
              res_436212756 = addInt(res_436212756, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    F.line = 151;
    var Temporary31 = smA_1375731752[smA_1375731752_Idx]; smA_1375731752[smA_1375731752_Idx] = smB_1375731753[smB_1375731753_Idx]; smB_1375731753[smB_1375731753_Idx] = Temporary31;    if ((0 < len_1241514871(smA_1375731752[smA_1375731752_Idx]))) {
    if ((flags_1375731760[6] != undefined)) {
    F.line = 154;
    captIdx_1375731755[captIdx_1375731755_Idx] = reverse_1241514161(capts_1375731754, capts_1375731754_Idx, HEX5BHEX5D_1241514827(smA_1375731752[smA_1375731752_Idx], 0).Field1, captIdx_1375731755[captIdx_1375731755_Idx]);
    }
    else {
      F.line = 156;
      captIdx_1375731755[captIdx_1375731755_Idx] = HEX5BHEX5D_1241514827(smA_1375731752[smA_1375731752_Idx], 0).Field1;
    }
    
    }
    
    F.line = 157;
    result_1375731761 = (0 < len_1241514871(smA_1375731752[smA_1375731752_Idx]));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1375731761;

}

function runeAt_838860895(s_838860896, i_838860897) {
  var result_838860898 = 0;

  var F = {procname: "unicode.runeAt", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    if ((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] <= 127)) {
    F.line = 81;
    result_838860898 = chckRange(s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)], -2147483648, 2147483647);
    }
    else {
    if (((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] >>> 5) == 6)) {
    if ((i_838860897 <= subInt((s_838860896).length, 2))) {
    F.line = 86;
    result_838860898 = chckRange((((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] & 31) << 6) | (s_838860896[chckIndx(addInt(i_838860897, 1), 0, (s_838860896).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 90;
      result_838860898 = 65533;
    }
    
    }
    else {
    if (((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] >>> 4) == 14)) {
    if ((i_838860897 <= subInt((s_838860896).length, 3))) {
    F.line = 96;
    result_838860898 = chckRange(((((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] & 15) << 12) | ((s_838860896[chckIndx(addInt(i_838860897, 1), 0, (s_838860896).length - 1)] & 63) << 6)) | (s_838860896[chckIndx(addInt(i_838860897, 2), 0, (s_838860896).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 101;
      result_838860898 = 65533;
    }
    
    }
    else {
    if (((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] >>> 3) == 30)) {
    if ((i_838860897 <= subInt((s_838860896).length, 4))) {
    F.line = 108;
    result_838860898 = chckRange((((((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] & 7) << 18) | ((s_838860896[chckIndx(addInt(i_838860897, 1), 0, (s_838860896).length - 1)] & 63) << 12)) | ((s_838860896[chckIndx(addInt(i_838860897, 2), 0, (s_838860896).length - 1)] & 63) << 6)) | (s_838860896[chckIndx(addInt(i_838860897, 3), 0, (s_838860896).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 114;
      result_838860898 = 65533;
    }
    
    }
    else {
    if (((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] >>> 2) == 62)) {
    if ((i_838860897 <= subInt((s_838860896).length, 5))) {
    F.line = 122;
    result_838860898 = chckRange(((((((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] & 3) << 24) | ((s_838860896[chckIndx(addInt(i_838860897, 1), 0, (s_838860896).length - 1)] & 63) << 18)) | ((s_838860896[chckIndx(addInt(i_838860897, 2), 0, (s_838860896).length - 1)] & 63) << 12)) | ((s_838860896[chckIndx(addInt(i_838860897, 3), 0, (s_838860896).length - 1)] & 63) << 6)) | (s_838860896[chckIndx(addInt(i_838860897, 4), 0, (s_838860896).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 129;
      result_838860898 = 65533;
    }
    
    }
    else {
    if (((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] >>> 1) == 126)) {
    if ((i_838860897 <= subInt((s_838860896).length, 6))) {
    F.line = 138;
    result_838860898 = chckRange((((((((s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)] & 1) << 30) | ((s_838860896[chckIndx(addInt(i_838860897, 1), 0, (s_838860896).length - 1)] & 63) << 24)) | ((s_838860896[chckIndx(addInt(i_838860897, 2), 0, (s_838860896).length - 1)] & 63) << 18)) | ((s_838860896[chckIndx(addInt(i_838860897, 3), 0, (s_838860896).length - 1)] & 63) << 12)) | ((s_838860896[chckIndx(addInt(i_838860897, 4), 0, (s_838860896).length - 1)] & 63) << 6)) | (s_838860896[chckIndx(addInt(i_838860897, 5), 0, (s_838860896).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 146;
      result_838860898 = 65533;
    }
    
    }
    else {
      F.line = 149;
      result_838860898 = chckRange(s_838860896[chckIndx(i_838860897, 0, (s_838860896).length - 1)], -2147483648, 2147483647);
    }
    }}}}}
  framePtr = F.prev;

  return result_838860898;

}

function reversedMatchImpl_1375732198(smA_1375732199, smA_1375732199_Idx, smB_1375732200, smB_1375732200_Idx, capts_1375732201, capts_1375732201_Idx, captIdx_1375732202, captIdx_1375732202_Idx, text_1375732203, nfa_1375732204, look_1375732205, start_1375732206, limit_1375732207, flags_1375732208) {
                var Temporary5;
                                        var Temporary17;
                                        var Temporary18;
          var Temporary22;
                                  var Temporary34;
                                  var Temporary35;

  var result_1375732209 = 0;

  var F = {procname: "nfamatch.reversedMatchImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (!((limit_1375732207 <= start_1375732206))) {
    F.line = 171;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(171, 12) `start >= limit` "));
    }
    
    F.line = 173;
    var c_1375732215 = -1;
    F.line = 174;
    var cPrev_1375732216 = -1;
    F.line = 175;
    var i_1375732217 = start_1375732206;
    F.line = 176;
    var iNext_1375732218 = start_1375732206;
    F.line = 177;
    var captx_1375732219 = [0];
    F.line = 178;
    var matched_1375732220 = false;
    F.line = 179;
    var anchored_1375732221 = true;
    if (contains_1174405250(HEX2EHEX2E_838861651(0, subInt((text_1375732203).length, 1)), start_1375732206)) {
    F.line = 181;
    cPrev_1375732216 = runeAt_838860895(text_1375732203, chckRange(start_1375732206, 0, 2147483647));
    }
    
    F.line = 182;
    clear_1241514874(smA_1375732199, smA_1375732199_Idx);
    F.line = 183;
    add_1241514840(smA_1375732199, smA_1375732199_Idx, {Field0: 0, Field1: captIdx_1375732202[captIdx_1375732202_Idx], Field2: HEX2EHEX2E_838861651(i_1375732217, subInt(i_1375732217, 1))});
    Label1: do {
      F.line = 184;
        Label2: while (true) {
        if (!(limit_1375732207 < iNext_1375732218)) break Label2;
          if (!((0 < iNext_1375732218))) {
          F.line = 51;
          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim(51, 12) `iNext > 0` "));
          }
          
          if (!((iNext_1375732218 <= (text_1375732203).length))) {
          F.line = 52;
          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim(52, 12) `iNext <= text.len` "));
          }
          
          F.line = 53;
          iNext_1375732218 = subInt(iNext_1375732218, 1);
          Label3: do {
            F.line = 54;
              Label4: while (true) {
                if (!(0 < iNext_1375732218)) Temporary5 = false; else {                  Temporary5 = ((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >> 6) == 2);                }              if (!Temporary5) break Label4;
                F.line = 55;
                iNext_1375732218 = subInt(iNext_1375732218, 1);
              }
          } while (false);
          if ((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] <= 127)) {
          F.line = 81;
          c_1375732215 = chckRange(text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)], -2147483648, 2147483647);
          }
          else {
          if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 5) == 6)) {
          if ((iNext_1375732218 <= subInt((text_1375732203).length, 2))) {
          F.line = 86;
          c_1375732215 = chckRange((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 31) << 6) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            F.line = 90;
            c_1375732215 = 65533;
          }
          
          }
          else {
          if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 4) == 14)) {
          if ((iNext_1375732218 <= subInt((text_1375732203).length, 3))) {
          F.line = 96;
          c_1375732215 = chckRange(((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 15) << 12) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63) << 6)) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 2), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            F.line = 101;
            c_1375732215 = 65533;
          }
          
          }
          else {
          if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 3) == 30)) {
          if ((iNext_1375732218 <= subInt((text_1375732203).length, 4))) {
          F.line = 108;
          c_1375732215 = chckRange((((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 7) << 18) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63) << 12)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 2), 0, (text_1375732203).length - 1)] & 63) << 6)) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 3), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            F.line = 114;
            c_1375732215 = 65533;
          }
          
          }
          else {
          if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 2) == 62)) {
          if ((iNext_1375732218 <= subInt((text_1375732203).length, 5))) {
          F.line = 122;
          c_1375732215 = chckRange(((((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 3) << 24) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63) << 18)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 2), 0, (text_1375732203).length - 1)] & 63) << 12)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 3), 0, (text_1375732203).length - 1)] & 63) << 6)) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 4), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            F.line = 129;
            c_1375732215 = 65533;
          }
          
          }
          else {
          if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 1) == 126)) {
          if ((iNext_1375732218 <= subInt((text_1375732203).length, 6))) {
          F.line = 138;
          c_1375732215 = chckRange((((((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 1) << 30) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63) << 24)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 2), 0, (text_1375732203).length - 1)] & 63) << 18)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 3), 0, (text_1375732203).length - 1)] & 63) << 12)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 4), 0, (text_1375732203).length - 1)] & 63) << 6)) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 5), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
          }
          else {
            F.line = 146;
            c_1375732215 = 65533;
          }
          
          }
          else {
            F.line = 149;
            c_1375732215 = chckRange(text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)], -2147483648, 2147483647);
          }
          }}}}}
          F.line = 78;
          clear_1241514874(smB_1375732200, smB_1375732200_Idx);
          Label6: do {
            F.line = 79;
            var n_1375732466 = 0;
            F.line = 79;
            var capt_1375732467 = 0;
            F.line = 79;
            var bounds_1375732468 = ({a: 0, b: 0});
            Label7: do {
              F.line = 134;
              var i_436212787 = 0;
              F.line = 75;
              var colontmp__436212788 = 0;
              F.line = 134;
              colontmp__436212788 = subInt(len_1241514871(smA_1375732199[smA_1375732199_Idx]), 1);
              F.line = 90;
              var res_436212789 = 0;
              Label8: do {
                F.line = 91;
                  Label9: while (true) {
                  if (!(res_436212789 <= colontmp__436212788)) break Label9;
                    F.line = 134;
                    i_436212787 = res_436212789;
                    F.line = 79;
                    var colontmp__436212792 = nimCopy(null, smA_1375732199[smA_1375732199_Idx].sx[chckIndx(i_436212787, 0, (smA_1375732199[smA_1375732199_Idx].sx).length - 1)], NTI1241514495);
                    F.line = 79;
                    n_1375732466 = colontmp__436212792["Field0"];
                    F.line = 79;
                    capt_1375732467 = colontmp__436212792["Field1"];
                    F.line = 79;
                    bounds_1375732468 = nimCopy(bounds_1375732468, colontmp__436212792["Field2"], NTI687865917);
                    if ((anchored_1375732221 && (nfa_1375732204.s[chckIndx(n_1375732466, 0, (nfa_1375732204.s).length - 1)].kind == 46))) {
                    if (!(hasState_1241514836(smB_1375732200[smB_1375732200_Idx], n_1375732466))) {
                    F.line = 82;
                    add_1241514840(smB_1375732200, smB_1375732200_Idx, {Field0: n_1375732466, Field1: capt_1375732467, Field2: nimCopy(null, bounds_1375732468, NTI687865917)});
                    }
                    
                    F.line = 83;
                    break Label6;
                    }
                    
                    Label10: do {
                      F.line = 84;
                      var nti_1375732478 = 0;
                      F.line = 84;
                      var nt_1375732479 = 0;
                      F.line = 166;
                      var colontmp__436212782 = [];
                      F.line = 84;
                      colontmp__436212782 = nfa_1375732204.s[chckIndx(n_1375732466, 0, (nfa_1375732204.s).length - 1)].next;
                      F.line = 168;
                      var i_436212783 = 0;
                      F.line = 169;
                      var L_436212784 = (colontmp__436212782).length;
                      Label11: do {
                        F.line = 170;
                          Label12: while (true) {
                          if (!(i_436212783 < L_436212784)) break Label12;
                            F.line = 84;
                            nti_1375732478 = i_436212783;
                            F.line = 84;
                            nt_1375732479 = colontmp__436212782[chckIndx(i_436212783, 0, (colontmp__436212782).length - 1)];
                            Label13: do {
                              if (hasState_1241514836(smB_1375732200[smB_1375732200_Idx], nt_1375732479)) {
                              F.line = 86;
                              break Label13;
                              }
                              
                              if (!(match_1275068547(nfa_1375732204.s[chckIndx(nt_1375732479, 0, (nfa_1375732204.s).length - 1)], c_1375732215))) {
                              if (!((anchored_1375732221 && (nfa_1375732204.s[chckIndx(nt_1375732479, 0, (nfa_1375732204.s).length - 1)].kind == 46)))) {
                              F.line = 89;
                              break Label13;
                              }
                              
                              }
                              
                              if ((nfa_1375732204.t.allZ[chckIndx(n_1375732466, 0, (nfa_1375732204.t.allZ).length - 1)][chckIndx(nti_1375732478, 0, (nfa_1375732204.t.allZ[chckIndx(n_1375732466, 0, (nfa_1375732204.t.allZ).length - 1)]).length - 1)] == -1)) {
                              F.line = 91;
                              add_1241514840(smB_1375732200, smB_1375732200_Idx, {Field0: nt_1375732479, Field1: capt_1375732467, Field2: HEX2EHEX2E_838861651(i_1375732217, bounds_1375732468.b)});
                              F.line = 92;
                              break Label13;
                              }
                              
                              F.line = 93;
                              matched_1375732220 = true;
                              F.line = 94;
                              captx_1375732219[0] = capt_1375732467;
                              Label14: do {
                                F.line = 95;
                                var z_1375732492 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
                                F.line = 233;
                                var colontmp__436212778 = [];
                                F.line = 95;
                                colontmp__436212778 = nfa_1375732204.t.z[chckIndx(nfa_1375732204.t.allZ[chckIndx(n_1375732466, 0, (nfa_1375732204.t.allZ).length - 1)][chckIndx(nti_1375732478, 0, (nfa_1375732204.t.allZ[chckIndx(n_1375732466, 0, (nfa_1375732204.t.allZ).length - 1)]).length - 1)], 0, (nfa_1375732204.t.z).length - 1)];
                                F.line = 235;
                                var i_436212779 = 0;
                                F.line = 236;
                                var L_436212780 = (colontmp__436212778).length;
                                Label15: do {
                                  F.line = 237;
                                    Label16: while (true) {
                                    if (!(i_436212779 < L_436212780)) break Label16;
                                      F.line = 95;
                                      z_1375732492 = colontmp__436212778[chckIndx(i_436212779, 0, (colontmp__436212778).length - 1)];
                                      if (!(matched_1375732220)) {
                                      F.line = 97;
                                      break Label14;
                                      }
                                      
                                      F.line = 95;
                                      switch (z_1375732492.kind) {
                                      case 3:
                                      case 4:
                                        F.line = 100;
                                        capts_1375732201[capts_1375732201_Idx].push({parent: captx_1375732219[0], bound: i_1375732217, idx: z_1375732492.idx});;
                                        F.line = 104;
                                        captx_1375732219[0] = ((subInt((capts_1375732201[capts_1375732201_Idx]).length, 1)) | 0);
                                        break;
                                      case 11:
                                      case 12:
                                      case 13:
                                      case 14:
                                      case 15:
                                      case 16:
                                      case 17:
                                      case 18:
                                      case 29:
                                      case 30:
                                        F.line = 107;
                                        matched_1375732220 = match_1275068465(z_1375732492, c_1375732215, cPrev_1375732216);
                                        break;
                                      case 41:
                                      case 42:
                                      case 43:
                                      case 44:
                                        F.line = 47;
                                        if (z_1375732492.subExp.reverseCapts) {
                                        Temporary17 = ConstSet13;
                                        }
                                        else {
                                        Temporary17 = ConstSet14;
                                        }
                                        
                                        var flags2_1375732508 = nimCopy(null, Temporary17, NTI1375732993);
                                        F.line = 51;
                                        grow_1241514933(look_1375732205.smL);
                                        F.line = 52;
                                        setLen_1241514902(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], (z_1375732492.subExp.nfa.s).length);
                                        F.line = 53;
                                        F.line = 53;
                                        switch (z_1375732492.kind) {
                                        case 41:
                                          Temporary18 = look_1375732205.ahead(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "a", look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "b", capts_1375732201, capts_1375732201_Idx, captx_1375732219, 0, text_1375732203, z_1375732492.subExp.nfa, look_1375732205, i_1375732217, flags2_1375732508);
                                          break;
                                        case 43:
                                          Temporary18 = !(look_1375732205.ahead(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "a", look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "b", capts_1375732201, capts_1375732201_Idx, captx_1375732219, 0, text_1375732203, z_1375732492.subExp.nfa, look_1375732205, i_1375732217, flags2_1375732508));
                                          break;
                                        case 42:
                                          Temporary18 = !((look_1375732205.behind(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "a", look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "b", capts_1375732201, capts_1375732201_Idx, captx_1375732219, 0, text_1375732203, z_1375732492.subExp.nfa, look_1375732205, i_1375732217, 0, flags2_1375732508) == -1));
                                          break;
                                        case 44:
                                          Temporary18 = (look_1375732205.behind(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "a", look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "b", capts_1375732201, capts_1375732201_Idx, captx_1375732219, 0, text_1375732203, z_1375732492.subExp.nfa, look_1375732205, i_1375732217, 0, flags2_1375732508) == -1);
                                          break;
                                        default: 
                                          if (true) {
                                          F.line = 71;
                                          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(71, 14) `false` "));
                                          }
                                          
                                          Temporary18 = false;
                                          break;
                                        }
                                        matched_1375732220 = Temporary18;
                                        F.line = 73;
                                        removeLast_1241514958(look_1375732205.smL);
                                        break;
                                      default: 
                                        if (true) {
                                        F.line = 113;
                                        failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(113, 20) `false` "));
                                        }
                                        
                                        break;
                                      }
                                      F.line = 239;
                                      i_436212779 = addInt(i_436212779, 1);
                                      if (!(((colontmp__436212778).length == L_436212780))) {
                                      F.line = 240;
                                      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                                      }
                                      
                                    }
                                } while (false);
                              } while (false);
                              if (matched_1375732220) {
                              F.line = 116;
                              add_1241514840(smB_1375732200, smB_1375732200_Idx, {Field0: nt_1375732479, Field1: captx_1375732219[0], Field2: HEX2EHEX2E_838861651(i_1375732217, bounds_1375732468.b)});
                              }
                              
                            } while (false);
                            F.line = 172;
                            i_436212783 = addInt(i_436212783, 1);
                            if (!(((colontmp__436212782).length == L_436212784))) {
                            F.line = 173;
                            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                            }
                            
                          }
                      } while (false);
                    } while (false);
                    F.line = 93;
                    res_436212789 = addInt(res_436212789, 1);
                  }
              } while (false);
            } while (false);
          } while (false);
          F.line = 186;
          var Temporary19 = smA_1375732199[smA_1375732199_Idx]; smA_1375732199[smA_1375732199_Idx] = smB_1375732200[smB_1375732200_Idx]; smB_1375732200[smB_1375732200_Idx] = Temporary19;          if ((len_1241514871(smA_1375732199[smA_1375732199_Idx]) == 0)) {
          F.line = 188;
          result_1375732209 = -1;
          break BeforeRet;
          }
          
          if ((nfa_1375732204.s[chckIndx(HEX5BHEX5D_1241514827(smA_1375732199[smA_1375732199_Idx], 0).Field0, 0, (nfa_1375732204.s).length - 1)].kind == 46)) {
          F.line = 190;
          break Label1;
          }
          
          F.line = 191;
          i_1375732217 = iNext_1375732218;
          F.line = 192;
          cPrev_1375732216 = c_1375732215;
        }
    } while (false);
    F.line = 193;
    c_1375732215 = -1;
    if ((0 < iNext_1375732218)) {
    if (!((0 < iNext_1375732218))) {
    F.line = 51;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim(51, 12) `iNext > 0` "));
    }
    
    if (!((iNext_1375732218 <= (text_1375732203).length))) {
    F.line = 52;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim(52, 12) `iNext <= text.len` "));
    }
    
    F.line = 53;
    iNext_1375732218 = subInt(iNext_1375732218, 1);
    Label20: do {
      F.line = 54;
        Label21: while (true) {
          if (!(0 < iNext_1375732218)) Temporary22 = false; else {            Temporary22 = ((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >> 6) == 2);          }        if (!Temporary22) break Label21;
          F.line = 55;
          iNext_1375732218 = subInt(iNext_1375732218, 1);
        }
    } while (false);
    if ((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] <= 127)) {
    F.line = 81;
    c_1375732215 = chckRange(text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)], -2147483648, 2147483647);
    }
    else {
    if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 5) == 6)) {
    if ((iNext_1375732218 <= subInt((text_1375732203).length, 2))) {
    F.line = 86;
    c_1375732215 = chckRange((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 31) << 6) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 90;
      c_1375732215 = 65533;
    }
    
    }
    else {
    if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 4) == 14)) {
    if ((iNext_1375732218 <= subInt((text_1375732203).length, 3))) {
    F.line = 96;
    c_1375732215 = chckRange(((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 15) << 12) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63) << 6)) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 2), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 101;
      c_1375732215 = 65533;
    }
    
    }
    else {
    if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 3) == 30)) {
    if ((iNext_1375732218 <= subInt((text_1375732203).length, 4))) {
    F.line = 108;
    c_1375732215 = chckRange((((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 7) << 18) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63) << 12)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 2), 0, (text_1375732203).length - 1)] & 63) << 6)) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 3), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 114;
      c_1375732215 = 65533;
    }
    
    }
    else {
    if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 2) == 62)) {
    if ((iNext_1375732218 <= subInt((text_1375732203).length, 5))) {
    F.line = 122;
    c_1375732215 = chckRange(((((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 3) << 24) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63) << 18)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 2), 0, (text_1375732203).length - 1)] & 63) << 12)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 3), 0, (text_1375732203).length - 1)] & 63) << 6)) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 4), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 129;
      c_1375732215 = 65533;
    }
    
    }
    else {
    if (((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] >>> 1) == 126)) {
    if ((iNext_1375732218 <= subInt((text_1375732203).length, 6))) {
    F.line = 138;
    c_1375732215 = chckRange((((((((text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)] & 1) << 30) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 1), 0, (text_1375732203).length - 1)] & 63) << 24)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 2), 0, (text_1375732203).length - 1)] & 63) << 18)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 3), 0, (text_1375732203).length - 1)] & 63) << 12)) | ((text_1375732203[chckIndx(addInt(iNext_1375732218, 4), 0, (text_1375732203).length - 1)] & 63) << 6)) | (text_1375732203[chckIndx(addInt(iNext_1375732218, 5), 0, (text_1375732203).length - 1)] & 63)), -2147483648, 2147483647);
    }
    else {
      F.line = 146;
      c_1375732215 = 65533;
    }
    
    }
    else {
      F.line = 149;
      c_1375732215 = chckRange(text_1375732203[chckIndx(iNext_1375732218, 0, (text_1375732203).length - 1)], -2147483648, 2147483647);
    }
    }}}}}
    }
    
    F.line = 78;
    clear_1241514874(smB_1375732200, smB_1375732200_Idx);
    Label23: do {
      F.line = 79;
      var n_1375732721 = 0;
      F.line = 79;
      var capt_1375732722 = 0;
      F.line = 79;
      var bounds_1375732723 = ({a: 0, b: 0});
      Label24: do {
        F.line = 134;
        var i_436212807 = 0;
        F.line = 75;
        var colontmp__436212808 = 0;
        F.line = 134;
        colontmp__436212808 = subInt(len_1241514871(smA_1375732199[smA_1375732199_Idx]), 1);
        F.line = 90;
        var res_436212809 = 0;
        Label25: do {
          F.line = 91;
            Label26: while (true) {
            if (!(res_436212809 <= colontmp__436212808)) break Label26;
              F.line = 134;
              i_436212807 = res_436212809;
              F.line = 79;
              var colontmp__436212812 = nimCopy(null, smA_1375732199[smA_1375732199_Idx].sx[chckIndx(i_436212807, 0, (smA_1375732199[smA_1375732199_Idx].sx).length - 1)], NTI1241514495);
              F.line = 79;
              n_1375732721 = colontmp__436212812["Field0"];
              F.line = 79;
              capt_1375732722 = colontmp__436212812["Field1"];
              F.line = 79;
              bounds_1375732723 = nimCopy(bounds_1375732723, colontmp__436212812["Field2"], NTI687865917);
              if ((anchored_1375732221 && (nfa_1375732204.s[chckIndx(n_1375732721, 0, (nfa_1375732204.s).length - 1)].kind == 46))) {
              if (!(hasState_1241514836(smB_1375732200[smB_1375732200_Idx], n_1375732721))) {
              F.line = 82;
              add_1241514840(smB_1375732200, smB_1375732200_Idx, {Field0: n_1375732721, Field1: capt_1375732722, Field2: nimCopy(null, bounds_1375732723, NTI687865917)});
              }
              
              F.line = 83;
              break Label23;
              }
              
              Label27: do {
                F.line = 84;
                var nti_1375732733 = 0;
                F.line = 84;
                var nt_1375732734 = 0;
                F.line = 166;
                var colontmp__436212802 = [];
                F.line = 84;
                colontmp__436212802 = nfa_1375732204.s[chckIndx(n_1375732721, 0, (nfa_1375732204.s).length - 1)].next;
                F.line = 168;
                var i_436212803 = 0;
                F.line = 169;
                var L_436212804 = (colontmp__436212802).length;
                Label28: do {
                  F.line = 170;
                    Label29: while (true) {
                    if (!(i_436212803 < L_436212804)) break Label29;
                      F.line = 84;
                      nti_1375732733 = i_436212803;
                      F.line = 84;
                      nt_1375732734 = colontmp__436212802[chckIndx(i_436212803, 0, (colontmp__436212802).length - 1)];
                      Label30: do {
                        if (hasState_1241514836(smB_1375732200[smB_1375732200_Idx], nt_1375732734)) {
                        F.line = 86;
                        break Label30;
                        }
                        
                        if (!(match_1275068547(nfa_1375732204.s[chckIndx(nt_1375732734, 0, (nfa_1375732204.s).length - 1)], c_1375732215))) {
                        if (!((anchored_1375732221 && (nfa_1375732204.s[chckIndx(nt_1375732734, 0, (nfa_1375732204.s).length - 1)].kind == 46)))) {
                        F.line = 89;
                        break Label30;
                        }
                        
                        }
                        
                        if ((nfa_1375732204.t.allZ[chckIndx(n_1375732721, 0, (nfa_1375732204.t.allZ).length - 1)][chckIndx(nti_1375732733, 0, (nfa_1375732204.t.allZ[chckIndx(n_1375732721, 0, (nfa_1375732204.t.allZ).length - 1)]).length - 1)] == -1)) {
                        F.line = 91;
                        add_1241514840(smB_1375732200, smB_1375732200_Idx, {Field0: nt_1375732734, Field1: capt_1375732722, Field2: HEX2EHEX2E_838861651(i_1375732217, bounds_1375732723.b)});
                        F.line = 92;
                        break Label30;
                        }
                        
                        F.line = 93;
                        matched_1375732220 = true;
                        F.line = 94;
                        captx_1375732219[0] = capt_1375732722;
                        Label31: do {
                          F.line = 95;
                          var z_1375732747 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
                          F.line = 233;
                          var colontmp__436212798 = [];
                          F.line = 95;
                          colontmp__436212798 = nfa_1375732204.t.z[chckIndx(nfa_1375732204.t.allZ[chckIndx(n_1375732721, 0, (nfa_1375732204.t.allZ).length - 1)][chckIndx(nti_1375732733, 0, (nfa_1375732204.t.allZ[chckIndx(n_1375732721, 0, (nfa_1375732204.t.allZ).length - 1)]).length - 1)], 0, (nfa_1375732204.t.z).length - 1)];
                          F.line = 235;
                          var i_436212799 = 0;
                          F.line = 236;
                          var L_436212800 = (colontmp__436212798).length;
                          Label32: do {
                            F.line = 237;
                              Label33: while (true) {
                              if (!(i_436212799 < L_436212800)) break Label33;
                                F.line = 95;
                                z_1375732747 = colontmp__436212798[chckIndx(i_436212799, 0, (colontmp__436212798).length - 1)];
                                if (!(matched_1375732220)) {
                                F.line = 97;
                                break Label31;
                                }
                                
                                F.line = 95;
                                switch (z_1375732747.kind) {
                                case 3:
                                case 4:
                                  F.line = 100;
                                  capts_1375732201[capts_1375732201_Idx].push({parent: captx_1375732219[0], bound: i_1375732217, idx: z_1375732747.idx});;
                                  F.line = 104;
                                  captx_1375732219[0] = ((subInt((capts_1375732201[capts_1375732201_Idx]).length, 1)) | 0);
                                  break;
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 18:
                                case 29:
                                case 30:
                                  F.line = 107;
                                  matched_1375732220 = match_1275068465(z_1375732747, c_1375732215, cPrev_1375732216);
                                  break;
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                  F.line = 47;
                                  if (z_1375732747.subExp.reverseCapts) {
                                  Temporary34 = ConstSet15;
                                  }
                                  else {
                                  Temporary34 = ConstSet16;
                                  }
                                  
                                  var flags2_1375732763 = nimCopy(null, Temporary34, NTI1375733542);
                                  F.line = 51;
                                  grow_1241514933(look_1375732205.smL);
                                  F.line = 52;
                                  setLen_1241514902(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], (z_1375732747.subExp.nfa.s).length);
                                  F.line = 53;
                                  F.line = 53;
                                  switch (z_1375732747.kind) {
                                  case 41:
                                    Temporary35 = look_1375732205.ahead(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "a", look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "b", capts_1375732201, capts_1375732201_Idx, captx_1375732219, 0, text_1375732203, z_1375732747.subExp.nfa, look_1375732205, i_1375732217, flags2_1375732763);
                                    break;
                                  case 43:
                                    Temporary35 = !(look_1375732205.ahead(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "a", look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "b", capts_1375732201, capts_1375732201_Idx, captx_1375732219, 0, text_1375732203, z_1375732747.subExp.nfa, look_1375732205, i_1375732217, flags2_1375732763));
                                    break;
                                  case 42:
                                    Temporary35 = !((look_1375732205.behind(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "a", look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "b", capts_1375732201, capts_1375732201_Idx, captx_1375732219, 0, text_1375732203, z_1375732747.subExp.nfa, look_1375732205, i_1375732217, 0, flags2_1375732763) == -1));
                                    break;
                                  case 44:
                                    Temporary35 = (look_1375732205.behind(look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "a", look_1375732205.smL.s[chckIndx(subInt(look_1375732205.smL.i, 1), 0, (look_1375732205.smL.s).length - 1)], "b", capts_1375732201, capts_1375732201_Idx, captx_1375732219, 0, text_1375732203, z_1375732747.subExp.nfa, look_1375732205, i_1375732217, 0, flags2_1375732763) == -1);
                                    break;
                                  default: 
                                    if (true) {
                                    F.line = 71;
                                    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(71, 14) `false` "));
                                    }
                                    
                                    Temporary35 = false;
                                    break;
                                  }
                                  matched_1375732220 = Temporary35;
                                  F.line = 73;
                                  removeLast_1241514958(look_1375732205.smL);
                                  break;
                                default: 
                                  if (true) {
                                  F.line = 113;
                                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(113, 20) `false` "));
                                  }
                                  
                                  break;
                                }
                                F.line = 239;
                                i_436212799 = addInt(i_436212799, 1);
                                if (!(((colontmp__436212798).length == L_436212800))) {
                                F.line = 240;
                                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                                }
                                
                              }
                          } while (false);
                        } while (false);
                        if (matched_1375732220) {
                        F.line = 116;
                        add_1241514840(smB_1375732200, smB_1375732200_Idx, {Field0: nt_1375732734, Field1: captx_1375732219[0], Field2: HEX2EHEX2E_838861651(i_1375732217, bounds_1375732723.b)});
                        }
                        
                      } while (false);
                      F.line = 172;
                      i_436212803 = addInt(i_436212803, 1);
                      if (!(((colontmp__436212802).length == L_436212804))) {
                      F.line = 173;
                      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
              F.line = 93;
              res_436212809 = addInt(res_436212809, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    F.line = 196;
    var Temporary36 = smA_1375732199[smA_1375732199_Idx]; smA_1375732199[smA_1375732199_Idx] = smB_1375732200[smB_1375732200_Idx]; smB_1375732200[smB_1375732200_Idx] = Temporary36;    Label37: do {
      F.line = 197;
      var n_1375732786 = 0;
      F.line = 197;
      var capt_1375732787 = 0;
      F.line = 197;
      var bounds_1375732788 = ({a: 0, b: 0});
      Label38: do {
        F.line = 134;
        var i_436212815 = 0;
        F.line = 75;
        var colontmp__436212816 = 0;
        F.line = 134;
        colontmp__436212816 = subInt(len_1241514871(smA_1375732199[smA_1375732199_Idx]), 1);
        F.line = 90;
        var res_436212817 = 0;
        Label39: do {
          F.line = 91;
            Label40: while (true) {
            if (!(res_436212817 <= colontmp__436212816)) break Label40;
              F.line = 134;
              i_436212815 = res_436212817;
              F.line = 197;
              var colontmp__436212820 = nimCopy(null, smA_1375732199[smA_1375732199_Idx].sx[chckIndx(i_436212815, 0, (smA_1375732199[smA_1375732199_Idx].sx).length - 1)], NTI1241514495);
              F.line = 197;
              n_1375732786 = colontmp__436212820["Field0"];
              F.line = 197;
              capt_1375732787 = colontmp__436212820["Field1"];
              F.line = 197;
              bounds_1375732788 = nimCopy(bounds_1375732788, colontmp__436212820["Field2"], NTI687865917);
              if ((nfa_1375732204.s[chckIndx(n_1375732786, 0, (nfa_1375732204.s).length - 1)].kind == 46)) {
              if ((flags_1375732208[6] != undefined)) {
              F.line = 200;
              captIdx_1375732202[captIdx_1375732202_Idx] = reverse_1241514161(capts_1375732201, capts_1375732201_Idx, capt_1375732787, captIdx_1375732202[captIdx_1375732202_Idx]);
              }
              else {
                F.line = 202;
                captIdx_1375732202[captIdx_1375732202_Idx] = capt_1375732787;
              }
              
              F.line = 203;
              result_1375732209 = bounds_1375732788.a;
              break BeforeRet;
              }
              
              F.line = 93;
              res_436212817 = addInt(res_436212817, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    F.line = 204;
    result_1375732209 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1375732209;

}

function cap_1241514883(sm_1241514884) {
  var result_1241514885 = 0;

  var F = {procname: "nfatype.cap", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    F.line = 143;
    result_1241514885 = (sm_1241514884.ss).length;
  framePtr = F.prev;

  return result_1241514885;

}

function clear_1358954554(ms_1358954555) {
  var F = {procname: "nfafindall.clear", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
    F.line = 84;
    ms_1358954555.i = 0;
  framePtr = F.prev;

  
}

function clear_1358954565(ms_1358954566) {
  var F = {procname: "nfafindall.clear", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
    F.line = 108;
    clear_1241514874(ms_1358954566, "a");
    F.line = 109;
    clear_1241514874(ms_1358954566, "b");
    F.line = 110;
    clear_1358954554(ms_1358954566.m);
    F.line = 111;
    if (ms_1358954566.c.length < 0) { for (var i = ms_1358954566.c.length ; i < 0 ; ++i) ms_1358954566.c.push(({parent: 0, bound: 0, idx: 0})); }
               else { ms_1358954566.c.length = 0; };
  framePtr = F.prev;

  
}

function reversedMatchImpl_1375732797(smA_1375732798, smA_1375732798_Idx, smB_1375732799, smB_1375732799_Idx, text_1375732800, nfa_1375732801, look_1375732802, start_1375732803, limit_1375732804) {
  var result_1375732805 = 0;

  var F = {procname: "nfamatch.reversedMatchImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
  framePtr = F;
    F.line = 213;
    F.line = 213;
    var capts_1375732806 = [[]];
    F.line = 214;
    var captIdx_1375732807 = [-1];
    result_1375732805 = reversedMatchImpl_1375732198(smA_1375732798, smA_1375732798_Idx, smB_1375732799, smB_1375732799_Idx, capts_1375732806, 0, captIdx_1375732807, 0, text_1375732800, nfa_1375732801, look_1375732802, start_1375732803, limit_1375732804, ConstSet17);
  framePtr = F.prev;

  return result_1375732805;

}

function len_1358954520(ms_1358954521) {
  var result_1358954522 = 0;

  var F = {procname: "nfafindall.len", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
    F.line = 65;
    result_1358954522 = ms_1358954521.i;
  framePtr = F.prev;

  return result_1358954522;

}

function add_1358954523(ms_1358954524, m_1358954525) {
  var F = {procname: "nfafindall.add", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
    F.line = 71;
    var size_1358954526 = 0;
    Label1: do {
      F.line = 72;
      var i_1358954532 = 0;
      F.line = 6;
      var colontmp__436212835 = 0;
      F.line = 72;
      colontmp__436212835 = subInt(len_1358954520(ms_1358954524), 1);
      F.line = 33;
      var res_436212836 = colontmp__436212835;
      Label2: do {
        F.line = 34;
          Label3: while (true) {
          if (!(0 <= res_436212836)) break Label3;
            F.line = 72;
            i_1358954532 = res_436212836;
            if ((nimMax(ms_1358954524.s[chckIndx(i_1358954532, 0, (ms_1358954524.s).length - 1)].Field1.b, ms_1358954524.s[chckIndx(i_1358954532, 0, (ms_1358954524.s).length - 1)].Field1.a) < m_1358954525.Field1.a)) {
            F.line = 74;
            size_1358954526 = addInt(i_1358954532, 1);
            F.line = 75;
            break Label1;
            }
            
            F.line = 36;
            res_436212836 = subInt(res_436212836, 1);
          }
      } while (false);
    } while (false);
    F.line = 76;
    ms_1358954524.i = size_1358954526;
    if ((ms_1358954524.i <= subInt((ms_1358954524.s).length, 1))) {
    F.line = 78;
    ms_1358954524.s[chckIndx(ms_1358954524.i, 0, (ms_1358954524.s).length - 1)] = nimCopy(ms_1358954524.s[chckIndx(ms_1358954524.i, 0, (ms_1358954524.s).length - 1)], m_1358954525, NTI1358954500);
    }
    else {
      F.line = 80;
      var Temporary4 = nimCopy(null, m_1358954525, NTI1358954500);
    ms_1358954524.s.push(Temporary4);;
    }
    
    F.line = 81;
    ms_1358954524.i = addInt(ms_1358954524.i, 1);
  framePtr = F.prev;

  
}

function submatch_1358954736(ms_1358954737, text_1358954738, regex_1358954739, i_1358954740, cPrev_1358954741, c_1358954742) {
                      var Temporary7;
                      var Temporary8;
                      var Temporary10;
                              var Temporary13;
                              var Temporary14;

  var F = {procname: "nfafindall.submatch", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
    F.line = 158;
    clear_1241514874(ms_1358954737, "b");
    F.line = 159;
    var captx_1358954752 = [0];
    F.line = 160;
    var matched_1358954753 = true;
    F.line = 161;
    var eoeFound_1358954754 = false;
    F.line = 162;
    var smi_1358954755 = 0;
    Label1: do {
      F.line = 163;
        Label2: while (true) {
        if (!(smi_1358954755 < len_1241514871(ms_1358954737.a))) break Label2;
          Label3: do {
            F.line = 164;
            var nti_1358954761 = 0;
            F.line = 164;
            var nt_1358954762 = 0;
            F.line = 166;
            var colontmp__436212830 = [];
            F.line = 164;
            colontmp__436212830 = regex_1358954739.nfa.s[chckIndx(HEX5BHEX5D_1241514827(ms_1358954737.a, smi_1358954755).Field0, 0, (regex_1358954739.nfa.s).length - 1)].next;
            F.line = 168;
            var i_436212831 = 0;
            F.line = 169;
            var L_436212832 = (colontmp__436212830).length;
            Label4: do {
              F.line = 170;
                Label5: while (true) {
                if (!(i_436212831 < L_436212832)) break Label5;
                  F.line = 164;
                  nti_1358954761 = i_436212831;
                  F.line = 164;
                  nt_1358954762 = colontmp__436212830[chckIndx(i_436212831, 0, (colontmp__436212830).length - 1)];
                  Label6: do {
                    if (hasState_1241514836(ms_1358954737.b, nt_1358954762)) {
                    F.line = 166;
                    break Label6;
                    }
                    
                      if (!!((regex_1358954739.nfa.s[chckIndx(nt_1358954762, 0, (regex_1358954739.nfa.s).length - 1)].kind == 46))) Temporary7 = false; else {                        Temporary7 = !(match_1275068547(regex_1358954739.nfa.s[chckIndx(nt_1358954762, 0, (regex_1358954739.nfa.s).length - 1)], c_1358954742));                      }                    if (Temporary7) {
                    F.line = 168;
                    break Label6;
                    }
                    
                    F.line = 169;
                    matched_1358954753 = true;
                    F.line = 170;
                    captx_1358954752[0] = HEX5BHEX5D_1241514827(ms_1358954737.a, smi_1358954755).Field1;
                    if ((-1 < (Temporary8 = regex_1358954739.nfa.t.allZ[chckIndx(HEX5BHEX5D_1241514827(ms_1358954737.a, smi_1358954755).Field0, 0, (regex_1358954739.nfa.t.allZ).length - 1)], Temporary8)[chckIndx(nti_1358954761, 0, (Temporary8).length - 1)])) {
                    Label9: do {
                      F.line = 172;
                      var z_1358954770 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
                      F.line = 233;
                      var colontmp__436212826 = [];
                      F.line = 172;
                      colontmp__436212826 = regex_1358954739.nfa.t.z[chckIndx((Temporary10 = regex_1358954739.nfa.t.allZ[chckIndx(HEX5BHEX5D_1241514827(ms_1358954737.a, smi_1358954755).Field0, 0, (regex_1358954739.nfa.t.allZ).length - 1)], Temporary10)[chckIndx(nti_1358954761, 0, (Temporary10).length - 1)], 0, (regex_1358954739.nfa.t.z).length - 1)];
                      F.line = 235;
                      var i_436212827 = 0;
                      F.line = 236;
                      var L_436212828 = (colontmp__436212826).length;
                      Label11: do {
                        F.line = 237;
                          Label12: while (true) {
                          if (!(i_436212827 < L_436212828)) break Label12;
                            F.line = 172;
                            z_1358954770 = colontmp__436212826[chckIndx(i_436212827, 0, (colontmp__436212826).length - 1)];
                            if (!(matched_1358954753)) {
                            F.line = 174;
                            break Label9;
                            }
                            
                            F.line = 172;
                            switch (z_1358954770.kind) {
                            case 3:
                            case 4:
                              F.line = 177;
                              ms_1358954737.c.push({parent: captx_1358954752[0], bound: i_1358954740, idx: z_1358954770.idx});;
                              F.line = 181;
                              captx_1358954752[0] = ((subInt((ms_1358954737.c).length, 1)) | 0);
                              break;
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 18:
                            case 29:
                            case 30:
                              F.line = 183;
                              matched_1358954753 = match_1275068465(z_1358954770, cPrev_1358954741, c_1358954742);
                              break;
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                              F.line = 47;
                              if (z_1358954770.subExp.reverseCapts) {
                              Temporary13 = ConstSet18;
                              }
                              else {
                              Temporary13 = ConstSet19;
                              }
                              
                              var flags2_1358954786 = nimCopy(null, Temporary13, NTI1358954682);
                              F.line = 51;
                              grow_1241514933(ms_1358954737.look.smL);
                              F.line = 52;
                              setLen_1241514902(ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], (z_1358954770.subExp.nfa.s).length);
                              F.line = 53;
                              F.line = 53;
                              switch (z_1358954770.kind) {
                              case 41:
                                Temporary14 = ms_1358954737.look.ahead(ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], "a", ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], "b", ms_1358954737, "c", captx_1358954752, 0, text_1358954738, z_1358954770.subExp.nfa, ms_1358954737.look, i_1358954740, flags2_1358954786);
                                break;
                              case 43:
                                Temporary14 = !(ms_1358954737.look.ahead(ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], "a", ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], "b", ms_1358954737, "c", captx_1358954752, 0, text_1358954738, z_1358954770.subExp.nfa, ms_1358954737.look, i_1358954740, flags2_1358954786));
                                break;
                              case 42:
                                Temporary14 = !((ms_1358954737.look.behind(ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], "a", ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], "b", ms_1358954737, "c", captx_1358954752, 0, text_1358954738, z_1358954770.subExp.nfa, ms_1358954737.look, i_1358954740, 0, flags2_1358954786) == -1));
                                break;
                              case 44:
                                Temporary14 = (ms_1358954737.look.behind(ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], "a", ms_1358954737.look.smL.s[chckIndx(subInt(ms_1358954737.look.smL.i, 1), 0, (ms_1358954737.look.smL.s).length - 1)], "b", ms_1358954737, "c", captx_1358954752, 0, text_1358954738, z_1358954770.subExp.nfa, ms_1358954737.look, i_1358954740, 0, flags2_1358954786) == -1);
                                break;
                              default: 
                                if (true) {
                                F.line = 71;
                                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim(71, 14) `false` "));
                                }
                                
                                Temporary14 = false;
                                break;
                              }
                              matched_1358954753 = Temporary14;
                              F.line = 73;
                              removeLast_1241514958(ms_1358954737.look.smL);
                              break;
                            default: 
                              if (true) {
                              F.line = 187;
                              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(187, 20) `false` "));
                              }
                              
                              break;
                            }
                            F.line = 239;
                            i_436212827 = addInt(i_436212827, 1);
                            if (!(((colontmp__436212826).length == L_436212828))) {
                            F.line = 240;
                            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                            }
                            
                          }
                      } while (false);
                    } while (false);
                    }
                    
                    if (matched_1358954753) {
                    if ((regex_1358954739.nfa.s[chckIndx(nt_1358954762, 0, (regex_1358954739.nfa.s).length - 1)].kind == 46)) {
                    F.line = 192;
                    add_1358954523(ms_1358954737.m, {Field0: captx_1358954752[0], Field1: HEX2EHEX2E_838861651(HEX5BHEX5D_1241514827(ms_1358954737.a, smi_1358954755).Field2.a, subInt(i_1358954740, 1))});
                    F.line = 193;
                    clear_1241514874(ms_1358954737, "a");
                    if (!(eoeFound_1358954754)) {
                    F.line = 195;
                    eoeFound_1358954754 = true;
                    F.line = 196;
                    add_1241514840(ms_1358954737, "a", {Field0: 0, Field1: -1, Field2: HEX2EHEX2E_838861651(i_1358954740, subInt(i_1358954740, 1))});
                    }
                    
                    F.line = 197;
                    smi_1358954755 = -1;
                    F.line = 198;
                    break Label3;
                    }
                    
                    F.line = 199;
                    add_1241514840(ms_1358954737, "b", {Field0: nt_1358954762, Field1: captx_1358954752[0], Field2: HEX2EHEX2E_838861651(HEX5BHEX5D_1241514827(ms_1358954737.a, smi_1358954755).Field2.a, subInt(i_1358954740, 1))});
                    }
                    
                  } while (false);
                  F.line = 172;
                  i_436212831 = addInt(i_436212831, 1);
                  if (!(((colontmp__436212830).length == L_436212832))) {
                  F.line = 173;
                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while (false);
          } while (false);
          F.line = 200;
          smi_1358954755 = addInt(smi_1358954755, 1);
        }
    } while (false);
    F.line = 201;
    var Temporary15 = ms_1358954737.a; ms_1358954737.a = ms_1358954737.b; ms_1358954737.b = Temporary15;  framePtr = F.prev;

  
}

function hasMatches_1358954562(ms_1358954563) {
  var result_1358954564 = false;

  var F = {procname: "nfafindall.hasMatches", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 105;
    result_1358954564 = (0 < len_1358954520(ms_1358954563.m));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1358954564;

}

function findSomeImpl_1358954827(text_1358954828, regex_1358954829, ms_1358954830, start_1358954831, flags_1358954832) {
      var Temporary1;

  var result_1358954833 = 0;

  var F = {procname: "nfafindall.findSomeImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if ((ms_1358954830.a == null)) {
    if (!((ms_1358954830.b == null))) {
    F.line = 91;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(91, 12) `ms.b == nil` "));
    }
    
    F.line = 92;
    ms_1358954830.a = newSubmatches_1241514760((regex_1358954829.nfa.s).length);
    F.line = 93;
    ms_1358954830.b = newSubmatches_1241514760((regex_1358954829.nfa.s).length);
    F.line = 94;
    ms_1358954830.look = nimCopy(ms_1358954830.look, {ahead: matchImpl_1375731751, behind: reversedMatchImpl_1375732198, smL: ({s: [], i: 0})}, NTI1375731717);
    }
    
      if (!((regex_1358954829.nfa.s).length <= cap_1241514883(ms_1358954830.a))) Temporary1 = false; else {        Temporary1 = ((regex_1358954829.nfa.s).length <= cap_1241514883(ms_1358954830.b));      }    if (!(Temporary1)) {
    F.line = 211;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(211, 16) `ms.a.cap >= len(regex.nfa.s) and ms.b.cap >= len(regex.nfa.s)` "));
    }
    
    F.line = 212;
    clear_1358954565(ms_1358954830);
    F.line = 214;
    var c_1358954856 = -1;
    F.line = 215;
    var cPrev_1358954857 = -1;
    F.line = 216;
    var i_1358954858 = start_1358954831;
    F.line = 217;
    var iPrev_1358954859 = start_1358954831;
    F.line = 218;
    var optFlag_1358954864 = (flags_1358954832[3] != undefined);
    F.line = 219;
    add_1241514840(ms_1358954830, "a", {Field0: 0, Field1: -1, Field2: HEX2EHEX2E_838861651(i_1358954858, subInt(i_1358954858, 1))});
    if (contains_1174405250(HEX2EHEX2E_838861651(0, subInt((text_1358954828).length, 1)), subInt(start_1358954831, 1))) {
    F.line = 221;
    cPrev_1358954857 = bwRuneAt_1140850730(text_1358954828, subInt(start_1358954831, 1));
    }
    
    Label2: do {
      F.line = 222;
        Label3: while (true) {
        if (!(i_1358954858 < (text_1358954828).length)) break Label3;
          if ((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] <= 127)) {
          F.line = 81;
          c_1358954856 = chckRange(text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)], -2147483648, 2147483647);
          F.line = 82;
          i_1358954858 = addInt(i_1358954858, 1);
          }
          else {
          if (((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] >>> 5) == 6)) {
          if ((i_1358954858 <= subInt((text_1358954828).length, 2))) {
          F.line = 86;
          c_1358954856 = chckRange((((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] & 31) << 6) | (text_1358954828[chckIndx(addInt(i_1358954858, 1), 0, (text_1358954828).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 88;
          i_1358954858 = addInt(i_1358954858, 2);
          }
          else {
            F.line = 90;
            c_1358954856 = 65533;
            F.line = 91;
            i_1358954858 = addInt(i_1358954858, 1);
          }
          
          }
          else {
          if (((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] >>> 4) == 14)) {
          if ((i_1358954858 <= subInt((text_1358954828).length, 3))) {
          F.line = 96;
          c_1358954856 = chckRange(((((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] & 15) << 12) | ((text_1358954828[chckIndx(addInt(i_1358954858, 1), 0, (text_1358954828).length - 1)] & 63) << 6)) | (text_1358954828[chckIndx(addInt(i_1358954858, 2), 0, (text_1358954828).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 99;
          i_1358954858 = addInt(i_1358954858, 3);
          }
          else {
            F.line = 101;
            c_1358954856 = 65533;
            F.line = 102;
            i_1358954858 = addInt(i_1358954858, 1);
          }
          
          }
          else {
          if (((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] >>> 3) == 30)) {
          if ((i_1358954858 <= subInt((text_1358954828).length, 4))) {
          F.line = 108;
          c_1358954856 = chckRange((((((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] & 7) << 18) | ((text_1358954828[chckIndx(addInt(i_1358954858, 1), 0, (text_1358954828).length - 1)] & 63) << 12)) | ((text_1358954828[chckIndx(addInt(i_1358954858, 2), 0, (text_1358954828).length - 1)] & 63) << 6)) | (text_1358954828[chckIndx(addInt(i_1358954858, 3), 0, (text_1358954828).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 112;
          i_1358954858 = addInt(i_1358954858, 4);
          }
          else {
            F.line = 114;
            c_1358954856 = 65533;
            F.line = 115;
            i_1358954858 = addInt(i_1358954858, 1);
          }
          
          }
          else {
          if (((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] >>> 2) == 62)) {
          if ((i_1358954858 <= subInt((text_1358954828).length, 5))) {
          F.line = 122;
          c_1358954856 = chckRange(((((((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] & 3) << 24) | ((text_1358954828[chckIndx(addInt(i_1358954858, 1), 0, (text_1358954828).length - 1)] & 63) << 18)) | ((text_1358954828[chckIndx(addInt(i_1358954858, 2), 0, (text_1358954828).length - 1)] & 63) << 12)) | ((text_1358954828[chckIndx(addInt(i_1358954858, 3), 0, (text_1358954828).length - 1)] & 63) << 6)) | (text_1358954828[chckIndx(addInt(i_1358954858, 4), 0, (text_1358954828).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 127;
          i_1358954858 = addInt(i_1358954858, 5);
          }
          else {
            F.line = 129;
            c_1358954856 = 65533;
            F.line = 130;
            i_1358954858 = addInt(i_1358954858, 1);
          }
          
          }
          else {
          if (((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] >>> 1) == 126)) {
          if ((i_1358954858 <= subInt((text_1358954828).length, 6))) {
          F.line = 138;
          c_1358954856 = chckRange((((((((text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)] & 1) << 30) | ((text_1358954828[chckIndx(addInt(i_1358954858, 1), 0, (text_1358954828).length - 1)] & 63) << 24)) | ((text_1358954828[chckIndx(addInt(i_1358954858, 2), 0, (text_1358954828).length - 1)] & 63) << 18)) | ((text_1358954828[chckIndx(addInt(i_1358954858, 3), 0, (text_1358954828).length - 1)] & 63) << 12)) | ((text_1358954828[chckIndx(addInt(i_1358954858, 4), 0, (text_1358954828).length - 1)] & 63) << 6)) | (text_1358954828[chckIndx(addInt(i_1358954858, 5), 0, (text_1358954828).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 144;
          i_1358954858 = addInt(i_1358954858, 6);
          }
          else {
            F.line = 146;
            c_1358954856 = 65533;
            F.line = 147;
            i_1358954858 = addInt(i_1358954858, 1);
          }
          
          }
          else {
            F.line = 149;
            c_1358954856 = chckRange(text_1358954828[chckIndx(i_1358954858, 0, (text_1358954828).length - 1)], -2147483648, 2147483647);
            F.line = 150;
            i_1358954858 = addInt(i_1358954858, 1);
          }
          }}}}}
          F.line = 227;
          submatch_1358954736(ms_1358954830, text_1358954828, regex_1358954829, iPrev_1358954859, cPrev_1358954857, c_1358954856);
          if ((len_1241514871(ms_1358954830.a) == 0)) {
          if ((i_1358954858 < (text_1358954828).length)) {
          if (hasMatches_1358954562(ms_1358954830)) {
          F.line = 234;
          result_1358954833 = i_1358954858;
          break BeforeRet;
          }
          
          if (optFlag_1358954864) {
          F.line = 237;
          result_1358954833 = i_1358954858;
          break BeforeRet;
          }
          
          }
          
          }
          
          F.line = 238;
          add_1241514840(ms_1358954830, "a", {Field0: 0, Field1: -1, Field2: HEX2EHEX2E_838861651(i_1358954858, subInt(i_1358954858, 1))});
          F.line = 239;
          iPrev_1358954859 = i_1358954858;
          F.line = 240;
          cPrev_1358954857 = c_1358954856;
        }
    } while (false);
    F.line = 241;
    submatch_1358954736(ms_1358954830, text_1358954828, regex_1358954829, iPrev_1358954859, cPrev_1358954857, -1);
    if (!((len_1241514871(ms_1358954830.a) == 0))) {
    F.line = 242;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(242, 12) `smA.len == 0` "));
    }
    
    if (hasMatches_1358954562(ms_1358954830)) {
    F.line = 245;
    result_1358954833 = i_1358954858;
    break BeforeRet;
    }
    
    F.line = 247;
    result_1358954833 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1358954833;

}

function findSomeOptImpl_1358955141(text_1358955142, regex_1358955143, ms_1358955144, start_1358955145) {
      var Temporary1;

  var result_1358955146 = 0;

  var F = {procname: "nfafindall.findSomeOptImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (!((0 < (regex_1358955143.litOpt.nfa.s).length))) {
    F.line = 265;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(265, 12) `opt.nfa.s.len > 0` "));
    }
    
    if ((ms_1358955144.a == null)) {
    if (!((ms_1358955144.b == null))) {
    F.line = 91;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(91, 12) `ms.b == nil` "));
    }
    
    F.line = 92;
    ms_1358955144.a = newSubmatches_1241514760(nimMax((regex_1358955143.litOpt.nfa.s).length, (regex_1358955143.nfa.s).length));
    F.line = 93;
    ms_1358955144.b = newSubmatches_1241514760(nimMax((regex_1358955143.litOpt.nfa.s).length, (regex_1358955143.nfa.s).length));
    F.line = 94;
    ms_1358955144.look = nimCopy(ms_1358955144.look, {ahead: matchImpl_1375731751, behind: reversedMatchImpl_1375732198, smL: ({s: [], i: 0})}, NTI1375731717);
    }
    
      if (!(nimMax((regex_1358955143.litOpt.nfa.s).length, (regex_1358955143.nfa.s).length) <= cap_1241514883(ms_1358955144.a))) Temporary1 = false; else {        Temporary1 = (nimMax((regex_1358955143.litOpt.nfa.s).length, (regex_1358955143.nfa.s).length) <= cap_1241514883(ms_1358955144.b));      }    if (!(Temporary1)) {
    F.line = 266;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(266, 16) `ms.a.cap >= max(len(regex.litOpt.nfa.s), len(regex.nfa.s)) and\x0A    ms.b.cap >= max(len(regex.litOpt.nfa.s), len(regex.nfa.s))` "));
    }
    
    F.line = 267;
    clear_1358954565(ms_1358955144);
    F.line = 268;
    var limit_1358955184 = start_1358955145;
    F.line = 269;
    var i_1358955185 = start_1358955145;
    F.line = 270;
    var i2_1358955186 = -1;
    Label2: do {
      F.line = 271;
        Label3: while (true) {
        if (!(i_1358955185 < (text_1358955142).length)) break Label3;
          if (!((i2_1358955186 < i_1358955185))) {
          F.line = 272;
          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(272, 14) `i > i2` "));
          }
          
          F.line = 272;
          i2_1358955186 = i_1358955185;
          F.line = 275;
          var litIdx_1358955192 = nsuFindChar(text_1358955142, chckRange(regex_1358955143.litOpt.lit, 0, 255), chckRange(i_1358955185, 0, 2147483647), 0);
          if ((litIdx_1358955192 == -1)) {
          F.line = 277;
          result_1358955146 = -1;
          break BeforeRet;
          }
          
          if (!((i_1358955185 <= litIdx_1358955192))) {
          F.line = 279;
          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(279, 14) `litIdx >= i` "));
          }
          
          F.line = 280;
          i_1358955185 = litIdx_1358955192;
          F.line = 281;
          i_1358955185 = reversedMatchImpl_1375732797(ms_1358955144, "a", ms_1358955144, "b", text_1358955142, regex_1358955143.litOpt.nfa, ms_1358955144.look, i_1358955185, limit_1358955184);
          if ((i_1358955185 == -1)) {
          F.line = 284;
          i_1358955185 = addInt(litIdx_1358955192, 1);
          }
          else {
            if (!((i_1358955185 <= litIdx_1358955192))) {
            F.line = 286;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim(286, 16) `i <= litIdx` "));
            }
            
            F.line = 288;
            i_1358955185 = findSomeImpl_1358954827(text_1358955142, regex_1358955143, ms_1358955144, chckRange(i_1358955185, 0, 2147483647), ConstSet20);
            if (hasMatches_1358954562(ms_1358955144)) {
            F.line = 291;
            result_1358955146 = i_1358955185;
            break BeforeRet;
            }
            
            if ((i_1358955185 == -1)) {
            F.line = 293;
            result_1358955146 = -1;
            break BeforeRet;
            }
            
          }
          
        }
    } while (false);
    F.line = 294;
    result_1358955146 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1358955146;

}

function len_1241514265(t_1241514268) {
  var result_1241514269 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 1509;
    result_1241514269 = t_1241514268.counter;
  framePtr = F.prev;

  return result_1241514269;

}

function HEX5BHEX5D_1241514040(s_1241514042, i_1241514043) {
  var result_1241514044 = null;

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2649;
    result_1241514044 = s_1241514042[chckIndx(subInt((s_1241514042).length, i_1241514043), 0, (s_1241514042).length - 1)];
  framePtr = F.prev;

  return result_1241514044;

}

function reverse_1241514106(a_1241514108, first_1241514109, last_1241514110) {
  var F = {procname: "reverse.reverse", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 112;
    var x_1241514111 = first_1241514109;
    F.line = 113;
    var y_1241514112 = last_1241514110;
    Label1: do {
      F.line = 114;
        Label2: while (true) {
        if (!(x_1241514111 < y_1241514112)) break Label2;
          F.line = 115;
          var Temporary3 = a_1241514108[chckIndx(x_1241514111, 0, (a_1241514108).length - 1)]; a_1241514108[chckIndx(x_1241514111, 0, (a_1241514108).length - 1)] = a_1241514108[chckIndx(y_1241514112, 0, (a_1241514108).length - 1)]; a_1241514108[chckIndx(y_1241514112, 0, (a_1241514108).length - 1)] = Temporary3;          F.line = 116;
          y_1241514112 = subInt(y_1241514112, 1);
          F.line = 117;
          x_1241514111 = addInt(x_1241514111, 1);
        }
    } while (false);
  framePtr = F.prev;

  
}

function reverse_1241514100(a_1241514102) {
  var F = {procname: "reverse.reverse", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 132;
    reverse_1241514106(a_1241514102, 0, chckRange(nimMax(0, (a_1241514102).length - 1), 0, 2147483647));
  framePtr = F.prev;

  
}

function constructSubmatches_1241513999(captures_1241514000, captures_1241514000_Idx, capts_1241514001, capt_1241514002, size_1241514003) {
  var F = {procname: "nfatype.constructSubmatches", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 25;
    if (captures_1241514000[captures_1241514000_Idx].length < chckRange(size_1241514003, 0, 2147483647)) { for (var i = captures_1241514000[captures_1241514000_Idx].length ; i < chckRange(size_1241514003, 0, 2147483647) ; ++i) captures_1241514000[captures_1241514000_Idx].push([]); }
               else { captures_1241514000[captures_1241514000_Idx].length = chckRange(size_1241514003, 0, 2147483647); };
    Label1: do {
      F.line = 26;
      var i_1241514017 = 0;
      F.line = 75;
      var colontmp__436212839 = 0;
      F.line = 26;
      colontmp__436212839 = subInt((captures_1241514000[captures_1241514000_Idx]).length, 1);
      F.line = 90;
      var res_436212840 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_436212840 <= colontmp__436212839)) break Label3;
            F.line = 26;
            i_1241514017 = res_436212840;
            F.line = 26;
            if (captures_1241514000[captures_1241514000_Idx][chckIndx(i_1241514017, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)].length < 0) { for (var i = captures_1241514000[captures_1241514000_Idx][chckIndx(i_1241514017, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)].length ; i < 0 ; ++i) captures_1241514000[captures_1241514000_Idx][chckIndx(i_1241514017, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)].push(({a: 0, b: 0})); }
               else { captures_1241514000[captures_1241514000_Idx][chckIndx(i_1241514017, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)].length = 0; };
            F.line = 93;
            res_436212840 = addInt(res_436212840, 1);
          }
      } while (false);
    } while (false);
    if (((capts_1241514001).length == 0)) {
    F.line = 29;
    break BeforeRet;
    }
    
    F.line = 30;
    var capt_1241514026 = capt_1241514002;
    Label4: do {
      F.line = 31;
        Label5: while (true) {
        if (!!((capt_1241514026 == -1))) break Label5;
          if (((captures_1241514000[captures_1241514000_Idx][chckIndx(capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].idx, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)]).length == 0)) {
          F.line = 33;
          captures_1241514000[captures_1241514000_Idx][chckIndx(capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].idx, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)].push(HEX2EHEX2E_838861651(-2, -2));;
          }
          
          if (!((HEX5BHEX5D_1241514040(captures_1241514000[captures_1241514000_Idx][chckIndx(capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].idx, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)], 1).a == -2))) {
          F.line = 35;
          captures_1241514000[captures_1241514000_Idx][chckIndx(capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].idx, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)].push(HEX2EHEX2E_838861651(-2, -2));;
          }
          
          if ((HEX5BHEX5D_1241514040(captures_1241514000[captures_1241514000_Idx][chckIndx(capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].idx, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)], 1).b == -2)) {
          F.line = 37;
          HEX5BHEX5D_1241514040(captures_1241514000[captures_1241514000_Idx][chckIndx(capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].idx, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)], 1).b = subInt(capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].bound, 1);
          }
          else {
            F.line = 39;
            HEX5BHEX5D_1241514040(captures_1241514000[captures_1241514000_Idx][chckIndx(capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].idx, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1)], 1).a = capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].bound;
          }
          
          F.line = 40;
          capt_1241514026 = ((capts_1241514001[chckIndx(capt_1241514026, 0, (capts_1241514001).length - 1)].parent) | 0);
        }
    } while (false);
    Label6: do {
      F.line = 41;
      var c_1241514099 = null;
      var c_1241514099_Idx = 0;
      F.line = 244;
      var i_436212845 = 0;
      F.line = 245;
      var L_436212846 = (captures_1241514000[captures_1241514000_Idx]).length;
      Label7: do {
        F.line = 246;
          Label8: while (true) {
          if (!(i_436212845 < L_436212846)) break Label8;
            F.line = 41;
            c_1241514099 = captures_1241514000[captures_1241514000_Idx]; c_1241514099_Idx = chckIndx(i_436212845, 0, (captures_1241514000[captures_1241514000_Idx]).length - 1);
            F.line = 41;
            reverse_1241514100(c_1241514099[c_1241514099_Idx]);
            F.line = 248;
            i_436212845 = addInt(i_436212845, 1);
            if (!(((captures_1241514000[captures_1241514000_Idx]).length == L_436212846))) {
            F.line = 249;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  } while (false);
  framePtr = F.prev;

  
}

function fillMatchImpl_1358954586(m_1358954587, mi_1358954588, ms_1358954589, regex_1358954590) {
  var F = {procname: "nfafindall.fillMatchImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfafindall.nim", line: 0};
  framePtr = F;
    if (!((len_1241514265(m_1358954587.namedGroups) == len_1241514265(regex_1358954590.namedGroups)))) {
    F.line = 128;
    m_1358954587.namedGroups = nimCopy(m_1358954587.namedGroups, regex_1358954590.namedGroups, NTI1224736906);
    }
    
    F.line = 129;
    constructSubmatches_1241513999(m_1358954587, "captures", ms_1358954589.c, ((ms_1358954589.m.s[chckIndx(mi_1358954588, 0, (ms_1358954589.m.s).length - 1)].Field0) | 0), ((regex_1358954590.groupsCount) | 0));
    F.line = 131;
    m_1358954587.boundaries = nimCopy(m_1358954587.boundaries, ms_1358954589.m.s[chckIndx(mi_1358954588, 0, (ms_1358954589.m.s).length - 1)].Field1, NTI687865917);
  framePtr = F.prev;

  
}

function addsubstr_1056966075(result_1056966076, result_1056966076_Idx, s_1056966077, first_1056966078, last_1056966079) {
  var F = {procname: "regex.addsubstr", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 776;
    var first_1056966080 = nimMax(first_1056966078, 0);
    F.line = 777;
    var last_1056966081 = nimMin(last_1056966079, (s_1056966077).length - 1);
    if ((last_1056966081 < first_1056966080)) {
    F.line = 778;
    break BeforeRet;
    }
    
    F.line = 779;
    var n_1056966082 = (result_1056966076[result_1056966076_Idx]).length;
    F.line = 780;
    (result_1056966076[result_1056966076_Idx].length = chckRange(addInt(subInt(addInt((result_1056966076[result_1056966076_Idx]).length, last_1056966081), first_1056966080), 1), 0, 2147483647));
    F.line = 782;
    var j_1056966083 = 0;
    Label1: do {
      F.line = 783;
      var i_1056966088 = 0;
      F.line = 90;
      var res_436212850 = first_1056966080;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_436212850 <= last_1056966081)) break Label3;
            F.line = 783;
            i_1056966088 = res_436212850;
            F.line = 784;
            result_1056966076[result_1056966076_Idx][chckIndx(addInt(n_1056966082, j_1056966083), 0, (result_1056966076[result_1056966076_Idx]).length - 1)] = s_1056966077[chckIndx(i_1056966088, 0, (s_1056966077).length - 1)];
            F.line = 783;
            j_1056966083 = addInt(j_1056966083, 1);
            F.line = 93;
            res_436212850 = addInt(res_436212850, 1);
          }
      } while (false);
    } while (false);
  } while (false);
  framePtr = F.prev;

  
}

function groupsCount_1056965245(m_1056965246) {
  var result_1056965247 = 0;

  var F = {procname: "regex.groupsCount", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 454;
    result_1056965247 = (m_1056965246.captures).length;
  framePtr = F.prev;

  return result_1056965247;

}

function flatCaptures_1056966040(result_1056966041, result_1056966041_Idx, m_1056966042, s_1056966043) {
  var F = {procname: "regex.flatCaptures", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 758;
    var i_1056966044 = 0;
    F.line = 758;
    var n_1056966045 = 0;
    Label1: do {
      F.line = 759;
      var g_1056966050 = 0;
      F.line = 117;
      var colontmp__436212881 = 0;
      F.line = 759;
      colontmp__436212881 = groupsCount_1056965245(m_1056966042);
      F.line = 119;
      var i_436212882 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212882 < colontmp__436212881)) break Label3;
            F.line = 759;
            g_1056966050 = i_436212882;
            F.line = 760;
            n_1056966045 = 0;
            Label4: do {
              F.line = 761;
              var sl_1056966051 = ({a: 0, b: 0});
              Label5: do {
                F.line = 322;
                var capt_436212861 = ({a: 0, b: 0});
                F.line = 233;
                var colontmp__436212862 = [];
                F.line = 322;
                colontmp__436212862 = m_1056966042.captures[chckIndx(g_1056966050, 0, (m_1056966042.captures).length - 1)];
                F.line = 235;
                var i_436212863 = 0;
                F.line = 236;
                var L_436212864 = (colontmp__436212862).length;
                Label6: do {
                  F.line = 237;
                    Label7: while (true) {
                    if (!(i_436212863 < L_436212864)) break Label7;
                      F.line = 322;
                      capt_436212861 = colontmp__436212862[chckIndx(i_436212863, 0, (colontmp__436212862).length - 1)];
                      F.line = 761;
                      sl_1056966051 = nimCopy(sl_1056966051, capt_436212861, NTI687865917);
                      if ((sl_1056966051.a <= sl_1056966051.b)) {
                      F.line = 763;
                      n_1056966045 = addInt(n_1056966045, addInt(subInt(sl_1056966051.b, sl_1056966051.a), 1));
                      }
                      
                      F.line = 239;
                      i_436212863 = addInt(i_436212863, 1);
                      if (!(((colontmp__436212862).length == L_436212864))) {
                      F.line = 240;
                      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            F.line = 764;
            i_1056966044 = 0;
            F.line = 759;
            (result_1056966041[result_1056966041_Idx][chckIndx(g_1056966050, 0, (result_1056966041[result_1056966041_Idx]).length - 1)].length = chckRange(n_1056966045, 0, 2147483647));
            Label8: do {
              F.line = 766;
              var sl_1056966056 = ({a: 0, b: 0});
              Label9: do {
                F.line = 322;
                var capt_436212876 = ({a: 0, b: 0});
                F.line = 233;
                var colontmp__436212877 = [];
                F.line = 322;
                colontmp__436212877 = m_1056966042.captures[chckIndx(g_1056966050, 0, (m_1056966042.captures).length - 1)];
                F.line = 235;
                var i_436212878 = 0;
                F.line = 236;
                var L_436212879 = (colontmp__436212877).length;
                Label10: do {
                  F.line = 237;
                    Label11: while (true) {
                    if (!(i_436212878 < L_436212879)) break Label11;
                      F.line = 322;
                      capt_436212876 = colontmp__436212877[chckIndx(i_436212878, 0, (colontmp__436212877).length - 1)];
                      F.line = 766;
                      sl_1056966056 = nimCopy(sl_1056966056, capt_436212876, NTI687865917);
                      Label12: do {
                        F.line = 767;
                        var c_1056966065 = 0;
                        Label13: do {
                          F.line = 129;
                          var x_436212872 = 0;
                          F.line = 90;
                          var res_436212873 = sl_1056966056.a;
                          Label14: do {
                            F.line = 91;
                              Label15: while (true) {
                              if (!(res_436212873 <= sl_1056966056.b)) break Label15;
                                F.line = 129;
                                x_436212872 = res_436212873;
                                F.line = 767;
                                c_1056966065 = x_436212872;
                                F.line = 768;
                                result_1056966041[result_1056966041_Idx][chckIndx(g_1056966050, 0, (result_1056966041[result_1056966041_Idx]).length - 1)][chckIndx(i_1056966044, 0, (result_1056966041[result_1056966041_Idx][chckIndx(g_1056966050, 0, (result_1056966041[result_1056966041_Idx]).length - 1)]).length - 1)] = s_1056966043[chckIndx(c_1056966065, 0, (s_1056966043).length - 1)];
                                F.line = 767;
                                i_1056966044 = addInt(i_1056966044, 1);
                                F.line = 93;
                                res_436212873 = addInt(res_436212873, 1);
                              }
                          } while (false);
                        } while (false);
                      } while (false);
                      F.line = 239;
                      i_436212878 = addInt(i_436212878, 1);
                      if (!(((colontmp__436212877).length == L_436212879))) {
                      F.line = 240;
                      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            if (!((i_1056966044 == n_1056966045))) {
            F.line = 770;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim(770, 12) `i == n` "));
            }
            
            F.line = 122;
            i_436212882 = addInt(i_436212882, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function invalidFormatString_637536334() {
  var F = {procname: "strutils.invalidFormatString", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2649;
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
  framePtr = F.prev;

  
}

function toLowerAscii_872415233(c_872415234) {
  var result_872415235 = 0;

  var F = {procname: "strimpl.toLowerAscii", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/std/private/strimpl.nim", line: 0};
  framePtr = F;
    if ((ConstSet25[c_872415234] != undefined)) {
    F.line = 3;
    result_872415235 = chckRange(addInt(c_872415234, 32), 0, 255);
    }
    else {
      F.line = 5;
      result_872415235 = c_872415234;
    }
    
  framePtr = F.prev;

  return result_872415235;

}

function nsuCmpIgnoreStyle(a_637534398, b_637534399) {
          var Temporary7;
          var Temporary8;

  var result_637534400 = 0;

  BeforeRet: do {
    var aLenHEX60gensym25_637534409 = (a_637534398).length;
    var bLenHEX60gensym25_637534410 = (b_637534399).length;
    var iHEX60gensym25_637534411 = 0;
    var jHEX60gensym25_637534412 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          Label3: do {
              Label4: while (true) {
              if (!((iHEX60gensym25_637534411 < aLenHEX60gensym25_637534409) && (a_637534398[iHEX60gensym25_637534411] == 95))) break Label4;
                iHEX60gensym25_637534411 += 1;
              }
          } while (false);
          Label5: do {
              Label6: while (true) {
              if (!((jHEX60gensym25_637534412 < bLenHEX60gensym25_637534410) && (b_637534399[jHEX60gensym25_637534412] == 95))) break Label6;
                jHEX60gensym25_637534412 += 1;
              }
          } while (false);
          if ((iHEX60gensym25_637534411 < aLenHEX60gensym25_637534409)) {
          Temporary7 = toLowerAscii_872415233(a_637534398[iHEX60gensym25_637534411]);
          }
          else {
          Temporary7 = 0;
          }
          
          var aaHEX60gensym25_637534421 = Temporary7;
          if ((jHEX60gensym25_637534412 < bLenHEX60gensym25_637534410)) {
          Temporary8 = toLowerAscii_872415233(b_637534399[jHEX60gensym25_637534412]);
          }
          else {
          Temporary8 = 0;
          }
          
          var bbHEX60gensym25_637534422 = Temporary8;
          result_637534400 = (aaHEX60gensym25_637534421 - bbHEX60gensym25_637534422);
          if (!((result_637534400 == 0))) {
          break BeforeRet;
          }
          
          if ((aLenHEX60gensym25_637534409 <= iHEX60gensym25_637534411)) {
          if ((bLenHEX60gensym25_637534410 <= jHEX60gensym25_637534412)) {
          result_637534400 = 0;
          break BeforeRet;
          }
          
          result_637534400 = -1;
          break BeforeRet;
          }
          else {
          if ((bLenHEX60gensym25_637534410 <= jHEX60gensym25_637534412)) {
          result_637534400 = 1;
          break BeforeRet;
          }
          }
          iHEX60gensym25_637534411 += 1;
          jHEX60gensym25_637534412 += 1;
        }
    } while (false);
  } while (false);

  return result_637534400;

}

function findNormalized_637536322(x_637536323, inArray_637536324) {
  var result_637536325 = 0;

  var F = {procname: "strutils.findNormalized", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 2641;
    var i_637536326 = 0;
    Label1: do {
      F.line = 2642;
        Label2: while (true) {
        if (!(i_637536326 < (inArray_637536324).length - 1)) break Label2;
          if ((nsuCmpIgnoreStyle(x_637536323, inArray_637536324[chckIndx(i_637536326, 0, (inArray_637536324).length - 1)]) == 0)) {
          F.line = 2643;
          result_637536325 = i_637536326;
          break BeforeRet;
          }
          
          F.line = 2644;
          i_637536326 = addInt(i_637536326, 2);
        }
    } while (false);
    F.line = 2646;
    result_637536325 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_637536325;

}

function nsuAddf(s_637536337, s_637536337_Idx, formatstr_637536338, a_637536339) {
                  var Temporary5;
            var Temporary6;
              var Temporary7;
            var Temporary10;
              var Temporary11;
                var Temporary12;
                  var Temporary15;
              var Temporary16;

  var F = {procname: "strutils.addf", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2655;
    var i_637536341 = 0;
    F.line = 2656;
    var num_637536342 = 0;
    Label1: do {
      F.line = 2657;
        Label2: while (true) {
        if (!(i_637536341 < (formatstr_637536338).length)) break Label2;
          if (((formatstr_637536338[chckIndx(i_637536341, 0, (formatstr_637536338).length - 1)] == 36) && (addInt(i_637536341, 1) < (formatstr_637536338).length))) {
          F.line = 2659;
          switch (formatstr_637536338[chckIndx(addInt(i_637536341, 1), 0, (formatstr_637536338).length - 1)]) {
          case 35:
            if (((a_637536339).length - 1 < num_637536342)) {
            F.line = 2661;
            invalidFormatString_637536334();
            }
            
            F.line = 2662;
            s_637536337[s_637536337_Idx].push.apply(s_637536337[s_637536337_Idx], a_637536339[chckIndx(num_637536342, 0, (a_637536339).length - 1)]);;
            F.line = 2663;
            i_637536341 = addInt(i_637536341, 2);
            F.line = 2664;
            num_637536342 = addInt(num_637536342, 1);
            break;
          case 36:
            F.line = 2666;
            addChar(s_637536337[s_637536337_Idx], 36);;
            F.line = 2667;
            i_637536341 = addInt(i_637536341, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            F.line = 2669;
            var j_637536358 = 0;
            F.line = 2670;
            i_637536341 = addInt(i_637536341, 1);
            F.line = 2671;
            var negative_637536363 = (formatstr_637536338[chckIndx(i_637536341, 0, (formatstr_637536338).length - 1)] == 45);
            if (negative_637536363) {
            F.line = 2672;
            i_637536341 = addInt(i_637536341, 1);
            }
            
            Label3: do {
              F.line = 2673;
                Label4: while (true) {
                  if (!(i_637536341 < (formatstr_637536338).length)) Temporary5 = false; else {                    Temporary5 = (ConstSet22[formatstr_637536338[chckIndx(i_637536341, 0, (formatstr_637536338).length - 1)]] != undefined);                  }                if (!Temporary5) break Label4;
                  F.line = 2674;
                  j_637536358 = subInt(addInt(mulInt(j_637536358, 10), formatstr_637536338[chckIndx(i_637536341, 0, (formatstr_637536338).length - 1)]), 48);
                  F.line = 2675;
                  i_637536341 = addInt(i_637536341, 1);
                }
            } while (false);
            F.line = 2676;
            if (!(negative_637536363)) {
            Temporary6 = subInt(j_637536358, 1);
            }
            else {
            Temporary6 = subInt((a_637536339).length, j_637536358);
            }
            
            var idx_637536386 = Temporary6;
              if ((idx_637536386 < 0)) Temporary7 = true; else {                Temporary7 = ((a_637536339).length - 1 < idx_637536386);              }            if (Temporary7) {
            F.line = 2677;
            invalidFormatString_637536334();
            }
            
            F.line = 2678;
            s_637536337[s_637536337_Idx].push.apply(s_637536337[s_637536337_Idx], a_637536339[chckIndx(idx_637536386, 0, (a_637536339).length - 1)]);;
            break;
          case 123:
            F.line = 2680;
            var j_637536390 = addInt(i_637536341, 2);
            F.line = 2681;
            var k_637536391 = 0;
            F.line = 2682;
            var negative_637536392 = (formatstr_637536338[chckIndx(j_637536390, 0, (formatstr_637536338).length - 1)] == 45);
            if (negative_637536392) {
            F.line = 2683;
            j_637536390 = addInt(j_637536390, 1);
            }
            
            F.line = 2684;
            var isNumber_637536397 = 0;
            Label8: do {
              F.line = 2685;
                Label9: while (true) {
                if (!((j_637536390 < (formatstr_637536338).length) && !((ConstSet23[formatstr_637536338[chckIndx(j_637536390, 0, (formatstr_637536338).length - 1)]] != undefined)))) break Label9;
                  if ((ConstSet24[formatstr_637536338[chckIndx(j_637536390, 0, (formatstr_637536338).length - 1)]] != undefined)) {
                  F.line = 2687;
                  k_637536391 = subInt(addInt(mulInt(k_637536391, 10), formatstr_637536338[chckIndx(j_637536390, 0, (formatstr_637536338).length - 1)]), 48);
                  if ((isNumber_637536397 == 0)) {
                  F.line = 2688;
                  isNumber_637536397 = 1;
                  }
                  
                  }
                  else {
                    F.line = 2690;
                    isNumber_637536397 = -1;
                  }
                  
                  F.line = 2691;
                  j_637536390 = addInt(j_637536390, 1);
                }
            } while (false);
            if ((isNumber_637536397 == 1)) {
            F.line = 2693;
            if (!(negative_637536392)) {
            Temporary10 = subInt(k_637536391, 1);
            }
            else {
            Temporary10 = subInt((a_637536339).length, k_637536391);
            }
            
            var idx_637536419 = Temporary10;
              if ((idx_637536419 < 0)) Temporary11 = true; else {                Temporary11 = ((a_637536339).length - 1 < idx_637536419);              }            if (Temporary11) {
            F.line = 2694;
            invalidFormatString_637536334();
            }
            
            F.line = 2695;
            s_637536337[s_637536337_Idx].push.apply(s_637536337[s_637536337_Idx], a_637536339[chckIndx(idx_637536419, 0, (a_637536339).length - 1)]);;
            }
            else {
              F.line = 2697;
              var x_637536423 = findNormalized_637536322(substr_33557906(formatstr_637536338, addInt(i_637536341, 2), subInt(j_637536390, 1)), a_637536339);
                if (!(0 <= x_637536423)) Temporary12 = false; else {                  Temporary12 = (x_637536423 < (a_637536339).length - 1);                }              if (Temporary12) {
              F.line = 2698;
              s_637536337[s_637536337_Idx].push.apply(s_637536337[s_637536337_Idx], a_637536339[chckIndx(addInt(x_637536423, 1), 0, (a_637536339).length - 1)]);;
              }
              else {
                F.line = 2699;
              invalidFormatString_637536334();
              }
              
            }
            
            F.line = 2700;
            i_637536341 = addInt(j_637536390, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            F.line = 2702;
            var j_637536427 = addInt(i_637536341, 1);
            Label13: do {
              F.line = 2703;
                Label14: while (true) {
                  if (!(j_637536427 < (formatstr_637536338).length)) Temporary15 = false; else {                    Temporary15 = (ConstSet26[formatstr_637536338[chckIndx(j_637536427, 0, (formatstr_637536338).length - 1)]] != undefined);                  }                if (!Temporary15) break Label14;
                  F.line = 2703;
                  j_637536427 = addInt(j_637536427, 1);
                }
            } while (false);
            F.line = 2704;
            var x_637536436 = findNormalized_637536322(substr_33557906(formatstr_637536338, addInt(i_637536341, 1), subInt(j_637536427, 1)), a_637536339);
              if (!(0 <= x_637536436)) Temporary16 = false; else {                Temporary16 = (x_637536436 < (a_637536339).length - 1);              }            if (Temporary16) {
            F.line = 2705;
            s_637536337[s_637536337_Idx].push.apply(s_637536337[s_637536337_Idx], a_637536339[chckIndx(addInt(x_637536436, 1), 0, (a_637536339).length - 1)]);;
            }
            else {
              F.line = 2706;
            invalidFormatString_637536334();
            }
            
            F.line = 2707;
            i_637536341 = j_637536427;
            break;
          default: 
            F.line = 2709;
            invalidFormatString_637536334();
            break;
          }
          }
          else {
            F.line = 2711;
            addChar(s_637536337[s_637536337_Idx], formatstr_637536338[chckIndx(i_637536341, 0, (formatstr_637536338).length - 1)]);;
            F.line = 2712;
            i_637536341 = addInt(i_637536341, 1);
          }
          
        }
    } while (false);
  framePtr = F.prev;

  
}

function addsubstr_1056966093(result_1056966094, result_1056966094_Idx, s_1056966095, first_1056966096) {
  var F = {procname: "regex.addsubstr", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 790;
    addsubstr_1056966075(result_1056966094, result_1056966094_Idx, s_1056966095, first_1056966096, (s_1056966095).length - 1);
  framePtr = F.prev;

  
}

function replace_1056966097(s_1056966098, pattern_1056966099, by_1056966100, limit_1056966101) {
            var Temporary4;
                        var Temporary9;

  var result_1056966102 = [[]];

  var F = {procname: "regex.replace", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 815;
    result_1056966102[0] = nimCopy(null, [], NTI33554439);
    F.line = 817;
    var i_1056966103 = 0;
    F.line = 817;
    var j_1056966104 = 0;
    F.line = 818;
    var capts_1056966112 = [newSeq_419430869(chckRange(pattern_1056966099.groupsCount, 0, 2147483647))];
    Label1: do {
      F.line = 819;
      var m_1056966113 = ({captures: [], namedGroups: ({data: [], counter: 0, first: 0, last: 0}), boundaries: ({a: 0, b: 0})});
      F.line = 554;
      var i_436212704 = 0;
      F.line = 555;
      var i2_436212705 = -1;
      F.line = 556;
      var m_436212706 = [({captures: [], namedGroups: ({data: [], counter: 0, first: 0, last: 0}), boundaries: ({a: 0, b: 0})})];
      F.line = 557;
      var ms_436212707 = [({a: null, b: null, m: ({s: [], i: 0}), c: [], look: ({ahead: null, behind: null, smL: ({s: [], i: 0})})})];
      Label2: do {
        F.line = 558;
          Label3: while (true) {
          if (!(i_436212704 <= (s_1056966098).length)) break Label3;
            if (!((i2_436212705 < i_436212704))) {
            F.line = 559;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim(559, 13) `i > i2` "));
            }
            
            F.line = 559;
            i2_436212705 = i_436212704;
            F.line = 560;
            if (canOpt_1258291814(pattern_1056966099.litOpt)) {
            Temporary4 = findSomeOptImpl_1358955141(s_1056966098, pattern_1056966099, ms_436212707[0], chckRange(i_436212704, 0, 2147483647));
            }
            else {
            Temporary4 = findSomeImpl_1358954827(s_1056966098, pattern_1056966099, ms_436212707[0], chckRange(i_436212704, 0, 2147483647), ConstSet21);
            }
            
            i_436212704 = Temporary4;
            if ((i_436212704 < 0)) {
            F.line = 562;
            break Label2;
            }
            
            Label5: do {
              F.line = 563;
              var mi_436212710 = 0;
              Label6: do {
                F.line = 118;
                var i_436212712 = 0;
                F.line = 75;
                var colontmp__436212713 = 0;
                F.line = 118;
                colontmp__436212713 = subInt(len_1358954520(ms_436212707[0].m), 1);
                F.line = 90;
                var res_436212714 = 0;
                Label7: do {
                  F.line = 91;
                    Label8: while (true) {
                    if (!(res_436212714 <= colontmp__436212713)) break Label8;
                      F.line = 118;
                      i_436212712 = res_436212714;
                      F.line = 563;
                      mi_436212710 = i_436212712;
                      F.line = 563;
                      fillMatchImpl_1358954586(m_436212706[0], mi_436212710, ms_436212707[0], pattern_1056966099);
                      F.line = 819;
                      m_1056966113 = nimCopy(m_1056966113, m_436212706[0], NTI1241514197);
                      F.line = 819;
                      addsubstr_1056966075(result_1056966102, 0, s_1056966098, i_1056966103, subInt(m_1056966113.boundaries.a, 1));
                      F.line = 819;
                      flatCaptures_1056966040(capts_1056966112, 0, m_1056966113, s_1056966098);
                      if ((0 < (capts_1056966112[0]).length)) {
                      F.line = 823;
                      nsuAddf(result_1056966102, 0, by_1056966100, capts_1056966112[0]);
                      }
                      else {
                        F.line = 825;
                      result_1056966102[0].push.apply(result_1056966102[0], by_1056966100);;
                      }
                      
                      F.line = 826;
                      i_1056966103 = addInt(m_1056966113.boundaries.b, 1);
                      F.line = 819;
                      j_1056966104 = addInt(j_1056966104, 1);
                        if (!(0 < limit_1056966101)) Temporary9 = false; else {                          Temporary9 = (j_1056966104 == limit_1056966101);                        }                      if (Temporary9) {
                      F.line = 828;
                      break Label1;
                      }
                      
                      F.line = 93;
                      res_436212714 = addInt(res_436212714, 1);
                    }
                } while (false);
              } while (false);
            } while (false);
            if ((i_436212704 == (s_1056966098).length)) {
            F.line = 567;
            break Label2;
            }
            
          }
      } while (false);
    } while (false);
    F.line = 829;
    addsubstr_1056966093(result_1056966102, 0, s_1056966098, i_1056966103);
  framePtr = F.prev;

  return result_1056966102[0];

}

function re_436207932() {
  var result_436207935 = ({nfa: ({s: [], t: ({allZ: [], z: []})}), groupsCount: 0, namedGroups: ({data: [], counter: 0, first: 0, last: 0}), litOpt: ({lit: 0, nfa: ({s: [], t: ({allZ: [], z: []})})})});

  var F = {procname: "re.re", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 292;
    result_436207935 = nimCopy(result_436207935, {nfa: {s: [{kind: 45, cp: 35, next: [1], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [2], isGreedy: false, uid: 5, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], counter: 0}, ranges: [{a: 65, b: 90}], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 46, cp: 35, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], t: {allZ: [[0], [1], []], z: [[{kind: 44, cp: 0, next: [3], isGreedy: false, uid: 1, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [{kind: 45, cp: 35, next: [1], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [2], isGreedy: false, uid: 2, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 1123150279, Field1: 305}], counter: 1}, ranges: [{a: 65, b: 90}, {a: 97, b: 122}], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 46, cp: 35, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], t: {allZ: [[-1], [-1], []], z: []}}, rpn: {s: []}, reverseCapts: true}}, {kind: 3, cp: 40, next: [2], isGreedy: false, uid: 4, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [0], isGreedy: false, uid: 6, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}]]}}, groupsCount: 1, namedGroups: {data: [{Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}], counter: 0, first: -1, last: -1}, litOpt: {lit: 0, nfa: {s: [], t: {allZ: [], z: []}}}}, NTI1241514194);
  framePtr = F.prev;

  return result_436207935;

}

function newSeq_1174407038(len_1174407040) {
  var result_1174407041 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_1174407041 = new Array(len_1174407040); for (var i = 0 ; i < len_1174407040 ; ++i) { result_1174407041[i] = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}); }  framePtr = F.prev;

  return result_1174407041;

}

function add_1224739186(x_1224739188, x_1224739188_Idx, y_1224739189) {
    var Temporary1;

  var F = {procname: "add.add", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1308;
    var xl_1224739193 = (x_1224739188[x_1224739188_Idx]).length;
    F.line = 1309;
    if (x_1224739188[x_1224739188_Idx].length < (Temporary1 = chckRange(addInt(xl_1224739193, (y_1224739189).length), 0, 2147483647), Temporary1)) { for (var i = x_1224739188[x_1224739188_Idx].length ; i < Temporary1 ; ++i) x_1224739188[x_1224739188_Idx].push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { x_1224739188[x_1224739188_Idx].length = Temporary1; };
    Label2: do {
      F.line = 1310;
      var i_1224739208 = 0;
      F.line = 75;
      var colontmp__1509950510 = 0;
      F.line = 1310;
      colontmp__1509950510 = (y_1224739189).length - 1;
      F.line = 90;
      var res_1509950511 = 0;
      Label3: do {
        F.line = 91;
          Label4: while (true) {
          if (!(res_1509950511 <= colontmp__1509950510)) break Label4;
            F.line = 1310;
            i_1224739208 = res_1509950511;
            F.line = 1310;
            x_1224739188[x_1224739188_Idx][chckIndx(addInt(xl_1224739193, i_1224739208), 0, (x_1224739188[x_1224739188_Idx]).length - 1)] = nimCopy(x_1224739188[x_1224739188_Idx][chckIndx(addInt(xl_1224739193, i_1224739208), 0, (x_1224739188[x_1224739188_Idx]).length - 1)], y_1224739189[chckIndx(i_1224739208, 0, (y_1224739189).length - 1)], NTI1090519053);
            F.line = 93;
            res_1509950511 = addInt(res_1509950511, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function pop_1224739601(s_1224739603, s_1224739603_Idx) {
  var result_1224739604 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "pop.pop", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1866;
    var L_1224739608 = subInt((s_1224739603[s_1224739603_Idx]).length, 1);
    F.line = 1871;
    result_1224739604 = nimCopy(result_1224739604, s_1224739603[s_1224739603_Idx][chckIndx(L_1224739608, 0, (s_1224739603[s_1224739603_Idx]).length - 1)], NTI1090519053);
    F.line = 1872;
    if (s_1224739603[s_1224739603_Idx].length < chckRange(L_1224739608, 0, 2147483647)) { for (var i = s_1224739603[s_1224739603_Idx].length ; i < chckRange(L_1224739608, 0, 2147483647) ; ++i) s_1224739603[s_1224739603_Idx].push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { s_1224739603[s_1224739603_Idx].length = chckRange(L_1224739608, 0, 2147483647); };
  framePtr = F.prev;

  return result_1224739604;

}

function popUntilGroupStart_1224739617(ops_1224739618, ops_1224739618_Idx) {
  var result_1224739619 = [];

  var F = {procname: "exptransformation.popUntilGroupStart", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 409;
    result_1224739619 = nimCopy(null, [], NTI1224738154);
    Label1: do {
      F.line = 410;
        Label2: while (true) {
        if (!true) break Label2;
          F.line = 411;
          var op_1224739629 = pop_1224739601(ops_1224739618, ops_1224739618_Idx);
          F.line = 412;
          var Temporary3 = nimCopy(null, op_1224739629, NTI1090519053);
          result_1224739619.push(Temporary3);;
          if ((op_1224739629.kind == 3)) {
          F.line = 414;
          break Label1;
          }
          
        }
    } while (false);
  framePtr = F.prev;

  return result_1224739619;

}

function opsPA_1224739521(nk_1224739522) {
  var result_1224739523 = {Field0: 0, Field1: 0};

  var F = {procname: "exptransformation.opsPA", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    if (!((ConstSet29[nk_1224739522] != undefined))) {
    F.line = 372;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(372, 10) `nk in opKind` "));
    }
    
    F.line = 373;
    switch (nk_1224739522) {
    case 10:
    case 7:
    case 8:
    case 9:
      F.line = 378;
      var colontmp__1509950513 = 5;
      F.line = 378;
      var colontmp__1509950514 = 0;
      F.line = 378;
      result_1224739523 = nimCopy(result_1224739523, {Field0: colontmp__1509950513, Field1: colontmp__1509950514}, NTI1224738412);
      break;
    case 2:
      F.line = 380;
      var colontmp__1509950515 = 4;
      F.line = 380;
      var colontmp__1509950516 = 1;
      F.line = 380;
      result_1224739523 = nimCopy(result_1224739523, {Field0: colontmp__1509950515, Field1: colontmp__1509950516}, NTI1224738412);
      break;
    case 6:
      F.line = 382;
      var colontmp__1509950517 = 3;
      F.line = 382;
      var colontmp__1509950518 = 1;
      F.line = 382;
      result_1224739523 = nimCopy(result_1224739523, {Field0: colontmp__1509950517, Field1: colontmp__1509950518}, NTI1224738412);
      break;
    default: 
      if (true) {
      F.line = 384;
      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(384, 14) `false` "));
      }
      
      break;
    }
  framePtr = F.prev;

  return result_1224739523;

}

function hasPrecedence_1224739556(a_1224739557, b_1224739558) {
  var result_1224739559 = false;

  var F = {procname: "exptransformation.hasPrecedence", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 396;
    result_1224739559 = (((opsPA_1224739521(b_1224739558).Field1 == 0) && (opsPA_1224739521(b_1224739558).Field0 <= opsPA_1224739521(a_1224739557).Field0)) || ((opsPA_1224739521(b_1224739558).Field1 == 1) && (opsPA_1224739521(b_1224739558).Field0 < opsPA_1224739521(a_1224739557).Field0)));
  framePtr = F.prev;

  return result_1224739559;

}

function popGreaterThan_1224739569(ops_1224739570, ops_1224739570_Idx, op_1224739571) {
          var Temporary3;
          var Temporary4;

  var result_1224739572 = [];

  var F = {procname: "exptransformation.popGreaterThan", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    if (!((ConstSet27[op_1224739571.kind] != undefined))) {
    F.line = 401;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(401, 12) `op.kind in opKind` "));
    }
    
    F.line = 402;
    result_1224739572 = nimCopy(null, [], NTI1224738154);
    Label1: do {
      F.line = 403;
        Label2: while (true) {
          if (!(0 < (ops_1224739570[ops_1224739570_Idx]).length)) Temporary4 = false; else {            Temporary4 = (ConstSet28[ops_1224739570[ops_1224739570_Idx][chckIndx(subInt((ops_1224739570[ops_1224739570_Idx]).length, 1), 0, (ops_1224739570[ops_1224739570_Idx]).length - 1)].kind] != undefined);          }          if (!Temporary4) Temporary3 = false; else {            Temporary3 = hasPrecedence_1224739556(ops_1224739570[ops_1224739570_Idx][chckIndx(subInt((ops_1224739570[ops_1224739570_Idx]).length, 1), 0, (ops_1224739570[ops_1224739570_Idx]).length - 1)].kind, op_1224739571.kind);          }        if (!Temporary3) break Label2;
          F.line = 406;
          result_1224739572.push(pop_1224739601(ops_1224739570, ops_1224739570_Idx));;
        }
    } while (false);
  framePtr = F.prev;

  return result_1224739572;

}

function rpn_1224739638(exp_1224739639) {
  var result_1224739640 = ({s: []});

  var F = {procname: "exptransformation.rpn", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 425;
    result_1224739640.s = nimCopy(null, newSeq_1174407038(chckRange((exp_1224739639.s).length, 0, 2147483647)), NTI1174406494);
    F.line = 426;
    if (result_1224739640.s.length < 0) { for (var i = result_1224739640.s.length ; i < 0 ; ++i) result_1224739640.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1224739640.s.length = 0; };
    F.line = 427;
    var ops_1224739662 = [newSeq_1174407038(0)];
    Label1: do {
      F.line = 428;
      var n_1224739666 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 235;
      var i_1509950501 = 0;
      F.line = 236;
      var L_1509950502 = (exp_1224739639.s).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950501 < L_1509950502)) break Label3;
            F.line = 428;
            n_1224739666 = exp_1224739639.s[chckIndx(i_1509950501, 0, (exp_1224739639.s).length - 1)];
            F.line = 428;
            switch (n_1224739666.kind) {
            case 0:
            case 1:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 45:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 29:
            case 30:
            case 41:
            case 42:
            case 43:
            case 44:
              F.line = 431;
              var Temporary4 = nimCopy(null, n_1224739666, NTI1090519053);
              result_1224739640.s.push(Temporary4);;
              break;
            case 3:
              F.line = 433;
              var Temporary5 = nimCopy(null, n_1224739666, NTI1090519053);
              ops_1224739662[0].push(Temporary5);;
              break;
            case 4:
              F.line = 435;
              add_1224739186(result_1224739640, "s", popUntilGroupStart_1224739617(ops_1224739662, 0));
              F.line = 436;
              var Temporary6 = nimCopy(null, n_1224739666, NTI1090519053);
              result_1224739640.s.push(Temporary6);;
              break;
            case 2:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
              F.line = 438;
              add_1224739186(result_1224739640, "s", popGreaterThan_1224739569(ops_1224739662, 0, n_1224739666));
              F.line = 439;
              var Temporary7 = nimCopy(null, n_1224739666, NTI1090519053);
              ops_1224739662[0].push(Temporary7);;
              break;
            default: 
              if (true) {
              F.line = 441;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(441, 16) `false` "));
              }
              
              break;
            }
            F.line = 239;
            i_1509950501 = addInt(i_1509950501, 1);
            if (!(((exp_1224739639.s).length == L_1509950502))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    Label8: do {
      F.line = 443;
      var i_1224739703 = 0;
      F.line = 75;
      var colontmp__1509950505 = 0;
      F.line = 443;
      colontmp__1509950505 = (ops_1224739662[0]).length;
      F.line = 90;
      var res_1509950506 = 1;
      Label9: do {
        F.line = 91;
          Label10: while (true) {
          if (!(res_1509950506 <= colontmp__1509950505)) break Label10;
            F.line = 443;
            i_1224739703 = res_1509950506;
            F.line = 443;
            var Temporary11 = nimCopy(null, ops_1224739662[0][chckIndx(subInt((ops_1224739662[0]).length, i_1224739703), 0, (ops_1224739662[0]).length - 1)], NTI1090519053);
            result_1224739640.s.push(Temporary11);;
            F.line = 93;
            res_1509950506 = addInt(res_1509950506, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224739640;

}

function newSeq_1174407054(len_1174407056) {
  var result_1174407057 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_1174407057 = new Array(len_1174407056); for (var i = 0 ; i < len_1174407056 ; ++i) { result_1174407057[i] = false; }  framePtr = F.prev;

  return result_1174407057;

}

function pop_1174406993(s_1174406995, s_1174406995_Idx) {
  var result_1174406996 = false;

  var F = {procname: "pop.pop", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1866;
    var L_1174407000 = subInt((s_1174406995[s_1174406995_Idx]).length, 1);
    F.line = 1871;
    result_1174406996 = s_1174406995[s_1174406995_Idx][chckIndx(L_1174407000, 0, (s_1174406995[s_1174406995_Idx]).length - 1)];
    F.line = 1872;
    if (s_1174406995[s_1174406995_Idx].length < chckRange(L_1174407000, 0, 2147483647)) { for (var i = s_1174406995[s_1174406995_Idx].length ; i < chckRange(L_1174407000, 0, 2147483647) ; ++i) s_1174406995[s_1174406995_Idx].push(false); }
               else { s_1174406995[s_1174406995_Idx].length = chckRange(L_1174407000, 0, 2147483647); };
  framePtr = F.prev;

  return result_1174406996;

}

function HEX5BHEX5D_1224739386(s_1224739390, x_1224739391) {
  var result_1224739392 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2619;
    var a_1224739394 = x_1224739391.a;
    F.line = 2620;
    var L_1224739396 = addInt(subInt(x_1224739391.b, a_1224739394), 1);
    F.line = 2621;
    result_1224739392 = new Array(chckRange(L_1224739396, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1224739396, 0, 2147483647) ; ++i) { result_1224739392[i] = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}); }    Label1: do {
      F.line = 2622;
      var i_1224739405 = 0;
      F.line = 119;
      var i_436207937 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436207937 < L_1224739396)) break Label3;
            F.line = 2622;
            i_1224739405 = i_436207937;
            F.line = 2622;
            result_1224739392[chckIndx(i_1224739405, 0, (result_1224739392).length - 1)] = nimCopy(result_1224739392[chckIndx(i_1224739405, 0, (result_1224739392).length - 1)], s_1224739390[chckIndx(addInt(i_1224739405, a_1224739394), 0, (s_1224739390).length - 1)], NTI1090519053);
            F.line = 122;
            i_436207937 = addInt(i_436207937, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224739392;

}

function HEX5BHEX5D_1174407081(s_1174407083, i_1174407084) {
  var result_1174407085 = null;

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2649;
    result_1174407085 = s_1174407083[chckIndx(subInt((s_1174407083).length, i_1174407084), 0, (s_1174407083).length - 1)];
  framePtr = F.prev;

  return result_1174407085;

}

function subExps_1224739711(exp_1224739712, parentKind_1224739713) {
  var result_1224739714 = ({s: []});

  var F = {procname: "exptransformation.subExps", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 449;
    result_1224739714.s = nimCopy(null, newSeq_1174407038(chckRange((exp_1224739712.s).length, 0, 2147483647)), NTI1174406494);
    F.line = 450;
    if (result_1224739714.s.length < 0) { for (var i = result_1224739714.s.length ; i < 0 ; ++i) result_1224739714.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1224739714.s.length = 0; };
    F.line = 451;
    var i_1224739730 = 0;
    F.line = 452;
    var parens_1224739738 = [newSeq_1174407054(0)];
    Label1: do {
      F.line = 453;
        Label2: while (true) {
        if (!(i_1224739730 < (exp_1224739712.s).length)) break Label2;
          if ((ConstSet30[exp_1224739712.s[chckIndx(i_1224739730, 0, (exp_1224739712.s).length - 1)].kind] != undefined)) {
          F.line = 455;
          var Temporary3 = nimCopy(null, exp_1224739712.s[chckIndx(i_1224739730, 0, (exp_1224739712.s).length - 1)], NTI1090519053);
          result_1224739714.s.push(Temporary3);;
          F.line = 456;
          i_1224739730 = addInt(i_1224739730, 1);
          F.line = 457;
          if (parens_1224739738[0].length < 0) { for (var i = parens_1224739738[0].length ; i < 0 ; ++i) parens_1224739738[0].push(false); }
               else { parens_1224739738[0].length = 0; };
          F.line = 458;
          var i0_1224739758 = i_1224739730;
          Label4: do {
            F.line = 459;
              Label5: while (true) {
              if (!(i_1224739730 < (exp_1224739712.s).length)) break Label5;
                F.line = 460;
                switch (exp_1224739712.s[chckIndx(i_1224739730, 0, (exp_1224739712.s).length - 1)].kind) {
                case 3:
                case 41:
                case 42:
                case 43:
                case 44:
                  F.line = 462;
                  parens_1224739738[0].push(true);;
                  break;
                case 4:
                  if ((0 < (parens_1224739738[0]).length)) {
                  F.line = 465;
                  var _ = pop_1174406993(parens_1224739738, 0);
                  }
                  else {
                    F.line = 467;
                    break Label4;
                  }
                  
                  break;
                default: 
                  break;
                }
                F.line = 470;
                i_1224739730 = addInt(i_1224739730, 1);
              }
          } while (false);
          if (!((exp_1224739712.s[chckIndx(i_1224739730, 0, (exp_1224739712.s).length - 1)].kind == 4))) {
          F.line = 471;
          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(471, 16) `exp.s[i].kind == reGroupEnd` "));
          }
          
          F.line = 472;
          var atoms_1224739800 = {s: HEX5BHEX5D_1224739386(exp_1224739712.s, HEX2EHEX2E_838861651(i0_1224739758, subInt(i_1224739730, 1)))};
          F.line = 475;
          HEX5BHEX5D_1174407081(result_1224739714.s, 1).subExp.rpn = nimCopy(HEX5BHEX5D_1174407081(result_1224739714.s, 1).subExp.rpn, rpn_1224739638(subExps_1224739711(atoms_1224739800, HEX5BHEX5D_1174407081(result_1224739714.s, 1).kind)), NTI1090519044);
          if ((ConstSet31[parentKind_1224739713] != undefined)) {
          F.line = 478;
          HEX5BHEX5D_1174407081(result_1224739714.s, 1).subExp.reverseCapts = (ConstSet32[HEX5BHEX5D_1174407081(result_1224739714.s, 1).kind] != undefined);
          }
          else {
            if (!((ConstSet33[parentKind_1224739713] != undefined))) {
            F.line = 480;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(480, 18) `parentKind in lookbehindKind` "));
            }
            
            F.line = 481;
            HEX5BHEX5D_1174407081(result_1224739714.s, 1).subExp.reverseCapts = (ConstSet34[HEX5BHEX5D_1174407081(result_1224739714.s, 1).kind] != undefined);
          }
          
          F.line = 482;
          i_1224739730 = addInt(i_1224739730, 1);
          }
          else {
            F.line = 484;
            var Temporary6 = nimCopy(null, exp_1224739712.s[chckIndx(i_1224739730, 0, (exp_1224739712.s).length - 1)], NTI1090519053);
            result_1224739714.s.push(Temporary6);;
            F.line = 485;
            i_1224739730 = addInt(i_1224739730, 1);
          }
          
        }
    } while (false);
  framePtr = F.prev;

  return result_1224739714;

}

function toRune_1140850719(s_1140850720) {
  var result_1140850721 = 0;

  var F = {procname: "common.toRune", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
  framePtr = F;
    F.line = 30;
    result_1140850721 = runeAt_838860895(s_1140850720, 0);
  framePtr = F.prev;

  return result_1140850721;

}

function initJoinerNode_1090519177() {
  var result_1090519178 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "types.initJoinerNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    F.line = 136;
    result_1090519178 = nimCopy(result_1090519178, {kind: 2, cp: toRune_1140850719(makeNimstrLit("~")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1090519178;

}

function joinAtoms_1224739458(exp_1224739459) {
  var result_1224739460 = ({s: []});

  var F = {procname: "exptransformation.joinAtoms", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 332;
    result_1224739460.s = nimCopy(null, newSeq_1174407038(chckRange(mulInt((exp_1224739459.s).length, 2), 0, 2147483647)), NTI1174406494);
    F.line = 333;
    if (result_1224739460.s.length < 0) { for (var i = result_1224739460.s.length ; i < 0 ; ++i) result_1224739460.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1224739460.s.length = 0; };
    F.line = 334;
    var atomsCount_1224739475 = 0;
    Label1: do {
      F.line = 335;
      var n_1224739479 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 235;
      var i_1509950495 = 0;
      F.line = 236;
      var L_1509950496 = (exp_1224739459.s).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950495 < L_1509950496)) break Label3;
            F.line = 335;
            n_1224739479 = exp_1224739459.s[chckIndx(i_1509950495, 0, (exp_1224739459.s).length - 1)];
            F.line = 335;
            switch (n_1224739479.kind) {
            case 0:
            case 1:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 45:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 29:
            case 30:
              F.line = 338;
              atomsCount_1224739475 = addInt(atomsCount_1224739475, 1);
              if ((1 < atomsCount_1224739475)) {
              F.line = 340;
              atomsCount_1224739475 = 1;
              F.line = 341;
              result_1224739460.s.push(initJoinerNode_1090519177());;
              }
              
              break;
            case 3:
            case 41:
            case 42:
            case 43:
            case 44:
              if ((0 < atomsCount_1224739475)) {
              F.line = 344;
              result_1224739460.s.push(initJoinerNode_1090519177());;
              }
              
              F.line = 345;
              atomsCount_1224739475 = 0;
              break;
            case 6:
              F.line = 347;
              atomsCount_1224739475 = 0;
              break;
            case 4:
            case 7:
            case 8:
            case 9:
            case 10:
              F.line = 353;
              atomsCount_1224739475 = addInt(atomsCount_1224739475, 1);
              break;
            default: 
              if (true) {
              F.line = 355;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(355, 16) `false` "));
              }
              
              break;
            }
            F.line = 335;
            var Temporary4 = nimCopy(null, n_1224739479, NTI1090519053);
            result_1224739460.s.push(Temporary4);;
            F.line = 239;
            i_1509950495 = addInt(i_1509950495, 1);
            if (!(((exp_1224739459.s).length == L_1509950496))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224739460;

}

function check_1224736780(cond_1224736781, msg_1224736782) {
  var F = {procname: "exptransformation.check", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    if (!(cond_1224736781)) {
    F.line = 25;
    raiseException({message: nimCopy(null, msg_1224736782, NTI33554439), parent: null, m_type: NTI1140850705, name: null, trace: [], up: null}, "RegexError");
    }
    
  framePtr = F.prev;

  
}

function nsuFormatOpenArray(formatstr_637536445, a_637536446) {
  var result_637536447 = [[]];

  var F = {procname: "strutils.%", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2759;
    result_637536447[0] = nimCopy(null, mnewString(0), NTI33554439);
    F.line = 2760;
    nsuAddf(result_637536447, 0, formatstr_637536445, a_637536446);
  framePtr = F.prev;

  return result_637536447[0];

}

function isNimException_33556519() {
    return lastJSError && lastJSError.m_type;

  
}

function HEX25HEX25_1140850920(formatstr_1140850921, a_1140850922) {
    var Temporary1;

  var result_1140850923 = [];

  var F = {procname: "common.%%", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
  framePtr = F;
    F.line = 62;
    F.line = 64;
++excHandler;
    try {
    Temporary1 = nsuFormatOpenArray(formatstr_1140850921, a_1140850922);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = F;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555125))) {
    Temporary1 = [];
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = F;
    }
    result_1140850923 = nimCopy(null, Temporary1, NTI33554439);
  framePtr = F.prev;

  return result_1140850923;

}

function HEX25HEX25_1140850924(formatstr_1140850925, a_1140850926) {
  var result_1140850927 = [];

  var F = {procname: "common.%%", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/common.nim", line: 0};
  framePtr = F;
    F.line = 70;
    result_1140850927 = nimCopy(null, HEX25HEX25_1140850920(formatstr_1140850925, [nimCopy(null, a_1140850926, NTI33554439)]), NTI33554439);
  framePtr = F.prev;

  return result_1140850927;

}

function populateUid_1224739435(exp_1224739436) {
  var result_1224739437 = ({s: []});

  var F = {procname: "exptransformation.populateUid", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 318;
    check_1224736780(((exp_1224739436.s).length - 1 < 32767), HEX25HEX25_1140850924(makeNimstrLit("The expression is too long, limit is ~$#"), HEX24_318767107(32767)));
    F.line = 322;
    result_1224739437 = nimCopy(result_1224739437, exp_1224739436, NTI1191182339);
    F.line = 323;
    var uid_1224739449 = 1;
    Label1: do {
      F.line = 324;
      var n_1224739453 = null;
      F.line = 244;
      var i_1509950491 = 0;
      F.line = 245;
      var L_1509950492 = (result_1224739437.s).length;
      Label2: do {
        F.line = 246;
          Label3: while (true) {
          if (!(i_1509950491 < L_1509950492)) break Label3;
            F.line = 324;
            n_1224739453 = result_1224739437.s[chckIndx(i_1509950491, 0, (result_1224739437.s).length - 1)];
            F.line = 325;
            n_1224739453.uid = uid_1224739449;
            F.line = 324;
            uid_1224739449 = addInt(uid_1224739449, 1);
            F.line = 248;
            i_1509950491 = addInt(i_1509950491, 1);
            if (!(((result_1224739437.s).length == L_1509950492))) {
            F.line = 249;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224739437;

}

function reversed_1224739308(a_1224739310) {
  var result_1224739311 = [];

  var F = {procname: "reversed.reversed", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 142;
    var n_1224739315 = (a_1224739310).length;
    F.line = 143;
    if (result_1224739311.length < chckRange(n_1224739315, 0, 2147483647)) { for (var i = result_1224739311.length ; i < chckRange(n_1224739315, 0, 2147483647) ; ++i) result_1224739311.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1224739311.length = chckRange(n_1224739315, 0, 2147483647); };
    Label1: do {
      F.line = 144;
      var i_1224739324 = 0;
      F.line = 119;
      var i_436212890 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212890 < n_1224739315)) break Label3;
            F.line = 144;
            i_1224739324 = i_436212890;
            F.line = 144;
            result_1224739311[chckIndx(i_1224739324, 0, (result_1224739311).length - 1)] = nimCopy(result_1224739311[chckIndx(i_1224739324, 0, (result_1224739311).length - 1)], a_1224739310[chckIndx(subInt(n_1224739315, addInt(i_1224739324, 1)), 0, (a_1224739310).length - 1)], NTI1090519053);
            F.line = 122;
            i_436212890 = addInt(i_436212890, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224739311;

}

function expandOneRepRange_1224739161(subExpr_1224739162, n_1224739163) {
  var result_1224739164 = [[]];

  var F = {procname: "exptransformation.expandOneRepRange", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    if (!((n_1224739163.kind == 10))) {
    F.line = 249;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(249, 12) `n.kind == reRepRange` "));
    }
    
    if ((n_1224739163.max == -1)) {
    F.line = 251;
    result_1224739164[0] = nimCopy(null, [], NTI1224738154);
    Label1: do {
      F.line = 252;
      var __1224739185 = 0;
      F.line = 117;
      var colontmp__436212893 = 0;
      F.line = 252;
      colontmp__436212893 = ((n_1224739163.min) | 0);
      F.line = 119;
      var i_436212894 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212894 < colontmp__436212893)) break Label3;
            F.line = 252;
            __1224739185 = i_436212894;
            F.line = 252;
            add_1224739186(result_1224739164, 0, subExpr_1224739162);
            F.line = 122;
            i_436212894 = addInt(i_436212894, 1);
          }
      } while (false);
    } while (false);
    F.line = 254;
    result_1224739164[0].push({kind: 7, cp: toRune_1140850719(makeNimstrLit("*")), isGreedy: n_1224739163.isGreedy, next: [], uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});;
    }
    else {
    if ((n_1224739163.min == n_1224739163.max)) {
    F.line = 259;
    result_1224739164[0] = nimCopy(null, [], NTI1224738154);
    Label4: do {
      F.line = 260;
      var __1224739223 = 0;
      F.line = 117;
      var colontmp__436212897 = 0;
      F.line = 260;
      colontmp__436212897 = ((subInt(n_1224739163.max, 1)) | 0);
      F.line = 119;
      var i_436212898 = 0;
      Label5: do {
        F.line = 120;
          Label6: while (true) {
          if (!(i_436212898 < colontmp__436212897)) break Label6;
            F.line = 260;
            __1224739223 = i_436212898;
            F.line = 260;
            add_1224739186(result_1224739164, 0, subExpr_1224739162);
            F.line = 122;
            i_436212898 = addInt(i_436212898, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      if (!((n_1224739163.min < n_1224739163.max))) {
      F.line = 263;
      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(263, 14) `n.min < n.max` "));
      }
      
      F.line = 264;
      result_1224739164[0] = nimCopy(null, [], NTI1224738154);
      Label7: do {
        F.line = 265;
        var __1224739243 = 0;
        F.line = 117;
        var colontmp__436212901 = 0;
        F.line = 265;
        colontmp__436212901 = ((n_1224739163.min) | 0);
        F.line = 119;
        var i_436212902 = 0;
        Label8: do {
          F.line = 120;
            Label9: while (true) {
            if (!(i_436212902 < colontmp__436212901)) break Label9;
              F.line = 265;
              __1224739243 = i_436212902;
              F.line = 265;
              add_1224739186(result_1224739164, 0, subExpr_1224739162);
              F.line = 122;
              i_436212902 = addInt(i_436212902, 1);
            }
        } while (false);
      } while (false);
      Label10: do {
        F.line = 267;
        var __1224739257 = 0;
        F.line = 117;
        var colontmp__436212905 = 0;
        F.line = 267;
        colontmp__436212905 = subInt(n_1224739163.max, 1);
        F.line = 119;
        var i_436212907 = n_1224739163.min;
        Label11: do {
          F.line = 120;
            Label12: while (true) {
            if (!(i_436212907 < colontmp__436212905)) break Label12;
              F.line = 267;
              __1224739257 = i_436212907;
              F.line = 267;
              result_1224739164[0].push({kind: 9, cp: toRune_1140850719(makeNimstrLit("?")), isGreedy: n_1224739163.isGreedy, next: [], uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});;
              F.line = 267;
              add_1224739186(result_1224739164, 0, subExpr_1224739162);
              F.line = 122;
              i_436212907 = addInt(i_436212907, 1);
            }
        } while (false);
      } while (false);
      F.line = 273;
      result_1224739164[0].push({kind: 9, cp: toRune_1140850719(makeNimstrLit("?")), isGreedy: n_1224739163.isGreedy, next: [], uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});;
    }
    }
  framePtr = F.prev;

  return result_1224739164[0];

}

function expandRepRange_1224739270(exp_1224739271) {
  var result_1224739272 = ({s: []});

  var F = {procname: "exptransformation.expandRepRange", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 280;
    result_1224739272.s = nimCopy(null, newSeq_1174407038(chckRange((exp_1224739271.s).length, 0, 2147483647)), NTI1174406494);
    F.line = 281;
    if (result_1224739272.s.length < 0) { for (var i = result_1224739272.s.length ; i < 0 ; ++i) result_1224739272.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1224739272.s.length = 0; };
    F.line = 282;
    var i_1224739287 = 0;
    F.line = 283;
    var gi_1224739288 = 0;
    Label1: do {
      F.line = 284;
      var n_1224739292 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 235;
      var i_1509950486 = 0;
      F.line = 236;
      var L_1509950487 = (exp_1224739271.s).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950486 < L_1509950487)) break Label3;
            F.line = 284;
            n_1224739292 = exp_1224739271.s[chckIndx(i_1509950486, 0, (exp_1224739271.s).length - 1)];
            Label4: do {
              if (!((n_1224739292.kind == 10))) {
              F.line = 286;
              var Temporary5 = nimCopy(null, n_1224739292, NTI1090519053);
              result_1224739272.s.push(Temporary5);;
              F.line = 287;
              break Label4;
              }
              
              F.line = 288;
              check_1224736780((0 < (result_1224739272.s).length), makeNimstrLit("Invalid repeition range, nothing to repeat"));
              F.line = 292;
              switch (HEX5BHEX5D_1174407081(result_1224739272.s, 1).kind) {
              case 4:
                F.line = 294;
                i_1224739287 = 0;
                F.line = 295;
                gi_1224739288 = 0;
                Label6: do {
                  F.line = 296;
                  var ne_1224739328 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
                  F.line = 233;
                  var colontmp__1509950481 = [];
                  F.line = 296;
                  colontmp__1509950481 = reversed_1224739308(result_1224739272.s);
                  F.line = 235;
                  var i_1509950483 = 0;
                  F.line = 236;
                  var L_1509950484 = (colontmp__1509950481).length;
                  Label7: do {
                    F.line = 237;
                      Label8: while (true) {
                      if (!(i_1509950483 < L_1509950484)) break Label8;
                        F.line = 296;
                        ne_1224739328 = colontmp__1509950481[chckIndx(i_1509950483, 0, (colontmp__1509950481).length - 1)];
                        F.line = 296;
                        i_1224739287 = addInt(i_1224739287, 1);
                        if ((ne_1224739328.kind == 4)) {
                        F.line = 299;
                        gi_1224739288 = addInt(gi_1224739288, 1);
                        }
                        
                        if ((ne_1224739328.kind == 3)) {
                        F.line = 301;
                        gi_1224739288 = subInt(gi_1224739288, 1);
                        }
                        
                        if ((gi_1224739288 == 0)) {
                        F.line = 303;
                        break Label6;
                        }
                        
                        if (!((0 <= gi_1224739288))) {
                        F.line = 304;
                        failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(304, 18) `gi >= 0` "));
                        }
                        
                        F.line = 239;
                        i_1509950483 = addInt(i_1509950483, 1);
                        if (!(((colontmp__1509950481).length == L_1509950484))) {
                        F.line = 240;
                        failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while (false);
                } while (false);
                if (!((gi_1224739288 == 0))) {
                F.line = 305;
                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(305, 16) `gi == 0` "));
                }
                
                if (!((result_1224739272.s[chckIndx(subInt((result_1224739272.s).length, i_1224739287), 0, (result_1224739272.s).length - 1)].kind == 3))) {
                F.line = 306;
                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(306, 14) `result.s[result.s.len - i].kind == reGroupStart` "));
                }
                
                F.line = 307;
                add_1224739186(result_1224739272, "s", expandOneRepRange_1224739161(HEX5BHEX5D_1224739386(result_1224739272.s, HEX2EHEX2E_838861651(subInt((result_1224739272.s).length, i_1224739287), subInt((result_1224739272.s).length, 1))), n_1224739292));
                break;
              case 0:
              case 1:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
                F.line = 309;
                add_1224739186(result_1224739272, "s", expandOneRepRange_1224739161(HEX5BHEX5D_1224739386(result_1224739272.s, HEX2EHEX2E_838861651(subInt((result_1224739272.s).length, 1), subInt((result_1224739272.s).length, 1))), n_1224739292));
                break;
              default: 
                F.line = 311;
                check_1224736780(false, makeNimstrLit("Invalid repetition range, either char, shorthand (i.e: \\w), group, or set expected before repetition range"));
                break;
              }
            } while (false);
            F.line = 239;
            i_1509950486 = addInt(i_1509950486, 1);
            if (!(((exp_1224739271.s).length == L_1509950487))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224739272;

}

function newSeq_1224739048(len_1224739050) {
  var result_1224739051 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_1224739051 = new Array(len_1224739050); for (var i = 0 ; i < len_1224739050 ; ++i) { result_1224739051[i] = []; }  framePtr = F.prev;

  return result_1224739051;

}

function newScanner_1224736880(s_1224736882) {
  var result_1224736883 = null;

  var F = {procname: "newScanner.newScanner", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 15;
    result_1224736883 = {s: nimCopy(null, s_1224736882, NTI1224736852), pos: 0, raw: []};
  framePtr = F.prev;

  return result_1224736883;

}

function scan_1224736876(s_1224736878) {
  var result_1224736879 = null;

  var F = {procname: "scan.scan", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 18;
    result_1224736879 = newScanner_1224736880(s_1224736878);
  framePtr = F.prev;

  return result_1224736879;

}

function pop_1224739069(s_1224739071, s_1224739071_Idx) {
  var result_1224739072 = [];

  var F = {procname: "pop.pop", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1866;
    var L_1224739076 = subInt((s_1224739071[s_1224739071_Idx]).length, 1);
    F.line = 1871;
    result_1224739072 = nimCopy(null, s_1224739071[s_1224739071_Idx][chckIndx(L_1224739076, 0, (s_1224739071[s_1224739071_Idx]).length - 1)], NTI1224738058);
    F.line = 1872;
    if (s_1224739071[s_1224739071_Idx].length < chckRange(L_1224739076, 0, 2147483647)) { for (var i = s_1224739071[s_1224739071_Idx].length ; i < chckRange(L_1224739076, 0, 2147483647) ; ++i) s_1224739071[s_1224739071_Idx].push([]); }
               else { s_1224739071[s_1224739071_Idx].length = chckRange(L_1224739076, 0, 2147483647); };
  framePtr = F.prev;

  return result_1224739072;

}

function add_1224739087(x_1224739089, x_1224739089_Idx, y_1224739090) {
    var Temporary1;

  var F = {procname: "add.add", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1308;
    var xl_1224739094 = (x_1224739089[x_1224739089_Idx]).length;
    F.line = 1309;
    if (x_1224739089[x_1224739089_Idx].length < (Temporary1 = chckRange(addInt(xl_1224739094, (y_1224739090).length), 0, 2147483647), Temporary1)) { for (var i = x_1224739089[x_1224739089_Idx].length ; i < Temporary1 ; ++i) x_1224739089[x_1224739089_Idx].push(0); }
               else { x_1224739089[x_1224739089_Idx].length = Temporary1; };
    Label2: do {
      F.line = 1310;
      var i_1224739110 = 0;
      F.line = 75;
      var colontmp__436212910 = 0;
      F.line = 1310;
      colontmp__436212910 = (y_1224739090).length - 1;
      F.line = 90;
      var res_436212911 = 0;
      Label3: do {
        F.line = 91;
          Label4: while (true) {
          if (!(res_436212911 <= colontmp__436212910)) break Label4;
            F.line = 1310;
            i_1224739110 = res_436212911;
            F.line = 1310;
            x_1224739089[x_1224739089_Idx][chckIndx(addInt(xl_1224739094, i_1224739110), 0, (x_1224739089[x_1224739089_Idx]).length - 1)] = y_1224739090[chckIndx(i_1224739110, 0, (y_1224739090).length - 1)];
            F.line = 93;
            res_436212911 = addInt(res_436212911, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function toggle_1224738814(f_1224738815) {
    var Temporary1;

  var result_1224738816 = 0;

  var F = {procname: "exptransformation.toggle", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 129;
    F.line = 131;
    switch (f_1224738815) {
    case 0:
      Temporary1 = 1;
      break;
    case 1:
      Temporary1 = 0;
      break;
    case 2:
      Temporary1 = 3;
      break;
    case 3:
      Temporary1 = 2;
      break;
    case 4:
      Temporary1 = 5;
      break;
    case 5:
      Temporary1 = 4;
      break;
    case 6:
      Temporary1 = 7;
      break;
    case 7:
      Temporary1 = 6;
      break;
    case 8:
      Temporary1 = 9;
      break;
    case 9:
      Temporary1 = 8;
      break;
    case 10:
      Temporary1 = 11;
      break;
    case 11:
      Temporary1 = 10;
      break;
    }
    result_1224738816 = Temporary1;
  framePtr = F.prev;

  return result_1224738816;

}

function squash_1224738817(flags_1224738818) {
  var result_1224738819 = [false, false, false, false, false, false, false, false, false, false, false, false];

  var F = {procname: "exptransformation.squash", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    Label1: do {
      F.line = 162;
      var ff_1224738841 = [];
      F.line = 235;
      var i_1509950475 = 0;
      F.line = 236;
      var L_1509950476 = (flags_1224738818).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950475 < L_1509950476)) break Label3;
            F.line = 162;
            ff_1224738841 = flags_1224738818[chckIndx(i_1509950475, 0, (flags_1224738818).length - 1)];
            Label4: do {
              F.line = 163;
              var f_1224738845 = 0;
              F.line = 235;
              var i_1509950471 = 0;
              F.line = 236;
              var L_1509950472 = (ff_1224738841).length;
              Label5: do {
                F.line = 237;
                  Label6: while (true) {
                  if (!(i_1509950471 < L_1509950472)) break Label6;
                    F.line = 163;
                    f_1224738845 = ff_1224738841[chckIndx(i_1509950471, 0, (ff_1224738841).length - 1)];
                    F.line = 164;
                    result_1224738819[chckIndx(toggle_1224738814(f_1224738845), 0, (result_1224738819).length - 1)] = false;
                    F.line = 165;
                    result_1224738819[chckIndx(f_1224738845, 0, (result_1224738819).length - 1)] = true;
                    F.line = 239;
                    i_1509950471 = addInt(i_1509950471, 1);
                    if (!(((ff_1224738841).length == L_1509950472))) {
                    F.line = 240;
                    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            F.line = 239;
            i_1509950475 = addInt(i_1509950475, 1);
            if (!(((flags_1224738818).length == L_1509950476))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224738819;

}

function nucisUpper(c_838861943) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_838861944 = false;

  var F = {procname: "unicode.isUpper", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 550;
    var c_838861945 = c_838861943;
    F.line = 552;
    var p_838861953 = binarySearch_838861813(c_838861945, toLowerRanges_838861723, 45, 3);
      if (!(0 <= p_838861953)) Temporary2 = false; else {        Temporary2 = (toLowerRanges_838861723[chckIndx(p_838861953, 0, (toLowerRanges_838861723).length - 1)] <= ((c_838861945) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_838861945) | 0) <= toLowerRanges_838861723[chckIndx(addInt(p_838861953, 1), 0, (toLowerRanges_838861723).length - 1)]);      }    if (Temporary1) {
    F.line = 554;
    result_838861944 = true;
    break BeforeRet;
    }
    
    F.line = 555;
    p_838861953 = binarySearch_838861813(c_838861945, toLowerSinglets_838861724, 610, 2);
      if (!(0 <= p_838861953)) Temporary3 = false; else {        Temporary3 = (((c_838861945) | 0) == toLowerSinglets_838861724[chckIndx(p_838861953, 0, (toLowerSinglets_838861724).length - 1)]);      }    if (Temporary3) {
    F.line = 557;
    result_838861944 = true;
    break BeforeRet;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_838861944;

}

function nucisLower(c_838861924) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_838861925 = false;

  var F = {procname: "unicode.isLower", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 530;
    var c_838861926 = c_838861924;
    F.line = 532;
    var p_838861934 = binarySearch_838861813(c_838861926, toUpperRanges_838861725, 46, 3);
      if (!(0 <= p_838861934)) Temporary2 = false; else {        Temporary2 = (toUpperRanges_838861725[chckIndx(p_838861934, 0, (toUpperRanges_838861725).length - 1)] <= ((c_838861926) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_838861926) | 0) <= toUpperRanges_838861725[chckIndx(addInt(p_838861934, 1), 0, (toUpperRanges_838861725).length - 1)]);      }    if (Temporary1) {
    F.line = 534;
    result_838861925 = true;
    break BeforeRet;
    }
    
    F.line = 535;
    p_838861934 = binarySearch_838861813(c_838861926, toUpperSinglets_838861726, 624, 2);
      if (!(0 <= p_838861934)) Temporary3 = false; else {        Temporary3 = (((c_838861926) | 0) == toUpperSinglets_838861726[chckIndx(p_838861934, 0, (toUpperSinglets_838861726).length - 1)]);      }    if (Temporary3) {
    F.line = 537;
    result_838861925 = true;
    break BeforeRet;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_838861925;

}

function swapCase_1224736777(r_1224736778) {
  var result_1224736779 = 0;

  var F = {procname: "exptransformation.swapCase", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    if (nucisUpper(r_1224736778)) {
    F.line = 17;
    result_1224736779 = nuctoLower(r_1224736778);
    }
    else {
    if (nucisLower(r_1224736778)) {
    F.line = 19;
    result_1224736779 = nuctoUpper(r_1224736778);
    }
    else {
      F.line = 21;
      result_1224736779 = r_1224736778;
    }
    }
  framePtr = F.prev;

  return result_1224736779;

}

function nextPowerOfTwo_671088843(x_671088844) {
  var result_671088845 = 0;

    result_671088845 = (x_671088844 - 1);
    result_671088845 = (result_671088845 | (result_671088845 >> 16));
    result_671088845 = (result_671088845 | (result_671088845 >> 8));
    result_671088845 = (result_671088845 | (result_671088845 >> 4));
    result_671088845 = (result_671088845 | (result_671088845 >> 2));
    result_671088845 = (result_671088845 | (result_671088845 >> 1));
    result_671088845 += (1 + ((x_671088844 <= 0) ? 1 : 0));

  return result_671088845;

}

function slotsNeeded_956301361(count_956301362) {
  var result_956301363 = 0;

  var F = {procname: "sets.slotsNeeded", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 34;
    result_956301363 = nextPowerOfTwo_671088843(addInt(divInt(mulInt(count_956301362, 3), 2), 4));
  framePtr = F.prev;

  return result_956301363;

}

function init_1090519204(s_1090519206, initialSize_1090519207) {
  var F = {procname: "init.init", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 19;
    var correctSizeHEX60gensym5_1090519209 = slotsNeeded_956301361(chckRange(initialSize_1090519207, 0, 2147483647));
    F.line = 23;
    s_1090519206.counter = 0;
    F.line = 110;
    s_1090519206.data = new Array(chckRange(correctSizeHEX60gensym5_1090519209, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym5_1090519209, 0, 2147483647) ; ++i) { s_1090519206.data[i] = {Field0: 0, Field1: 0}; }  framePtr = F.prev;

  
}

function initHashSet_1090519196(initialSize_1090519198) {
  var result_1090519199 = [({data: [], counter: 0})];

  var F = {procname: "initHashSet.initHashSet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 129;
    init_1090519204(result_1090519199[0], initialSize_1090519198);
  framePtr = F.prev;

  return result_1090519199[0];

}

function len_1090519474(s_1090519476) {
  var result_1090519477 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 179;
    result_1090519477 = s_1090519476.counter;
  framePtr = F.prev;

  return result_1090519477;

}

function mustRehash_1174405888(t_1174405890) {
  var result_1174405891 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_1174405890.counter < (t_1174405890.data).length))) {
    F.line = 29;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 30;
    result_1174405891 = ((mulInt((t_1174405890.data).length, 2) < mulInt(t_1174405890.counter, 3)) || (subInt((t_1174405890.data).length, t_1174405890.counter) < 4));
  framePtr = F.prev;

  return result_1174405891;

}

function rawGetKnownHC_1174406014(t_1174406017, key_1174406018, hc_1174406019) {
  var result_1174406020 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (((t_1174406017.data).length == 0)) {
    F.line = 48;
    result_1174406020 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_1174406042 = (hc_1174406019 & (t_1174406017.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_956301350(t_1174406017.data[chckIndx(h_1174406042, 0, (t_1174406017.data).length - 1)].Field0)) break Label2;
          if (((t_1174406017.data[chckIndx(h_1174406042, 0, (t_1174406017.data).length - 1)].Field0 == hc_1174406019) && HEX3DHEX3D_838861719(t_1174406017.data[chckIndx(h_1174406042, 0, (t_1174406017.data).length - 1)].Field1, key_1174406018))) {
          F.line = 56;
          result_1174406020 = h_1174406042;
          break BeforeRet;
          }
          
          F.line = 57;
          h_1174406042 = nextTry_956301353(h_1174406042, (t_1174406017.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_1174406020 = subInt(-1, h_1174406042);
  } while (false);
  framePtr = F.prev;

  return result_1174406020;

}

function rawInsert_1174406071(s_1174406073, data_1174406074, data_1174406074_Idx, key_1174406075, hc_1174406076, h_1174406077) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/setimpl.nim", line: 0};
  framePtr = F;
    if (((data_1174406074[data_1174406074_Idx]).length == 0)) {
    F.line = 19;
    var correctSizeHEX60gensym45_1174406097 = slotsNeeded_956301361(64);
    F.line = 23;
    s_1174406073.counter = 0;
    F.line = 28;
    s_1174406073.data = new Array(chckRange(correctSizeHEX60gensym45_1174406097, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym45_1174406097, 0, 2147483647) ; ++i) { s_1174406073.data[i] = {Field0: 0, Field1: 0}; }    }
    
    F.line = 29;
    data_1174406074[data_1174406074_Idx][chckIndx(h_1174406077, 0, (data_1174406074[data_1174406074_Idx]).length - 1)].Field1 = key_1174406075;
    F.line = 30;
    data_1174406074[data_1174406074_Idx][chckIndx(h_1174406077, 0, (data_1174406074[data_1174406074_Idx]).length - 1)].Field0 = hc_1174406076;
  framePtr = F.prev;

  
}

function enlarge_1174405962(s_1174405964) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/setimpl.nim", line: 0};
  framePtr = F;
    F.line = 37;
    var n_1174405966 = [];
    F.line = 38;
    n_1174405966 = new Array(chckRange(mulInt((s_1174405964.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((s_1174405964.data).length, 2), 0, 2147483647) ; ++i) { n_1174405966[i] = {Field0: 0, Field1: 0}; }    F.line = 39;
    var Temporary1 = s_1174405964.data; s_1174405964.data = n_1174405966; n_1174405966 = Temporary1;    Label2: do {
      F.line = 40;
      var i_1174406001 = 0;
      F.line = 43;
      var colontmp__1509950438 = 0;
      F.line = 40;
      colontmp__1509950438 = (n_1174405966).length - 1;
      F.line = 65;
      var res_1509950439 = 0;
      Label3: do {
        F.line = 66;
          Label4: while (true) {
          if (!(res_1509950439 <= colontmp__1509950438)) break Label4;
            F.line = 40;
            i_1174406001 = res_1509950439;
            if (isFilled_956301350(n_1174405966[chckIndx(i_1174406001, 0, (n_1174405966).length - 1)].Field0)) {
            F.line = 42;
            var j_1174406058 = subInt(-1, rawGetKnownHC_1174406014(s_1174405964, n_1174405966[chckIndx(i_1174406001, 0, (n_1174405966).length - 1)].Field1, n_1174405966[chckIndx(i_1174406001, 0, (n_1174405966).length - 1)].Field0));
            F.line = 43;
            rawInsert_1174406071(s_1174405964, s_1174405964, "data", n_1174405966[chckIndx(i_1174406001, 0, (n_1174405966).length - 1)].Field1, n_1174405966[chckIndx(i_1174406001, 0, (n_1174405966).length - 1)].Field0, j_1174406058);
            }
            
            F.line = 68;
            res_1509950439 = addInt(res_1509950439, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function incl_1174405785(s_1174405787, key_1174405788) {
  var F = {procname: "incl.incl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    if (((s_1174405787.data).length == 0)) {
    F.line = 19;
    var correctSizeHEX60gensym36_1174405809 = slotsNeeded_956301361(64);
    F.line = 23;
    s_1174405787.counter = 0;
    F.line = 47;
    s_1174405787.data = new Array(chckRange(correctSizeHEX60gensym36_1174405809, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym36_1174405809, 0, 2147483647) ; ++i) { s_1174405787.data[i] = {Field0: 0, Field1: 0}; }    }
    
    F.line = 48;
    var hc_1174405824 = [0];
    F.line = 49;
    var index_1174405887 = rawGet_1174405832(s_1174405787, key_1174405788, hc_1174405824, 0);
    if ((index_1174405887 < 0)) {
    if (mustRehash_1174405888(s_1174405787)) {
    F.line = 52;
    enlarge_1174405962(s_1174405787);
    F.line = 53;
    index_1174405887 = rawGetKnownHC_1174406014(s_1174405787, key_1174405788, hc_1174405824[0]);
    }
    
    F.line = 54;
    rawInsert_1174406071(s_1174405787, s_1174405787, "data", key_1174405788, hc_1174405824[0], subInt(-1, index_1174405887));
    F.line = 55;
    s_1174405787.counter = addInt(s_1174405787.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function incl_1174406170(s_1174406172, other_1174406173) {
  var F = {procname: "incl.incl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    Label1: do {
      F.line = 221;
      var item_1174406177 = 0;
      F.line = 262;
      var length_1509950431 = len_1090519474(other_1174406173);
      Label2: do {
        F.line = 263;
        var h_1509950433 = 0;
        F.line = 75;
        var colontmp__1509950434 = 0;
        F.line = 263;
        colontmp__1509950434 = (other_1174406173.data).length - 1;
        F.line = 90;
        var res_1509950435 = 0;
        Label3: do {
          F.line = 91;
            Label4: while (true) {
            if (!(res_1509950435 <= colontmp__1509950434)) break Label4;
              F.line = 263;
              h_1509950433 = res_1509950435;
              if (isFilled_956301350(other_1174406173.data[chckIndx(h_1509950433, 0, (other_1174406173.data).length - 1)].Field0)) {
              F.line = 221;
              item_1174406177 = other_1174406173.data[chckIndx(h_1509950433, 0, (other_1174406173.data).length - 1)].Field1;
              F.line = 221;
              incl_1174405785(s_1174406172, item_1174406177);
              if (!((len_1090519474(other_1174406173) == length_1509950431))) {
              F.line = 266;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim(266, 13) `len(s) == length` the length of the HashSet changed while iterating over it"));
              }
              
              }
              
              F.line = 93;
              res_1509950435 = addInt(res_1509950435, 1);
            }
        } while (false);
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function HEX5BHEX5D_1224738950(s_1224738954, x_1224738955) {
  var result_1224738956 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2619;
    var a_1224738958 = x_1224738955.a;
    F.line = 2620;
    var L_1224738963 = addInt(subInt(subInt((s_1224738954).length, x_1224738955.b), a_1224738958), 1);
    F.line = 2621;
    result_1224738956 = new Array(chckRange(L_1224738963, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1224738963, 0, 2147483647) ; ++i) { result_1224738956[i] = ({a: 0, b: 0}); }    Label1: do {
      F.line = 2622;
      var i_1224738972 = 0;
      F.line = 119;
      var i_436212930 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212930 < L_1224738963)) break Label3;
            F.line = 2622;
            i_1224738972 = i_436212930;
            F.line = 2622;
            result_1224738956[chckIndx(i_1224738972, 0, (result_1224738956).length - 1)] = nimCopy(result_1224738956[chckIndx(i_1224738972, 0, (result_1224738956).length - 1)], s_1224738954[chckIndx(addInt(i_1224738972, a_1224738958), 0, (s_1224738954).length - 1)], NTI1090519085);
            F.line = 122;
            i_436212930 = addInt(i_436212930, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224738956;

}

function HEX2EHEX2E_1174405674(a_1174405677, b_1174405678) {
  var result_1174405679 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 512;
    result_1174405679 = nimCopy(result_1174405679, {a: a_1174405677, b: b_1174405678}, NTI1090519085);
  framePtr = F.prev;

  return result_1174405679;

}

function toAsciiKind_1224738811(k_1224738812) {
    var Temporary1;

  var result_1224738813 = 0;

  var F = {procname: "exptransformation.toAsciiKind", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 104;
    F.line = 104;
    switch (k_1224738812) {
    case 17:
      Temporary1 = 29;
      break;
    case 18:
      Temporary1 = 30;
      break;
    case 19:
      Temporary1 = 31;
      break;
    case 20:
      Temporary1 = 32;
      break;
    case 21:
      Temporary1 = 33;
      break;
    case 23:
      Temporary1 = 34;
      break;
    case 24:
      Temporary1 = 35;
      break;
    case 25:
      Temporary1 = 36;
      break;
    case 27:
      Temporary1 = 37;
      break;
    case 28:
      Temporary1 = 38;
      break;
    default: 
      Temporary1 = k_1224738812;
      break;
    }
    result_1224738813 = Temporary1;
  framePtr = F.prev;

  return result_1224738813;

}

function applyFlag_1224738864(n_1224738865, f_1224738866) {
        var Temporary1;
                var Temporary9;

  var F = {procname: "exptransformation.applyFlag", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 168;
    switch (f_1224738866) {
    case 4:
      if ((n_1224738865.kind == 27)) {
      F.line = 171;
      n_1224738865.kind = 28;
      }
      
      break;
    case 2:
      F.line = 173;
      switch (n_1224738865.kind) {
      case 11:
        F.line = 175;
        n_1224738865.kind = 13;
        break;
      case 12:
        F.line = 177;
        n_1224738865.kind = 14;
        break;
      default: 
        break;
      }
      break;
    case 0:
        if (!(n_1224738865.kind == 0)) Temporary1 = false; else {          Temporary1 = !(HEX3DHEX3D_838861719(n_1224738865.cp, swapCase_1224736777(n_1224738865.cp)));        }      if (Temporary1) {
      F.line = 182;
      n_1224738865.kind = 1;
      }
      
      if ((ConstSet35[n_1224738865.kind] != undefined)) {
      F.line = 186;
      var cps_1224738882 = [initHashSet_1090519196(2)];
      F.line = 187;
      incl_1174406170(cps_1224738882[0], n_1224738865.cps);
      Label2: do {
        F.line = 188;
        var cp_1224738916 = 0;
        F.line = 262;
        var length_436212914 = len_1090519474(cps_1224738882[0]);
        Label3: do {
          F.line = 263;
          var h_436212916 = 0;
          F.line = 75;
          var colontmp__436212917 = 0;
          F.line = 263;
          colontmp__436212917 = (cps_1224738882[0].data).length - 1;
          F.line = 90;
          var res_436212918 = 0;
          Label4: do {
            F.line = 91;
              Label5: while (true) {
              if (!(res_436212918 <= colontmp__436212917)) break Label5;
                F.line = 263;
                h_436212916 = res_436212918;
                if (isFilled_956301350(cps_1224738882[0].data[chckIndx(h_436212916, 0, (cps_1224738882[0].data).length - 1)].Field0)) {
                F.line = 188;
                cp_1224738916 = cps_1224738882[0].data[chckIndx(h_436212916, 0, (cps_1224738882[0].data).length - 1)].Field1;
                F.line = 189;
                var cpsc_1224738917 = swapCase_1224736777(cp_1224738916);
                if (!(HEX3DHEX3D_838861719(cp_1224738916, cpsc_1224738917))) {
                F.line = 191;
                incl_1174405785(n_1224738865.cps, cpsc_1224738917);
                }
                
                if (!((len_1090519474(cps_1224738882[0]) == length_436212914))) {
                F.line = 266;
                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim(266, 13) `len(s) == length` the length of the HashSet changed while iterating over it"));
                }
                
                }
                
                F.line = 93;
                res_436212918 = addInt(res_436212918, 1);
              }
          } while (false);
        } while (false);
      } while (false);
      Label6: do {
        F.line = 192;
        var sl_1224738976 = ({a: 0, b: 0});
        F.line = 233;
        var colontmp__436212921 = [];
        F.line = 192;
        colontmp__436212921 = HEX5BHEX5D_1224738950(n_1224738865.ranges, HEX2EHEX2E_805306448(0, 1));
        F.line = 235;
        var i_436212922 = 0;
        F.line = 236;
        var L_436212923 = (colontmp__436212921).length;
        Label7: do {
          F.line = 237;
            Label8: while (true) {
            if (!(i_436212922 < L_436212923)) break Label8;
              F.line = 192;
              sl_1224738976 = colontmp__436212921[chckIndx(i_436212922, 0, (colontmp__436212921).length - 1)];
              F.line = 194;
              var cpa_1224738977 = swapCase_1224736777(sl_1224738976.a);
              F.line = 195;
              var cpb_1224738978 = swapCase_1224736777(sl_1224738976.b);
                if (!!(HEX3DHEX3D_838861719(sl_1224738976.a, cpa_1224738977))) Temporary9 = false; else {                  Temporary9 = !(HEX3DHEX3D_838861719(sl_1224738976.b, cpb_1224738978));                }              if (Temporary9) {
              F.line = 197;
              n_1224738865.ranges.push(HEX2EHEX2E_1174405674(cpa_1224738977, cpb_1224738978));;
              }
              
              F.line = 239;
              i_436212922 = addInt(i_436212922, 1);
              if (!(((colontmp__436212921).length == L_436212923))) {
              F.line = 240;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      }
      
      break;
    case 6:
      if ((ConstSet36[n_1224738865.kind] != undefined)) {
      F.line = 200;
      n_1224738865.isGreedy = !(n_1224738865.isGreedy);
      }
      
      break;
    case 9:
      F.line = 202;
      n_1224738865.kind = toAsciiKind_1224738811(n_1224738865.kind);
      if ((ConstSet37[n_1224738865.kind] != undefined)) {
      Label10: do {
        F.line = 204;
        var nn_1224739016 = null;
        F.line = 244;
        var i_436212926 = 0;
        F.line = 245;
        var L_436212927 = (n_1224738865.shorthands).length;
        Label11: do {
          F.line = 246;
            Label12: while (true) {
            if (!(i_436212926 < L_436212927)) break Label12;
              F.line = 204;
              nn_1224739016 = n_1224738865.shorthands[chckIndx(i_436212926, 0, (n_1224738865.shorthands).length - 1)];
              F.line = 204;
              nn_1224739016.kind = toAsciiKind_1224738811(nn_1224739016.kind);
              F.line = 248;
              i_436212926 = addInt(i_436212926, 1);
              if (!(((n_1224738865.shorthands).length == L_436212927))) {
              F.line = 249;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      }
      
      break;
    default: 
      if (!((ConstSet38[f_1224738866] != undefined))) {
      F.line = 207;
      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(207, 14) `f in\x0A    {flagNotAnyMatchNewLine, flagNotMultiLine, flagNotCaseInsensitive,\x0A     flagNotUnGreedy, flagUnicode, flagVerbose, flagNotVerbose}` "));
      }
      
      break;
    }
  framePtr = F.prev;

  
}

function applyFlags_1224739027(exp_1224739028) {
  var result_1224739029 = ({s: []});

  var F = {procname: "exptransformation.applyFlags", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 218;
    result_1224739029.s = nimCopy(null, newSeq_1174407038(chckRange((exp_1224739028.s).length, 0, 2147483647)), NTI1174406494);
    F.line = 219;
    if (result_1224739029.s.length < 0) { for (var i = result_1224739029.s.length ; i < 0 ; ++i) result_1224739029.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1224739029.s.length = 0; };
    F.line = 220;
    var flags_1224739056 = [newSeq_1224739048(0)];
    F.line = 221;
    var sc_1224739060 = [scan_1224736876(exp_1224739028.s)];
    Label1: do {
      F.line = 222;
      var n_1224739064 = null;
      Label2: do {
        F.line = 34;
          Label3: while (true) {
          if (!(sc_1224739060[0].pos <= (sc_1224739060[0].s).length - 1)) break Label3;
            F.line = 35;
            sc_1224739060[0].pos = addInt(sc_1224739060[0].pos, 1);
            F.line = 222;
            n_1224739064 = sc_1224739060[0].s[chckIndx(subInt(sc_1224739060[0].pos, 1), 0, (sc_1224739060[0].s).length - 1)];
            Label4: do {
              F.line = 225;
              switch (n_1224739064.kind) {
              case 3:
              case 41:
              case 42:
              case 43:
              case 44:
                F.line = 227;
                var Temporary5 = nimCopy(null, n_1224739064.flags, NTI1090519063);
                flags_1224739056[0].push(Temporary5);;
                break;
              case 4:
                F.line = 229;
                var _ = pop_1224739069(flags_1224739056, 0);
                break;
              case 5:
                if ((0 < (flags_1224739056[0]).length)) {
                F.line = 232;
                add_1224739087(flags_1224739056[0], chckIndx(subInt((flags_1224739056[0]).length, 1), 0, (flags_1224739056[0]).length - 1), n_1224739064.flags);
                }
                else {
                  F.line = 234;
                  var Temporary6 = nimCopy(null, n_1224739064.flags, NTI1090519063);
                flags_1224739056[0].push(Temporary6);;
                }
                
                F.line = 237;
                result_1224739029.s.push({kind: 45, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});;
                F.line = 238;
                break Label4;
                break;
              default: 
                F.line = 240;
                var ff_1224739119 = squash_1224738817(flags_1224739056[0]);
                Label7: do {
                  F.line = 241;
                  var f_1224739138 = 0;
                  F.line = 90;
                  var res_1509950466 = 0;
                  Label8: do {
                    F.line = 91;
                      Label9: while (true) {
                      if (!(res_1509950466 <= 11)) break Label9;
                        F.line = 241;
                        f_1224739138 = chckRange(res_1509950466, 0, 11);
                        if (ff_1224739119[chckIndx(f_1224739138, 0, (ff_1224739119).length - 1)]) {
                        F.line = 243;
                        applyFlag_1224738864(n_1224739064, f_1224739138);
                        }
                        
                        F.line = 93;
                        res_1509950466 = addInt(res_1509950466, 1);
                      }
                  } while (false);
                } while (false);
                break;
              }
              F.line = 244;
              var Temporary10 = nimCopy(null, n_1224739064, NTI1090519053);
              result_1224739029.s.push(Temporary10);;
            } while (false);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224739029;

}

function peekImpl_1207959639(sc_1207959641, default_1207959642) {
    var Temporary1;

  var result_1207959643 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "peekImpl.peekImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 53;
    if (((sc_1207959641.s).length - 1 < sc_1207959641.pos)) {
    Temporary1 = default_1207959642;
    }
    else {
    Temporary1 = sc_1207959641.s[chckIndx(sc_1207959641.pos, 0, (sc_1207959641.s).length - 1)];
    }
    
    result_1207959643 = nimCopy(result_1207959643, Temporary1, NTI1090519053);
  framePtr = F.prev;

  return result_1207959643;

}

function initEoeNode_1090519179() {
  var result_1090519180 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "types.initEoeNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    F.line = 143;
    result_1090519180 = nimCopy(result_1090519180, {kind: 46, cp: toRune_1140850719(makeNimstrLit("#")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1090519180;

}

function peek_1207959629(sc_1207959634) {
  var result_1207959635 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "scanner.peek", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 65;
    result_1207959635 = nimCopy(result_1207959635, peekImpl_1207959639(sc_1207959634, initEoeNode_1090519179()), NTI1090519053);
  framePtr = F.prev;

  return result_1207959635;

}

function next_1224736921(sc_1224736923) {
  var result_1224736924 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "next.next", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 49;
    result_1224736924 = nimCopy(result_1224736924, sc_1224736923.s[chckIndx(sc_1224736923.pos, 0, (sc_1224736923.s).length - 1)], NTI1090519053);
    F.line = 50;
    sc_1224736923.pos = addInt(sc_1224736923.pos, 1);
  framePtr = F.prev;

  return result_1224736924;

}

function greediness_1224736859(exp_1224736860) {
              var Temporary4;

  var result_1224736861 = ({s: []});

  var F = {procname: "exptransformation.greediness", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 48;
    result_1224736861.s = nimCopy(null, newSeq_1174407038(chckRange((exp_1224736860.s).length, 0, 2147483647)), NTI1174406494);
    F.line = 49;
    if (result_1224736861.s.length < 0) { for (var i = result_1224736861.s.length ; i < 0 ; ++i) result_1224736861.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1224736861.s.length = 0; };
    F.line = 50;
    var sc_1224736894 = [scan_1224736876(exp_1224736860.s)];
    Label1: do {
      F.line = 51;
      var n_1224736905 = null;
      Label2: do {
        F.line = 34;
          Label3: while (true) {
          if (!(sc_1224736894[0].pos <= (sc_1224736894[0].s).length - 1)) break Label3;
            F.line = 35;
            sc_1224736894[0].pos = addInt(sc_1224736894[0].pos, 1);
            F.line = 51;
            n_1224736905 = sc_1224736894[0].s[chckIndx(subInt(sc_1224736894[0].pos, 1), 0, (sc_1224736894[0].s).length - 1)];
              if ((ConstSet39[n_1224736905.kind] != undefined)) Temporary4 = true; else {                Temporary4 = (n_1224736905.kind == 9);              }            if (Temporary4) {
            F.line = 54;
            n_1224736905.isGreedy = true;
            if ((peek_1207959629(sc_1224736894[0]).kind == 9)) {
            F.line = 56;
            n_1224736905.isGreedy = false;
            F.line = 57;
            var _ = next_1224736921(sc_1224736894[0]);
            }
            
            }
            
            F.line = 51;
            var Temporary5 = nimCopy(null, n_1224736905, NTI1090519053);
            result_1224736861.s.push(Temporary5);;
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224736861;

}

function slotsNeeded_1023410218(count_1023410219) {
  var result_1023410220 = 0;

  var F = {procname: "tables.slotsNeeded", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 34;
    result_1023410220 = nextPowerOfTwo_671088843(addInt(divInt(mulInt(count_1023410219, 3), 2), 4));
  framePtr = F.prev;

  return result_1023410220;

}

function initOrderedTable_1224736959(initialSize_1224736962) {
  var result_1224736963 = ({data: [], counter: 0, first: 0, last: 0});

  var F = {procname: "initOrderedTable.initOrderedTable", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 163;
    var correctSizeHEX60gensym5_1224736965 = slotsNeeded_1023410218(chckRange(initialSize_1224736962, 0, 2147483647));
    F.line = 167;
    result_1224736963.counter = 0;
    F.line = 168;
    result_1224736963.data = new Array(chckRange(correctSizeHEX60gensym5_1224736965, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym5_1224736965, 0, 2147483647) ; ++i) { result_1224736963.data[i] = {Field0: 0, Field1: 0, Field2: [], Field3: 0}; }    F.line = 170;
    result_1224736963.first = -1;
    F.line = 171;
    result_1224736963.last = -1;
  framePtr = F.prev;

  return result_1224736963;

}

function newSeq_1224736983(len_1224736985) {
  var result_1224736986 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_1224736986 = new Array(len_1224736985); for (var i = 0 ; i < len_1224736985 ; ++i) { result_1224736986[i] = 0; }  framePtr = F.prev;

  return result_1224736986;

}

function imul_973078818(a_973078819, b_973078820) {
  var result_973078821 = 0;

  var F = {procname: "hashes.imul", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 289;
    var mask_973078822 = 65535;
    F.line = 291;
    var aHi_973078827 = ((a_973078819 >>> 16) & mask_973078822);
    F.line = 292;
    var aLo_973078828 = (a_973078819 & mask_973078822);
    F.line = 293;
    var bHi_973078833 = ((b_973078820 >>> 16) & mask_973078822);
    F.line = 294;
    var bLo_973078834 = (b_973078820 & mask_973078822);
    F.line = 295;
    result_973078821 = ((((aLo_973078828 * bLo_973078834) >>> 0) + (((((aHi_973078827 * bLo_973078834) >>> 0) + ((aLo_973078828 * bHi_973078833) >>> 0)) >>> 0) << 16)) >>> 0);
  framePtr = F.prev;

  return result_973078821;

}

function rotl32_973078839(x_973078840, r_973078841) {
  var result_973078842 = 0;

  var F = {procname: "hashes.rotl32", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 300;
    result_973078842 = ((x_973078840 << r_973078841) | (x_973078840 >>> subInt(32, r_973078841)));
  framePtr = F.prev;

  return result_973078842;

}

function murmurHash_973078851(x_973078852) {
  var result_973078853 = 0;

  var F = {procname: "hashes.murmurHash", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 311;
    var size_973078862 = (x_973078852).length;
    F.line = 312;
    var stepSize_973078863 = 4;
    F.line = 313;
    var n_973078864 = divInt(size_973078862, stepSize_973078863);
    F.line = 315;
    var h1_973078865 = 0;
    F.line = 316;
    var i_973078866 = 0;
    Label1: do {
      F.line = 319;
        Label2: while (true) {
        if (!(i_973078866 < mulInt(n_973078864, stepSize_973078863))) break Label2;
          F.line = 320;
          var k1_973078867 = 0;
          F.line = 322;
          var j_973078868 = stepSize_973078863;
          Label3: do {
            F.line = 323;
              Label4: while (true) {
              if (!(0 < j_973078868)) break Label4;
                F.line = 324;
                j_973078868 = subInt(j_973078868, 1);
                F.line = 325;
                k1_973078867 = ((k1_973078867 << 8) | x_973078852[chckIndx(addInt(i_973078866, j_973078868), 0, (x_973078852).length - 1)]);
              }
          } while (false);
          F.line = 328;
          i_973078866 = addInt(i_973078866, stepSize_973078863);
          F.line = 330;
          k1_973078867 = imul_973078818(k1_973078867, 3432918353);
          F.line = 331;
          k1_973078867 = rotl32_973078839(k1_973078867, 15);
          F.line = 332;
          k1_973078867 = imul_973078818(k1_973078867, 461845907);
          F.line = 334;
          h1_973078865 = (h1_973078865 ^ k1_973078867);
          F.line = 335;
          h1_973078865 = rotl32_973078839(h1_973078865, 13);
          F.line = 336;
          h1_973078865 = ((((h1_973078865 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while (false);
    F.line = 339;
    var k1_973078885 = 0;
    F.line = 340;
    var rem_973078886 = modInt(size_973078862, stepSize_973078863);
    Label5: do {
      F.line = 341;
        Label6: while (true) {
        if (!(0 < rem_973078886)) break Label6;
          F.line = 342;
          rem_973078886 = subInt(rem_973078886, 1);
          F.line = 343;
          k1_973078885 = ((k1_973078885 << 8) | x_973078852[chckIndx(addInt(i_973078866, rem_973078886), 0, (x_973078852).length - 1)]);
        }
    } while (false);
    F.line = 344;
    k1_973078885 = imul_973078818(k1_973078885, 3432918353);
    F.line = 345;
    k1_973078885 = rotl32_973078839(k1_973078885, 15);
    F.line = 346;
    k1_973078885 = imul_973078818(k1_973078885, 461845907);
    F.line = 347;
    h1_973078865 = (h1_973078865 ^ k1_973078885);
    F.line = 350;
    h1_973078865 = (h1_973078865 ^ size_973078862);
    F.line = 351;
    h1_973078865 = (h1_973078865 ^ (h1_973078865 >>> 16));
    F.line = 352;
    h1_973078865 = imul_973078818(h1_973078865, 2246822507);
    F.line = 353;
    h1_973078865 = (h1_973078865 ^ (h1_973078865 >>> 13));
    F.line = 354;
    h1_973078865 = imul_973078818(h1_973078865, 3266489909);
    F.line = 355;
    h1_973078865 = (h1_973078865 ^ (h1_973078865 >>> 16));
    F.line = 356;
    result_973078853 = (h1_973078865 | 0);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_973078853;

}

function hash_973078950(x_973078951) {
  var result_973078952 = 0;

  var F = {procname: "hashes.hash", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 388;
    result_973078952 = murmurHash_973078851((x_973078951.slice(0, (x_973078951).length - 1 + 1)));
  framePtr = F.prev;

  return result_973078952;

}

function isFilled_1023410207(hcode_1023410208) {
  var result_1023410209 = false;

  var F = {procname: "tables.isFilled", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 22;
    result_1023410209 = !((hcode_1023410208 == 0));
  framePtr = F.prev;

  return result_1023410209;

}

function nextTry_1023410210(h_1023410211, maxHash_1023410212) {
  var result_1023410213 = 0;

  var F = {procname: "tables.nextTry", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 25;
    result_1023410213 = (addInt(h_1023410211, 1) & maxHash_1023410212);
  framePtr = F.prev;

  return result_1023410213;

}

function rawGet_1224737167(t_1224737170, key_1224737171, hc_1224737172, hc_1224737172_Idx) {
            var Temporary3;

  var result_1224737173 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 64;
    hc_1224737172[hc_1224737172_Idx] = hash_973078950(key_1224737171);
    if ((hc_1224737172[hc_1224737172_Idx] == 0)) {
    F.line = 66;
    hc_1224737172[hc_1224737172_Idx] = 314159265;
    }
    
    if (((t_1224737170.data).length == 0)) {
    F.line = 48;
    result_1224737173 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_1224737235 = (hc_1224737172[hc_1224737172_Idx] & (t_1224737170.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_1023410207(t_1224737170.data[chckIndx(h_1224737235, 0, (t_1224737170.data).length - 1)].Field0)) break Label2;
            if (!(t_1224737170.data[chckIndx(h_1224737235, 0, (t_1224737170.data).length - 1)].Field0 == hc_1224737172[hc_1224737172_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_1224737170.data[chckIndx(h_1224737235, 0, (t_1224737170.data).length - 1)].Field2, key_1224737171);            }          if (Temporary3) {
          F.line = 56;
          result_1224737173 = h_1224737235;
          break BeforeRet;
          }
          
          F.line = 57;
          h_1224737235 = nextTry_1023410210(h_1224737235, (t_1224737170.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_1224737173 = subInt(-1, h_1224737235);
  } while (false);
  framePtr = F.prev;

  return result_1224737173;

}

function mustRehash_1224737541(t_1224737543) {
  var result_1224737544 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_1224737543.counter < (t_1224737543.data).length))) {
    F.line = 29;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 30;
    result_1224737544 = ((mulInt((t_1224737543.data).length, 2) < mulInt(t_1224737543.counter, 3)) || (subInt((t_1224737543.data).length, t_1224737543.counter) < 4));
  framePtr = F.prev;

  return result_1224737544;

}

function rawInsert_1224738187(t_1224738190, data_1224738191, data_1224738191_Idx, key_1224738192, val_1224738193, hc_1224738194, h_1224738195) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 22;
    data_1224738191[data_1224738191_Idx][chckIndx(h_1224738195, 0, (data_1224738191[data_1224738191_Idx]).length - 1)].Field2 = nimCopy(null, key_1224738192, NTI33554439);
    F.line = 23;
    data_1224738191[data_1224738191_Idx][chckIndx(h_1224738195, 0, (data_1224738191[data_1224738191_Idx]).length - 1)].Field3 = val_1224738193;
    F.line = 24;
    data_1224738191[data_1224738191_Idx][chckIndx(h_1224738195, 0, (data_1224738191[data_1224738191_Idx]).length - 1)].Field0 = hc_1224738194;
    F.line = 1275;
    data_1224738191[data_1224738191_Idx][chckIndx(h_1224738195, 0, (data_1224738191[data_1224738191_Idx]).length - 1)].Field1 = -1;
    if ((t_1224738190.first < 0)) {
    F.line = 1276;
    t_1224738190.first = h_1224738195;
    }
    
    if ((0 <= t_1224738190.last)) {
    F.line = 1277;
    data_1224738191[data_1224738191_Idx][chckIndx(t_1224738190.last, 0, (data_1224738191[data_1224738191_Idx]).length - 1)].Field1 = h_1224738195;
    }
    
    F.line = 1278;
    t_1224738190.last = h_1224738195;
  framePtr = F.prev;

  
}

function enlarge_1224737737(t_1224737740) {
          var Temporary6;
          var Temporary7;

  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 1281;
    var n_1224737743 = [];
    F.line = 1282;
    n_1224737743 = new Array(chckRange(mulInt((t_1224737740.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_1224737740.data).length, 2), 0, 2147483647) ; ++i) { n_1224737743[i] = {Field0: 0, Field1: 0, Field2: [], Field3: 0}; }    F.line = 1283;
    var h_1224737806 = t_1224737740.first;
    F.line = 1284;
    t_1224737740.first = -1;
    F.line = 1285;
    t_1224737740.last = -1;
    F.line = 1286;
    var Temporary1 = t_1224737740.data; t_1224737740.data = n_1224737743; n_1224737743 = Temporary1;    Label2: do {
      F.line = 1287;
        Label3: while (true) {
        if (!(0 <= h_1224737806)) break Label3;
          F.line = 1288;
          var nxt_1224737868 = n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field1;
          F.line = 1289;
          var eh_1224737926 = n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field0;
          if (isFilled_1023410207(eh_1224737926)) {
          F.line = 1291;
          var j_1224737930 = (eh_1224737926 & (t_1224737740.data).length - 1);
          Label4: do {
            F.line = 1292;
              Label5: while (true) {
              if (!isFilled_1023410207(t_1224737740.data[chckIndx(j_1224737930, 0, (t_1224737740.data).length - 1)].Field0)) break Label5;
                F.line = 1293;
                j_1224737930 = nextTry_1023410210(j_1224737930, (t_1224737740.data).length - 1);
              }
          } while (false);
          F.line = 1294;
          Temporary6 = n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field2;
          n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field2 = genericReset(n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field2, NTI33554439);
          Temporary7 = n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field3;
          n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field3 = genericReset(n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field3, NTI33554458);
          rawInsert_1224738187(t_1224737740, t_1224737740, "data", Temporary6, Temporary7, n_1224737743[chckIndx(h_1224737806, 0, (n_1224737743).length - 1)].Field0, j_1224737930);
          }
          
          F.line = 1295;
          h_1224737806 = nxt_1224737868;
        }
    } while (false);
  framePtr = F.prev;

  
}

function rawGetKnownHC_1224738489(t_1224738492, key_1224738493, hc_1224738494) {
  var result_1224738495 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (((t_1224738492.data).length == 0)) {
    F.line = 48;
    result_1224738495 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_1224738557 = (hc_1224738494 & (t_1224738492.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_1023410207(t_1224738492.data[chckIndx(h_1224738557, 0, (t_1224738492.data).length - 1)].Field0)) break Label2;
          if (((t_1224738492.data[chckIndx(h_1224738557, 0, (t_1224738492.data).length - 1)].Field0 == hc_1224738494) && eqStrings(t_1224738492.data[chckIndx(h_1224738557, 0, (t_1224738492.data).length - 1)].Field2, key_1224738493))) {
          F.line = 56;
          result_1224738495 = h_1224738557;
          break BeforeRet;
          }
          
          F.line = 57;
          h_1224738557 = nextTry_1023410210(h_1224738557, (t_1224738492.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_1224738495 = subInt(-1, h_1224738557);
  } while (false);
  framePtr = F.prev;

  return result_1224738495;

}

function HEX5BHEX5DHEX3D_1224737087(t_1224737090, key_1224737091, val_1224737092) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_1224737090.data).length == 0)) {
    F.line = 163;
    var correctSizeHEX60gensym13_1224737153 = slotsNeeded_1023410218(32);
    F.line = 167;
    t_1224737090.counter = 0;
    F.line = 168;
    t_1224737090.data = new Array(chckRange(correctSizeHEX60gensym13_1224737153, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym13_1224737153, 0, 2147483647) ; ++i) { t_1224737090.data[i] = {Field0: 0, Field1: 0, Field2: [], Field3: 0}; }    F.line = 170;
    t_1224737090.first = -1;
    F.line = 171;
    t_1224737090.last = -1;
    }
    
    F.line = 57;
    var hc_1224737158 = [0];
    F.line = 58;
    var index_1224737419 = rawGet_1224737167(t_1224737090, key_1224737091, hc_1224737158, 0);
    if ((0 <= index_1224737419)) {
    F.line = 59;
    t_1224737090.data[chckIndx(index_1224737419, 0, (t_1224737090.data).length - 1)].Field3 = val_1224737092;
    }
    else {
      if (((t_1224737090.data).length == 0)) {
      F.line = 163;
      var correctSizeHEX60gensym18_1224737536 = slotsNeeded_1023410218(32);
      F.line = 167;
      t_1224737090.counter = 0;
      F.line = 168;
      t_1224737090.data = new Array(chckRange(correctSizeHEX60gensym18_1224737536, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym18_1224737536, 0, 2147483647) ; ++i) { t_1224737090.data[i] = {Field0: 0, Field1: 0, Field2: [], Field3: 0}; }      F.line = 170;
      t_1224737090.first = -1;
      F.line = 171;
      t_1224737090.last = -1;
      }
      
      if (mustRehash_1224737541(t_1224737090)) {
      F.line = 49;
      enlarge_1224737737(t_1224737090);
      F.line = 50;
      index_1224737419 = rawGetKnownHC_1224738489(t_1224737090, key_1224737091, hc_1224737158[0]);
      }
      
      F.line = 51;
      index_1224737419 = subInt(-1, index_1224737419);
      F.line = 52;
      rawInsert_1224738187(t_1224737090, t_1224737090, "data", key_1224737091, val_1224737092, hc_1224737158[0], index_1224737419);
      F.line = 60;
      t_1224737090.counter = addInt(t_1224737090.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function pop_1224738760(s_1224738762, s_1224738762_Idx) {
  var result_1224738763 = 0;

  var F = {procname: "pop.pop", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1866;
    var L_1224738767 = subInt((s_1224738762[s_1224738762_Idx]).length, 1);
    F.line = 1871;
    result_1224738763 = s_1224738762[s_1224738762_Idx][chckIndx(L_1224738767, 0, (s_1224738762[s_1224738762_Idx]).length - 1)];
    F.line = 1872;
    if (s_1224738762[s_1224738762_Idx].length < chckRange(L_1224738767, 0, 2147483647)) { for (var i = s_1224738762[s_1224738762_Idx].length ; i < chckRange(L_1224738767, 0, 2147483647) ; ++i) s_1224738762[s_1224738762_Idx].push(0); }
               else { s_1224738762[s_1224738762_Idx].length = chckRange(L_1224738767, 0, 2147483647); };
  framePtr = F.prev;

  return result_1224738763;

}

function fillGroups_1224736955(exp_1224736956, groups_1224736957) {
  var result_1224736958 = ({s: []});

  var F = {procname: "exptransformation.fillGroups", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 70;
    result_1224736958 = nimCopy(result_1224736958, exp_1224736956, NTI1191182339);
    F.line = 71;
    groups_1224736957.names = nimCopy(groups_1224736957.names, initOrderedTable_1224736959(2), NTI1224736906);
    F.line = 72;
    groups_1224736957.count = 0;
    F.line = 73;
    var gs_1224737000 = [newSeq_1224736983(0)];
    Label1: do {
      F.line = 74;
      var i_1224737032 = 0;
      F.line = 74;
      var n_1224737033 = null;
      F.line = 178;
      var i_1509950452 = 0;
      F.line = 179;
      var L_1509950453 = (result_1224736958.s).length;
      Label2: do {
        F.line = 180;
          Label3: while (true) {
          if (!(i_1509950452 < L_1509950453)) break Label3;
            F.line = 74;
            i_1224737032 = i_1509950452;
            F.line = 74;
            n_1224737033 = result_1224736958.s[chckIndx(i_1509950452, 0, (result_1224736958.s).length - 1)];
            F.line = 74;
            switch (n_1224737033.kind) {
            case 3:
            case 41:
            case 42:
            case 43:
            case 44:
              F.line = 77;
              gs_1224737000[0].push(i_1224737032);;
              if (n_1224737033.isCapturing) {
              F.line = 79;
              n_1224737033.idx = groups_1224736957.count;
              F.line = 80;
              groups_1224736957.count = addInt(groups_1224736957.count, 1);
              }
              
              if ((0 < (n_1224737033.name).length)) {
              if (!(n_1224737033.isCapturing)) {
              F.line = 82;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim(82, 16) `n.isCapturing` "));
              }
              
              F.line = 83;
              HEX5BHEX5DHEX3D_1224737087(groups_1224736957.names, n_1224737033.name, n_1224737033.idx);
              }
              
              break;
            case 4:
              F.line = 85;
              check_1224736780((0 < (gs_1224737000[0]).length), makeNimstrLit("Invalid capturing group. Found too many closing symbols"));
              F.line = 89;
              var start_1224738772 = pop_1224738760(gs_1224737000, 0);
              F.line = 90;
              n_1224737033.isCapturing = result_1224736958.s[chckIndx(start_1224738772, 0, (result_1224736958.s).length - 1)].isCapturing;
              F.line = 91;
              n_1224737033.idx = result_1224736958.s[chckIndx(start_1224738772, 0, (result_1224736958.s).length - 1)].idx;
              break;
            default: 
              break;
            }
            F.line = 74;
            check_1224736780((groups_1224736957.count < 32767), HEX25HEX25_1140850924(makeNimstrLit("Invalid number of capturing groups, the limit is $#"), makeNimstrLit("32766")));
            F.line = 182;
            i_1509950452 = addInt(i_1509950452, 1);
            if (!(((result_1224736958.s).length == L_1509950453))) {
            F.line = 183;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 98;
    check_1224736780(((gs_1224737000[0]).length == 0), makeNimstrLit("Invalid capturing group. Found too many opening symbols"));
  framePtr = F.prev;

  return result_1224736958;

}

function initSkipNode_1090519308() {
  var result_1090519309 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "types.initSkipNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    F.line = 181;
    result_1090519309 = nimCopy(result_1090519309, {kind: 45, cp: toRune_1140850719(makeNimstrLit("#")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1090519309;

}

function fixEmptyOps_1224736784(exp_1224736785) {
              var Temporary5;
              var Temporary7;

  var result_1224736786 = ({s: []});

  var F = {procname: "exptransformation.fixEmptyOps", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 30;
    result_1224736786.s = nimCopy(null, newSeq_1174407038(chckRange((exp_1224736785.s).length, 0, 2147483647)), NTI1174406494);
    F.line = 31;
    if (result_1224736786.s.length < 0) { for (var i = result_1224736786.s.length ; i < 0 ; ++i) result_1224736786.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1224736786.s.length = 0; };
    Label1: do {
      F.line = 32;
      var i_1224736808 = 0;
      F.line = 75;
      var colontmp__1509950447 = 0;
      F.line = 32;
      colontmp__1509950447 = subInt((exp_1224736785.s).length, 1);
      F.line = 90;
      var res_1509950448 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_1509950448 <= colontmp__1509950447)) break Label3;
            F.line = 32;
            i_1224736808 = res_1509950448;
            if ((exp_1224736785.s[chckIndx(i_1224736808, 0, (exp_1224736785.s).length - 1)].kind == 6)) {
            if (((subInt(i_1224736808, 1) < 0) || (exp_1224736785.s[chckIndx(subInt(i_1224736808, 1), 0, (exp_1224736785.s).length - 1)].kind == 3))) {
            F.line = 35;
            result_1224736786.s.push(initSkipNode_1090519308());;
            }
            
            F.line = 36;
            var Temporary4 = nimCopy(null, exp_1224736785.s[chckIndx(i_1224736808, 0, (exp_1224736785.s).length - 1)], NTI1090519053);
            result_1224736786.s.push(Temporary4);;
              if ((subInt((exp_1224736785.s).length, 1) < addInt(i_1224736808, 1))) Temporary5 = true; else {                Temporary5 = (ConstSet40[exp_1224736785.s[chckIndx(addInt(i_1224736808, 1), 0, (exp_1224736785.s).length - 1)].kind] != undefined);              }            if (Temporary5) {
            F.line = 38;
            result_1224736786.s.push(initSkipNode_1090519308());;
            }
            
            }
            else {
            if ((exp_1224736785.s[chckIndx(i_1224736808, 0, (exp_1224736785.s).length - 1)].kind == 3)) {
            F.line = 40;
            var Temporary6 = nimCopy(null, exp_1224736785.s[chckIndx(i_1224736808, 0, (exp_1224736785.s).length - 1)], NTI1090519053);
            result_1224736786.s.push(Temporary6);;
              if ((subInt((exp_1224736785.s).length, 1) < addInt(i_1224736808, 1))) Temporary7 = true; else {                Temporary7 = (exp_1224736785.s[chckIndx(addInt(i_1224736808, 1), 0, (exp_1224736785.s).length - 1)].kind == 4);              }            if (Temporary7) {
            F.line = 42;
            result_1224736786.s.push(initSkipNode_1090519308());;
            }
            
            }
            else {
              F.line = 44;
              var Temporary8 = nimCopy(null, exp_1224736785.s[chckIndx(i_1224736808, 0, (exp_1224736785.s).length - 1)], NTI1090519053);
            result_1224736786.s.push(Temporary8);;
            }
            }
            F.line = 93;
            res_1509950448 = addInt(res_1509950448, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1224736786;

}

function toAtoms_1224739876(exp_1224739877, groups_1224739878) {
  var result_1224739879 = ({s: []});

  var F = {procname: "exptransformation.toAtoms", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 498;
    result_1224739879 = nimCopy(result_1224739879, joinAtoms_1224739458(populateUid_1224739435(expandRepRange_1224739270(applyFlags_1224739027(greediness_1224736859(fillGroups_1224736955(fixEmptyOps_1224736784(exp_1224739877), groups_1224739878)))))), NTI1191182340);
  framePtr = F.prev;

  return result_1224739879;

}

function transformExp_1224739880(exp_1224739881, groups_1224739882) {
  var result_1224739883 = ({s: []});

  var F = {procname: "exptransformation.transformExp", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/exptransformation.nim", line: 0};
  framePtr = F;
    F.line = 507;
    result_1224739883 = nimCopy(result_1224739883, rpn_1224739638(subExps_1224739711(toAtoms_1224739876(exp_1224739881, groups_1224739882), 41)), NTI1090519044);
  framePtr = F.prev;

  return result_1224739883;

}

function newSeq_838864648(len_838864650) {
  var result_838864651 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_838864651 = new Array(len_838864650); for (var i = 0 ; i < len_838864650 ; ++i) { result_838864651[i] = 0; }  framePtr = F.prev;

  return result_838864651;

}

function toRunes_838864641(s_838864642) {
  var result_838864643 = [];

  var F = {procname: "unicode.toRunes", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 822;
    result_838864643 = nimCopy(null, newSeq_838864648(0), NTI838872505);
    Label1: do {
      F.line = 823;
      var r_838864656 = 0;
      F.line = 793;
      var i_1509950399 = 0;
      F.line = 794;
      var result_1509950400 = 0;
      Label2: do {
        F.line = 795;
          Label3: while (true) {
          if (!(i_1509950399 < (s_838864642).length)) break Label3;
            if ((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] <= 127)) {
            F.line = 81;
            result_1509950400 = chckRange(s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)], -2147483648, 2147483647);
            F.line = 82;
            i_1509950399 = addInt(i_1509950399, 1);
            }
            else {
            if (((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] >>> 5) == 6)) {
            if ((i_1509950399 <= subInt((s_838864642).length, 2))) {
            F.line = 86;
            result_1509950400 = chckRange((((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] & 31) << 6) | (s_838864642[chckIndx(addInt(i_1509950399, 1), 0, (s_838864642).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 88;
            i_1509950399 = addInt(i_1509950399, 2);
            }
            else {
              F.line = 90;
              result_1509950400 = 65533;
              F.line = 91;
              i_1509950399 = addInt(i_1509950399, 1);
            }
            
            }
            else {
            if (((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] >>> 4) == 14)) {
            if ((i_1509950399 <= subInt((s_838864642).length, 3))) {
            F.line = 96;
            result_1509950400 = chckRange(((((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] & 15) << 12) | ((s_838864642[chckIndx(addInt(i_1509950399, 1), 0, (s_838864642).length - 1)] & 63) << 6)) | (s_838864642[chckIndx(addInt(i_1509950399, 2), 0, (s_838864642).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 99;
            i_1509950399 = addInt(i_1509950399, 3);
            }
            else {
              F.line = 101;
              result_1509950400 = 65533;
              F.line = 102;
              i_1509950399 = addInt(i_1509950399, 1);
            }
            
            }
            else {
            if (((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] >>> 3) == 30)) {
            if ((i_1509950399 <= subInt((s_838864642).length, 4))) {
            F.line = 108;
            result_1509950400 = chckRange((((((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] & 7) << 18) | ((s_838864642[chckIndx(addInt(i_1509950399, 1), 0, (s_838864642).length - 1)] & 63) << 12)) | ((s_838864642[chckIndx(addInt(i_1509950399, 2), 0, (s_838864642).length - 1)] & 63) << 6)) | (s_838864642[chckIndx(addInt(i_1509950399, 3), 0, (s_838864642).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 112;
            i_1509950399 = addInt(i_1509950399, 4);
            }
            else {
              F.line = 114;
              result_1509950400 = 65533;
              F.line = 115;
              i_1509950399 = addInt(i_1509950399, 1);
            }
            
            }
            else {
            if (((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] >>> 2) == 62)) {
            if ((i_1509950399 <= subInt((s_838864642).length, 5))) {
            F.line = 122;
            result_1509950400 = chckRange(((((((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] & 3) << 24) | ((s_838864642[chckIndx(addInt(i_1509950399, 1), 0, (s_838864642).length - 1)] & 63) << 18)) | ((s_838864642[chckIndx(addInt(i_1509950399, 2), 0, (s_838864642).length - 1)] & 63) << 12)) | ((s_838864642[chckIndx(addInt(i_1509950399, 3), 0, (s_838864642).length - 1)] & 63) << 6)) | (s_838864642[chckIndx(addInt(i_1509950399, 4), 0, (s_838864642).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 127;
            i_1509950399 = addInt(i_1509950399, 5);
            }
            else {
              F.line = 129;
              result_1509950400 = 65533;
              F.line = 130;
              i_1509950399 = addInt(i_1509950399, 1);
            }
            
            }
            else {
            if (((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] >>> 1) == 126)) {
            if ((i_1509950399 <= subInt((s_838864642).length, 6))) {
            F.line = 138;
            result_1509950400 = chckRange((((((((s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)] & 1) << 30) | ((s_838864642[chckIndx(addInt(i_1509950399, 1), 0, (s_838864642).length - 1)] & 63) << 24)) | ((s_838864642[chckIndx(addInt(i_1509950399, 2), 0, (s_838864642).length - 1)] & 63) << 18)) | ((s_838864642[chckIndx(addInt(i_1509950399, 3), 0, (s_838864642).length - 1)] & 63) << 12)) | ((s_838864642[chckIndx(addInt(i_1509950399, 4), 0, (s_838864642).length - 1)] & 63) << 6)) | (s_838864642[chckIndx(addInt(i_1509950399, 5), 0, (s_838864642).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 144;
            i_1509950399 = addInt(i_1509950399, 6);
            }
            else {
              F.line = 146;
              result_1509950400 = 65533;
              F.line = 147;
              i_1509950399 = addInt(i_1509950399, 1);
            }
            
            }
            else {
              F.line = 149;
              result_1509950400 = chckRange(s_838864642[chckIndx(i_1509950399, 0, (s_838864642).length - 1)], -2147483648, 2147483647);
              F.line = 150;
              i_1509950399 = addInt(i_1509950399, 1);
            }
            }}}}}
            F.line = 823;
            r_838864656 = result_1509950400;
            F.line = 823;
            result_838864643.push(r_838864656);;
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_838864643;

}

function scan_1207959570(raw_1207959571) {
  var result_1207959576 = null;

  var F = {procname: "scanner.scan", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 21;
    result_1207959576 = {raw: nimCopy(null, raw_1207959571, NTI33554439), s: toRunes_838864641(raw_1207959571), pos: 0};
  framePtr = F.prev;

  return result_1207959576;

}

function prev_1174406733(sc_1174406735) {
  var result_1174406736 = 0;

  var F = {procname: "prev.prev", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 42;
    result_1174406736 = sc_1174406735.s[chckIndx(subInt(sc_1174406735.pos, 1), 0, (sc_1174406735.s).length - 1)];
  framePtr = F.prev;

  return result_1174406736;

}

function skipWhiteSpace_1174406921(sc_1174406923, vb_1174406924) {
    var Temporary1;

  var result_1174406925 = false;

  var F = {procname: "parser.skipWhiteSpace", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 684;
    result_1174406925 = false;
    if ((((vb_1174406924).length == 0) || !(vb_1174406924[chckIndx(subInt((vb_1174406924).length, 1), 0, (vb_1174406924).length - 1)]))) {
    F.line = 686;
    break BeforeRet;
    }
    
    F.line = 687;
    F.line = 687;
    switch (prev_1174406733(sc_1174406923)) {
    case 32:
    case 9:
    case 10:
    case 13:
    case 12:
    case 11:
      Temporary1 = true;
      break;
    case 35:
      Label2: do {
        F.line = 696;
        var r_1174406942 = 0;
        Label3: do {
          F.line = 28;
            Label4: while (true) {
            if (!(sc_1174406923.pos <= (sc_1174406923.s).length - 1)) break Label4;
              F.line = 29;
              sc_1174406923.pos = addInt(sc_1174406923.pos, 1);
              F.line = 696;
              r_1174406942 = sc_1174406923.s[chckIndx(subInt(sc_1174406923.pos, 1), 0, (sc_1174406923.s).length - 1)];
              if (HEX3DHEX3D_838861719(r_1174406942, toRune_1140850719(makeNimstrLit("\x0A")))) {
              F.line = 698;
              break Label2;
              }
              
            }
        } while (false);
      } while (false);
      Temporary1 = true;
      break;
    default: 
      Temporary1 = false;
      break;
    }
    result_1174406925 = Temporary1;
  } while (false);
  framePtr = F.prev;

  return result_1174406925;

}

function curr_1207959687(sc_1207959689) {
  var result_1207959690 = 0;

  var F = {procname: "curr.curr", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 45;
    result_1207959690 = sc_1207959689.s[chckIndx(sc_1207959689.pos, 0, (sc_1207959689.s).length - 1)];
  framePtr = F.prev;

  return result_1207959690;

}

function next_1207959694(sc_1207959696) {
  var result_1207959697 = 0;

  var F = {procname: "next.next", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 49;
    result_1207959697 = sc_1207959696.s[chckIndx(sc_1207959696.pos, 0, (sc_1207959696.s).length - 1)];
    F.line = 50;
    sc_1207959696.pos = addInt(sc_1207959696.pos, 1);
  framePtr = F.prev;

  return result_1207959697;

}

function isAsciiPrintable_1174405152(s_1174405153) {
  var result_1174405154 = false;

  var F = {procname: "parser.isAsciiPrintable", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 18;
    result_1174405154 = true;
    Label1: do {
      F.line = 19;
      var c_1174405155 = 0;
      F.line = 793;
      var i_436212943 = 0;
      F.line = 794;
      var result_436212944 = 0;
      Label2: do {
        F.line = 795;
          Label3: while (true) {
          if (!(i_436212943 < (s_1174405153).length)) break Label3;
            if ((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] <= 127)) {
            F.line = 81;
            result_436212944 = chckRange(s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)], -2147483648, 2147483647);
            F.line = 82;
            i_436212943 = addInt(i_436212943, 1);
            }
            else {
            if (((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] >>> 5) == 6)) {
            if ((i_436212943 <= subInt((s_1174405153).length, 2))) {
            F.line = 86;
            result_436212944 = chckRange((((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] & 31) << 6) | (s_1174405153[chckIndx(addInt(i_436212943, 1), 0, (s_1174405153).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 88;
            i_436212943 = addInt(i_436212943, 2);
            }
            else {
              F.line = 90;
              result_436212944 = 65533;
              F.line = 91;
              i_436212943 = addInt(i_436212943, 1);
            }
            
            }
            else {
            if (((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] >>> 4) == 14)) {
            if ((i_436212943 <= subInt((s_1174405153).length, 3))) {
            F.line = 96;
            result_436212944 = chckRange(((((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] & 15) << 12) | ((s_1174405153[chckIndx(addInt(i_436212943, 1), 0, (s_1174405153).length - 1)] & 63) << 6)) | (s_1174405153[chckIndx(addInt(i_436212943, 2), 0, (s_1174405153).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 99;
            i_436212943 = addInt(i_436212943, 3);
            }
            else {
              F.line = 101;
              result_436212944 = 65533;
              F.line = 102;
              i_436212943 = addInt(i_436212943, 1);
            }
            
            }
            else {
            if (((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] >>> 3) == 30)) {
            if ((i_436212943 <= subInt((s_1174405153).length, 4))) {
            F.line = 108;
            result_436212944 = chckRange((((((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] & 7) << 18) | ((s_1174405153[chckIndx(addInt(i_436212943, 1), 0, (s_1174405153).length - 1)] & 63) << 12)) | ((s_1174405153[chckIndx(addInt(i_436212943, 2), 0, (s_1174405153).length - 1)] & 63) << 6)) | (s_1174405153[chckIndx(addInt(i_436212943, 3), 0, (s_1174405153).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 112;
            i_436212943 = addInt(i_436212943, 4);
            }
            else {
              F.line = 114;
              result_436212944 = 65533;
              F.line = 115;
              i_436212943 = addInt(i_436212943, 1);
            }
            
            }
            else {
            if (((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] >>> 2) == 62)) {
            if ((i_436212943 <= subInt((s_1174405153).length, 5))) {
            F.line = 122;
            result_436212944 = chckRange(((((((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] & 3) << 24) | ((s_1174405153[chckIndx(addInt(i_436212943, 1), 0, (s_1174405153).length - 1)] & 63) << 18)) | ((s_1174405153[chckIndx(addInt(i_436212943, 2), 0, (s_1174405153).length - 1)] & 63) << 12)) | ((s_1174405153[chckIndx(addInt(i_436212943, 3), 0, (s_1174405153).length - 1)] & 63) << 6)) | (s_1174405153[chckIndx(addInt(i_436212943, 4), 0, (s_1174405153).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 127;
            i_436212943 = addInt(i_436212943, 5);
            }
            else {
              F.line = 129;
              result_436212944 = 65533;
              F.line = 130;
              i_436212943 = addInt(i_436212943, 1);
            }
            
            }
            else {
            if (((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] >>> 1) == 126)) {
            if ((i_436212943 <= subInt((s_1174405153).length, 6))) {
            F.line = 138;
            result_436212944 = chckRange((((((((s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)] & 1) << 30) | ((s_1174405153[chckIndx(addInt(i_436212943, 1), 0, (s_1174405153).length - 1)] & 63) << 24)) | ((s_1174405153[chckIndx(addInt(i_436212943, 2), 0, (s_1174405153).length - 1)] & 63) << 18)) | ((s_1174405153[chckIndx(addInt(i_436212943, 3), 0, (s_1174405153).length - 1)] & 63) << 12)) | ((s_1174405153[chckIndx(addInt(i_436212943, 4), 0, (s_1174405153).length - 1)] & 63) << 6)) | (s_1174405153[chckIndx(addInt(i_436212943, 5), 0, (s_1174405153).length - 1)] & 63)), -2147483648, 2147483647);
            F.line = 144;
            i_436212943 = addInt(i_436212943, 6);
            }
            else {
              F.line = 146;
              result_436212944 = 65533;
              F.line = 147;
              i_436212943 = addInt(i_436212943, 1);
            }
            
            }
            else {
              F.line = 149;
              result_436212944 = chckRange(s_1174405153[chckIndx(i_436212943, 0, (s_1174405153).length - 1)], -2147483648, 2147483647);
              F.line = 150;
              i_436212943 = addInt(i_436212943, 1);
            }
            }}}}}
            F.line = 19;
            c_1174405155 = result_436212944;
            F.line = 19;
            switch (((c_1174405155) | 0)) {
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
              break;
            default: 
              F.line = 24;
              result_1174405154 = false;
              break BeforeRet;
              break;
            }
          }
      } while (false);
    } while (false);
  } while (false);
  framePtr = F.prev;

  return result_1174405154;

}

function runeReverseOffset_838861452(s_838861453, rev_838861454) {
    var Temporary3;

  var result_838861455 = {Field0: 0, Field1: 0};

  var F = {procname: "unicode.runeReverseOffset", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 346;
    var a_838861456 = rev_838861454;
    F.line = 347;
    var o_838861457 = 0;
    F.line = 348;
    var x_838861458 = 0;
    F.line = 349;
    var times_838861459 = subInt(mulInt(2, rev_838861454), nucruneLen(s_838861453));
    Label1: do {
      F.line = 350;
        Label2: while (true) {
        if (!(o_838861457 < (s_838861453).length)) break Label2;
          F.line = 351;
          var r_838861460 = runeLenAt_838860865(s_838861453, chckRange(o_838861457, 0, 2147483647));
          F.line = 352;
          o_838861457 = addInt(o_838861457, r_838861460);
          if ((times_838861459 < a_838861456)) {
          F.line = 354;
          x_838861458 = addInt(x_838861458, r_838861460);
          }
          
          F.line = 355;
          a_838861456 = subInt(a_838861456, 1);
        }
    } while (false);
    F.line = 356;
    if ((0 < a_838861456)) {
    Temporary3 = {Field0: negInt(a_838861456), Field1: subInt(rev_838861454, a_838861456)};
    }
    else {
    Temporary3 = {Field0: x_838861458, Field1: addInt(negInt(a_838861456), rev_838861454)};
    }
    
    result_838861455 = nimCopy(result_838861455, Temporary3, NTI838862344);
  framePtr = F.prev;

  return result_838861455;

}

function runeSubStr_838861691(s_838861692, pos_838861693, len_838861698) {
  var result_838861699 = [];

  var F = {procname: "unicode.runeSubStr", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    if ((pos_838861693 < 0)) {
    F.line = 402;
    var colontmp__436212946 = runeReverseOffset_838861452(s_838861692, chckRange(negInt(pos_838861693), 1, 2147483647));
    F.line = 402;
    var o_838861700 = colontmp__436212946["Field0"];
    F.line = 402;
    var rl_838861701 = colontmp__436212946["Field1"];
    if ((rl_838861701 <= len_838861698)) {
    F.line = 404;
    result_838861699 = nimCopy(null, substr_33557906(s_838861692, o_838861700, subInt((s_838861692).length, 1)), NTI33554439);
    }
    else {
    if ((len_838861698 < 0)) {
    F.line = 406;
    var e_838861702 = addInt(rl_838861701, len_838861698);
    if ((e_838861702 < 0)) {
    F.line = 408;
    result_838861699 = nimCopy(null, [], NTI33554439);
    }
    else {
      F.line = 410;
      result_838861699 = nimCopy(null, substr_33557906(s_838861692, o_838861700, subInt(runeOffset_838861437(s_838861692, chckRange(subInt(e_838861702, addInt(rl_838861701, pos_838861693)), 0, 2147483647), chckRange(o_838861700, 0, 2147483647)), 1)), NTI33554439);
    }
    
    }
    else {
      F.line = 412;
      result_838861699 = nimCopy(null, substr_33557906(s_838861692, o_838861700, subInt(runeOffset_838861437(s_838861692, chckRange(len_838861698, 0, 2147483647), chckRange(o_838861700, 0, 2147483647)), 1)), NTI33554439);
    }
    }
    }
    else {
      F.line = 414;
      var o_838861703 = runeOffset_838861437(s_838861692, chckRange(pos_838861693, 0, 2147483647), 0);
      if ((o_838861703 < 0)) {
      F.line = 416;
      result_838861699 = nimCopy(null, [], NTI33554439);
      }
      else {
      if ((len_838861698 == 2147483647)) {
      F.line = 418;
      result_838861699 = nimCopy(null, substr_33557906(s_838861692, o_838861703, subInt((s_838861692).length, 1)), NTI33554439);
      }
      else {
      if ((len_838861698 < 0)) {
      F.line = 420;
      var colontmp__436212948 = runeReverseOffset_838861452(s_838861692, chckRange(negInt(len_838861698), 1, 2147483647));
      F.line = 420;
      var e_838861708 = colontmp__436212948["Field0"];
      F.line = 420;
      var rl_838861709 = colontmp__436212948["Field1"];
      F.line = 421;
      var _ = rl_838861709;
      if ((e_838861708 <= 0)) {
      F.line = 423;
      result_838861699 = nimCopy(null, [], NTI33554439);
      }
      else {
        F.line = 425;
        result_838861699 = nimCopy(null, substr_33557906(s_838861692, o_838861703, subInt(e_838861708, 1)), NTI33554439);
      }
      
      }
      else {
        F.line = 427;
        var e_838861710 = runeOffset_838861437(s_838861692, chckRange(len_838861698, 0, 2147483647), chckRange(o_838861703, 0, 2147483647));
        if ((e_838861710 < 0)) {
        F.line = 429;
        e_838861710 = (s_838861692).length;
        }
        
        F.line = 430;
        result_838861699 = nimCopy(null, substr_33557906(s_838861692, o_838861703, subInt(e_838861710, 1)), NTI33554439);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_838861699;

}

function nsuAlignString(s_637535248, count_637535249, padding_637535250) {
  var result_637535251 = [];

  var F = {procname: "strutils.align", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    if (((s_637535248).length < count_637535249)) {
    F.line = 1314;
    result_637535251 = nimCopy(null, mnewString(count_637535249), NTI33554439);
    F.line = 1315;
    var spaces_637535252 = subInt(count_637535249, (s_637535248).length);
    Label1: do {
      F.line = 1316;
      var i_637535257 = 0;
      F.line = 75;
      var colontmp__436212950 = 0;
      F.line = 1316;
      colontmp__436212950 = subInt(spaces_637535252, 1);
      F.line = 90;
      var res_436212951 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_436212951 <= colontmp__436212950)) break Label3;
            F.line = 1316;
            i_637535257 = res_436212951;
            F.line = 1316;
            result_637535251[chckIndx(i_637535257, 0, (result_637535251).length - 1)] = padding_637535250;
            F.line = 93;
            res_436212951 = addInt(res_436212951, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      F.line = 1317;
      var i_637535262 = 0;
      F.line = 75;
      var colontmp__436212954 = 0;
      F.line = 1317;
      colontmp__436212954 = subInt(count_637535249, 1);
      F.line = 90;
      var res_436212955 = spaces_637535252;
      Label5: do {
        F.line = 91;
          Label6: while (true) {
          if (!(res_436212955 <= colontmp__436212954)) break Label6;
            F.line = 1317;
            i_637535262 = res_436212955;
            F.line = 1317;
            result_637535251[chckIndx(i_637535262, 0, (result_637535251).length - 1)] = s_637535248[chckIndx(subInt(i_637535262, spaces_637535252), 0, (s_637535248).length - 1)];
            F.line = 93;
            res_436212955 = addInt(res_436212955, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      F.line = 1319;
      result_637535251 = nimCopy(null, s_637535248, NTI33554439);
    }
    
  framePtr = F.prev;

  return result_637535251;

}

function check_1174405162(cond_1174405163, msg_1174405164, at_1174405165, exp_1174405166) {
  var F = {procname: "parser.check", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    if (!(cond_1174405163)) {
    F.line = 30;
    var exp_1174405172 = nsuReplaceStr(exp_1174405166, makeNimstrLit("\x0A"), makeNimstrLit(" "));
    F.line = 31;
    var start_1174405173 = nimMax(0, subInt(at_1174405165, 15));
    F.line = 32;
    var mark_1174405174 = at_1174405165;
    F.line = 33;
    var expMsg_1174405175 = nimCopy(null, msg_1174405164, NTI33554439);
    F.line = 34;
    expMsg_1174405175.push.apply(expMsg_1174405175, makeNimstrLit("\x0A"));;
    if (!(isAsciiPrintable_1174405152(runeSubStr_838861691(exp_1174405172, start_1174405173, subInt(at_1174405165, 1))))) {
    F.line = 36;
    start_1174405173 = subInt(at_1174405165, 1);
    F.line = 37;
    var cleft_1174405176 = HEX25HEX25_1140850924(makeNimstrLit("~$# chars~"), HEX24_318767107(start_1174405173));
    F.line = 38;
    mark_1174405174 = addInt((cleft_1174405176).length, 1);
    F.line = 39;
    expMsg_1174405175.push.apply(expMsg_1174405175, cleft_1174405176);;
    }
    else {
    if ((0 < start_1174405173)) {
    F.line = 41;
    var cleft_1174405177 = HEX25HEX25_1140850924(makeNimstrLit("~$# chars~"), HEX24_318767107(start_1174405173));
    F.line = 42;
    mark_1174405174 = addInt((cleft_1174405177).length, 15);
    F.line = 43;
    expMsg_1174405175.push.apply(expMsg_1174405175, cleft_1174405177);;
    }
    }
    F.line = 44;
    expMsg_1174405175.push.apply(expMsg_1174405175, runeSubStr_838861691(exp_1174405172, start_1174405173, 30));;
    if ((addInt(start_1174405173, 30) < (exp_1174405172).length)) {
    F.line = 46;
    expMsg_1174405175.push.apply(expMsg_1174405175, HEX25HEX25_1140850924(makeNimstrLit("~$# chars~"), HEX24_318767107(subInt(subInt((exp_1174405172).length, start_1174405173), 30))));;
    }
    
    F.line = 47;
    expMsg_1174405175.push.apply(expMsg_1174405175, makeNimstrLit("\x0A"));;
    F.line = 48;
    expMsg_1174405175.push.apply(expMsg_1174405175, nsuAlignString(makeNimstrLit("^"), chckRange(mark_1174405174, 0, 2147483647), 32));;
    F.line = 49;
    raiseException({message: nimCopy(null, expMsg_1174405175, NTI33554439), parent: null, m_type: NTI1140850705, name: null, trace: [], up: null}, "RegexError");
    }
    
  framePtr = F.prev;

  
}

function finished_1207959677(sc_1207959679) {
  var result_1207959680 = false;

  var F = {procname: "finished.finished", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 39;
    result_1207959680 = ((sc_1207959679.s).length - 1 < sc_1207959679.pos);
  framePtr = F.prev;

  return result_1207959680;

}

function nuctoUTF8(c_838861141) {
  var result_838861142 = [];

  var F = {procname: "unicode.toUTF8", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 266;
    result_838861142 = nimCopy(null, [], NTI33554439);
    F.line = 211;
    var iHEX60gensym49_838861144 = c_838861141;
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_838861144, 127)) {
    F.line = 213;
    (result_838861142.length = 1);
    F.line = 214;
    result_838861142[chckIndx(0, 0, (result_838861142).length - 1)] = chckRange(iHEX60gensym49_838861144, 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_838861144, 2047)) {
    F.line = 217;
    (result_838861142.length = 2);
    F.line = 218;
    result_838861142[chckIndx(0, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 >> 6) | 192), 0, 255);
    F.line = 219;
    result_838861142[chckIndx(1, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_838861144, 65535)) {
    F.line = 222;
    (result_838861142.length = 3);
    F.line = 223;
    result_838861142[chckIndx(0, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 >> 12) | 224), 0, 255);
    F.line = 224;
    result_838861142[chckIndx(1, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 6) & 63) | 128), 0, 255);
    F.line = 225;
    result_838861142[chckIndx(2, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_838861144, 2097151)) {
    F.line = 228;
    (result_838861142.length = 4);
    F.line = 229;
    result_838861142[chckIndx(0, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 >> 18) | 240), 0, 255);
    F.line = 230;
    result_838861142[chckIndx(1, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 12) & 63) | 128), 0, 255);
    F.line = 231;
    result_838861142[chckIndx(2, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 6) & 63) | 128), 0, 255);
    F.line = 232;
    result_838861142[chckIndx(3, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_838861144, 67108863)) {
    F.line = 235;
    (result_838861142.length = 5);
    F.line = 236;
    result_838861142[chckIndx(0, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 >> 24) | 248), 0, 255);
    F.line = 237;
    result_838861142[chckIndx(1, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 18) & 63) | 128), 0, 255);
    F.line = 238;
    result_838861142[chckIndx(2, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 12) & 63) | 128), 0, 255);
    F.line = 239;
    result_838861142[chckIndx(3, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 6) & 63) | 128), 0, 255);
    F.line = 240;
    result_838861142[chckIndx(4, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_838861144, 2147483647)) {
    F.line = 243;
    (result_838861142.length = 6);
    F.line = 244;
    result_838861142[chckIndx(0, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 >> 30) | 252), 0, 255);
    F.line = 245;
    result_838861142[chckIndx(1, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 24) & 63) | 128), 0, 255);
    F.line = 246;
    result_838861142[chckIndx(2, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 18) & 63) | 128), 0, 255);
    F.line = 247;
    result_838861142[chckIndx(3, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 12) & 63) | 128), 0, 255);
    F.line = 248;
    result_838861142[chckIndx(4, 0, (result_838861142).length - 1)] = chckRange((((iHEX60gensym49_838861144 >> 6) & 63) | 128), 0, 255);
    F.line = 249;
    result_838861142[chckIndx(5, 0, (result_838861142).length - 1)] = chckRange(((iHEX60gensym49_838861144 & 63) | 128), 0, 255);
    }
    else {
    }
    }}}}}
  framePtr = F.prev;

  return result_838861142;

}

function HEX24_838861391(rune_838861392) {
  var result_838861393 = [];

  var F = {procname: "unicode.$", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 281;
    result_838861393 = nimCopy(null, nuctoUTF8(rune_838861392), NTI33554439);
  framePtr = F.prev;

  return result_838861393;

}

function parseHex_637535109(s_637535111, number_637535112, number_637535112_Idx, start_637535113, maxLen_637535114) {
    var Temporary1;

  var result_637535115 = 0;

  var F = {procname: "parseHex.parseHex", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 187;
    var i_637535116 = start_637535113;
    F.line = 188;
    var output_637535117 = 0;
    F.line = 189;
    var foundDigit_637535118 = false;
    F.line = 190;
    if ((maxLen_637535114 == 0)) {
    Temporary1 = (s_637535111).length;
    }
    else {
    Temporary1 = addInt(i_637535116, maxLen_637535114);
    }
    
    var last_637535119 = nimMin((s_637535111).length, Temporary1);
    if ((((addInt(i_637535116, 1) < last_637535119) && (s_637535111[chckIndx(i_637535116, 0, (s_637535111).length - 1)] == 48)) && (ConstSet41[s_637535111[chckIndx(addInt(i_637535116, 1), 0, (s_637535111).length - 1)]] != undefined))) {
    F.line = 191;
    i_637535116 = addInt(i_637535116, 2);
    }
    else {
    if (((i_637535116 < last_637535119) && (s_637535111[chckIndx(i_637535116, 0, (s_637535111).length - 1)] == 35))) {
    F.line = 192;
    i_637535116 = addInt(i_637535116, 1);
    }
    }
    Label2: do {
      F.line = 193;
        Label3: while (true) {
        if (!(i_637535116 < last_637535119)) break Label3;
          F.line = 194;
          switch (s_637535111[chckIndx(i_637535116, 0, (s_637535111).length - 1)]) {
          case 95:
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            F.line = 197;
            output_637535117 = ((output_637535117 << 4) | subInt(s_637535111[chckIndx(i_637535116, 0, (s_637535111).length - 1)], 48));
            F.line = 198;
            foundDigit_637535118 = true;
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
            F.line = 200;
            output_637535117 = ((output_637535117 << 4) | addInt(subInt(s_637535111[chckIndx(i_637535116, 0, (s_637535111).length - 1)], 97), 10));
            F.line = 201;
            foundDigit_637535118 = true;
            break;
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
            F.line = 203;
            output_637535117 = ((output_637535117 << 4) | addInt(subInt(s_637535111[chckIndx(i_637535116, 0, (s_637535111).length - 1)], 65), 10));
            F.line = 204;
            foundDigit_637535118 = true;
            break;
          default: 
            F.line = 205;
            break Label2;
            break;
          }
          F.line = 206;
          i_637535116 = addInt(i_637535116, 1);
        }
    } while (false);
    if (foundDigit_637535118) {
    F.line = 208;
    number_637535112[number_637535112_Idx] = output_637535117;
    F.line = 209;
    result_637535115 = subInt(i_637535116, start_637535113);
    }
    
  framePtr = F.prev;

  return result_637535115;

}

function toCharNode_1090519156(r_1090519157) {
  var result_1090519158 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "types.toCharNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    F.line = 131;
    result_1090519158 = nimCopy(result_1090519158, {kind: 0, cp: r_1090519157, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1090519158;

}

function parseUnicodeLit_1174405202(sc_1174405204, size_1174405205) {
            var Temporary4;
            var Temporary5;
    var Temporary6;

  var result_1174405206 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseUnicodeLit", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 118;
    var startPos_1174405207 = subInt(sc_1174405204.pos, 1);
    F.line = 119;
    var rawCP_1174405208 = mnewString(chckRange(size_1174405205, 0, 2147483647));
    Label1: do {
      F.line = 120;
      var i_1174405213 = 0;
      F.line = 119;
      var i_436212940 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212940 < size_1174405205)) break Label3;
            F.line = 120;
            i_1174405213 = i_436212940;
            F.line = 120;
            check_1174405162(!(finished_1207959677(sc_1174405204)), HEX25HEX25_1140850920(makeNimstrLit("Invalid unicode literal. Expected $# hex digits, but found $#"), [HEX24_318767107(size_1174405205), HEX24_318767107(i_1174405213)]), startPos_1174405207, sc_1174405204.raw);
            F.line = 120;
            if (contains_1174405250(HEX2EHEX2E_838861651(48, 57), ((curr_1207959687(sc_1174405204)) | 0))) Temporary5 = true; else {              Temporary5 = contains_1174405250(HEX2EHEX2E_838861651(97, 122), ((curr_1207959687(sc_1174405204)) | 0));            }            if (Temporary5) Temporary4 = true; else {              Temporary4 = contains_1174405250(HEX2EHEX2E_838861651(65, 90), ((curr_1207959687(sc_1174405204)) | 0));            }            check_1174405162(Temporary4, HEX25HEX25_1140850924(makeNimstrLit("Invalid unicode literal. Expected hex digit, but found $#"), HEX24_838861391(curr_1207959687(sc_1174405204))), startPos_1174405207, sc_1174405204.raw);
            F.line = 131;
            rawCP_1174405208[chckIndx(i_1174405213, 0, (rawCP_1174405208).length - 1)] = chckRange(((next_1207959694(sc_1174405204)) | 0), 0, 255);
            F.line = 122;
            i_436212940 = addInt(i_436212940, 1);
          }
      } while (false);
    } while (false);
    F.line = 132;
    var cp_1174405341 = [0];
    F.line = 133;
    var _ = parseHex_637535109(rawCP_1174405208, cp_1174405341, 0, 0, 0);
    F.line = 134;
    if (!!((cp_1174405341[0] == -1))) Temporary6 = false; else {      Temporary6 = (cp_1174405341[0] <= 2147483647);    }    check_1174405162(Temporary6, HEX25HEX25_1140850924(makeNimstrLit("Invalid unicode literal. $# value is too big"), rawCP_1174405208), startPos_1174405207, sc_1174405204.raw);
    F.line = 137;
    result_1174405206 = nimCopy(result_1174405206, toCharNode_1090519156(((cp_1174405341[0]) | 0)), NTI1090519053);
  framePtr = F.prev;

  return result_1174405206;

}

function peekImpl_1207959621(sc_1207959623, default_1207959624) {
    var Temporary1;

  var result_1207959625 = 0;

  var F = {procname: "peekImpl.peekImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 53;
    if (((sc_1207959623.s).length - 1 < sc_1207959623.pos)) {
    Temporary1 = default_1207959624;
    }
    else {
    Temporary1 = sc_1207959623.s[chckIndx(sc_1207959623.pos, 0, (sc_1207959623.s).length - 1)];
    }
    
    result_1207959625 = Temporary1;
  framePtr = F.prev;

  return result_1207959625;

}

function peek_1207959614(sc_1207959616) {
  var result_1207959617 = 0;

  var F = {procname: "scanner.peek", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 62;
    result_1207959617 = peekImpl_1207959621(sc_1207959616, -1);
  framePtr = F.prev;

  return result_1207959617;

}

function find_1207959668(sc_1207959670, r_1207959671) {
  var result_1207959672 = 0;

  var F = {procname: "scanner.find", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 81;
    result_1207959672 = 0;
    F.line = 82;
    var pos_1207959673 = sc_1207959670.pos;
    Label1: do {
      F.line = 83;
        Label2: while (true) {
        if (!true) break Label2;
          if (finished_1207959677(sc_1207959670)) {
          F.line = 85;
          result_1207959672 = -1;
          F.line = 86;
          break Label1;
          }
          
          if (HEX3DHEX3D_838861719(curr_1207959687(sc_1207959670), r_1207959671)) {
          F.line = 88;
          break Label1;
          }
          
          F.line = 89;
          var _ = next_1207959694(sc_1207959670);
          F.line = 90;
          result_1207959672 = addInt(result_1207959672, 1);
        }
    } while (false);
    F.line = 91;
    sc_1207959670.pos = pos_1207959673;
  framePtr = F.prev;

  return result_1207959672;

}

function parseUnicodeLitX_1174405361(sc_1174405363) {
  var result_1174405364 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseUnicodeLitX", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 140;
    var startPos_1174405365 = subInt(sc_1174405363.pos, 1);
    if (!(HEX3DHEX3D_838861719(peek_1207959614(sc_1174405363), toRune_1140850719(makeNimstrLit("{"))))) {
    F.line = 141;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(141, 10) `sc.peek == \"{\".toRune` "));
    }
    
    F.line = 142;
    var _ = next_1207959694(sc_1174405363);
    F.line = 143;
    var litEnd_1174405377 = find_1207959668(sc_1174405363, toRune_1140850719(makeNimstrLit("}")));
    F.line = 144;
    check_1174405162(!((litEnd_1174405377 == -1)), makeNimstrLit("Invalid unicode literal. Expected `}`"), startPos_1174405365, sc_1174405363.raw);
    F.line = 147;
    check_1174405162((litEnd_1174405377 <= 8), HEX25HEX25_1140850924(makeNimstrLit("Invalid unicode literal. Expected at most 8 chars, found $#"), HEX24_318767107(litEnd_1174405377)), startPos_1174405365, sc_1174405363.raw);
    F.line = 151;
    result_1174405364 = nimCopy(result_1174405364, parseUnicodeLit_1174405202(sc_1174405363, litEnd_1174405377), NTI1090519053);
    if (!(HEX3DHEX3D_838861719(peek_1207959614(sc_1174405363), toRune_1140850719(makeNimstrLit("}"))))) {
    F.line = 152;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(152, 10) `sc.peek == \"}\".toRune` "));
    }
    
    F.line = 153;
    var _ = next_1207959694(sc_1174405363);
  framePtr = F.prev;

  return result_1174405364;

}

function parseOct_637535071(s_637535073, number_637535074, number_637535074_Idx, start_637535075, maxLen_637535076) {
    var Temporary1;

  var result_637535077 = 0;

  var F = {procname: "parseOct.parseOct", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 139;
    var i_637535078 = start_637535075;
    F.line = 140;
    var output_637535079 = 0;
    F.line = 141;
    var foundDigit_637535080 = false;
    F.line = 142;
    if ((maxLen_637535076 == 0)) {
    Temporary1 = (s_637535073).length;
    }
    else {
    Temporary1 = addInt(i_637535078, maxLen_637535076);
    }
    
    var last_637535081 = nimMin((s_637535073).length, Temporary1);
    if ((((addInt(i_637535078, 1) < last_637535081) && (s_637535073[chckIndx(i_637535078, 0, (s_637535073).length - 1)] == 48)) && (ConstSet43[s_637535073[chckIndx(addInt(i_637535078, 1), 0, (s_637535073).length - 1)]] != undefined))) {
    F.line = 143;
    i_637535078 = addInt(i_637535078, 2);
    }
    
    Label2: do {
      F.line = 144;
        Label3: while (true) {
        if (!(i_637535078 < last_637535081)) break Label3;
          F.line = 145;
          switch (s_637535073[chckIndx(i_637535078, 0, (s_637535073).length - 1)]) {
          case 95:
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
            F.line = 148;
            output_637535079 = ((output_637535079 << 3) | subInt(s_637535073[chckIndx(i_637535078, 0, (s_637535073).length - 1)], 48));
            F.line = 149;
            foundDigit_637535080 = true;
            break;
          default: 
            F.line = 150;
            break Label2;
            break;
          }
          F.line = 151;
          i_637535078 = addInt(i_637535078, 1);
        }
    } while (false);
    if (foundDigit_637535080) {
    F.line = 153;
    number_637535074[number_637535074_Idx] = output_637535079;
    F.line = 154;
    result_637535077 = subInt(i_637535078, start_637535075);
    }
    
  framePtr = F.prev;

  return result_637535077;

}

function parseOctalLit_1174405389(sc_1174405391) {
  var result_1174405392 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseOctalLit", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 156;
    var startPos_1174405393 = sc_1174405391.pos;
    F.line = 157;
    var rawCP_1174405394 = mnewString(3);
    Label1: do {
      F.line = 158;
      var i_1174405399 = 0;
      F.line = 119;
      var i_436212960 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212960 < 3)) break Label3;
            F.line = 158;
            i_1174405399 = i_436212960;
            F.line = 158;
            check_1174405162(!(finished_1207959677(sc_1174405391)), HEX25HEX25_1140850924(makeNimstrLit("Invalid octal literal. Expected 3 octal digits, but found $#"), HEX24_318767107(i_1174405399)), startPos_1174405393, sc_1174405391.raw);
            F.line = 158;
            check_1174405162((ConstSet42[chckRange(((curr_1207959687(sc_1174405391)) | 0), 0, 65535)] != undefined), HEX25HEX25_1140850924(makeNimstrLit("Invalid octal literal. Expected octal digit, but found $#"), HEX24_838861391(curr_1207959687(sc_1174405391))), startPos_1174405393, sc_1174405391.raw);
            F.line = 167;
            rawCP_1174405394[chckIndx(i_1174405399, 0, (rawCP_1174405394).length - 1)] = chckRange(((next_1207959694(sc_1174405391)) | 0), 0, 255);
            F.line = 122;
            i_436212960 = addInt(i_436212960, 1);
          }
      } while (false);
    } while (false);
    F.line = 168;
    var cp_1174405435 = [0];
    F.line = 169;
    var _ = parseOct_637535071(rawCP_1174405394, cp_1174405435, 0, 0, 0);
    F.line = 170;
    result_1174405392 = nimCopy(result_1174405392, toCharNode_1090519156(((cp_1174405435[0]) | 0)), NTI1090519053);
  framePtr = F.prev;

  return result_1174405392;

}

function find_805306416(a_805306419, item_805306420) {
  var result_805306421 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1837;
    result_805306421 = 0;
    Label1: do {
      F.line = 1838;
      var i_805306425 = [];
      F.line = 8;
      var i_436212967 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_436212967 < (a_805306419).length)) break Label3;
            F.line = 1838;
            i_805306425 = a_805306419[chckIndx(i_436212967, 0, (a_805306419).length - 1)];
            if (eqStrings(i_805306425, item_805306420)) {
            F.line = 1839;
            break BeforeRet;
            }
            
            F.line = 1838;
            result_805306421 = addInt(result_805306421, 1);
            F.line = 11;
            i_436212967 = addInt(i_436212967, 1);
          }
      } while (false);
    } while (false);
    F.line = 1841;
    result_805306421 = -1;
  } while (false);
  framePtr = F.prev;

  return result_805306421;

}

function contains_805306411(a_805306413, item_805306414) {
  var result_805306415 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1855;
    result_805306415 = (0 <= find_805306416(a_805306413, item_805306414));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_805306415;

}

function categoryMap_1107296326(s_1107296327) {
  var result_1107296328 = 0;

  var F = {procname: "properties.categoryMap", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    F.line = 111;
    switch (toJSStr(s_1107296327)) {
    case "Lm":
      F.line = 113;
      result_1107296328 = 1;
      break;
    case "Lo":
      F.line = 115;
      result_1107296328 = 2;
      break;
    case "Lu":
      F.line = 117;
      result_1107296328 = 4;
      break;
    case "Ll":
      F.line = 119;
      result_1107296328 = 8;
      break;
    case "Lt":
      F.line = 121;
      result_1107296328 = 16;
      break;
    case "Mn":
      F.line = 123;
      result_1107296328 = 32;
      break;
    case "Mc":
      F.line = 125;
      result_1107296328 = 64;
      break;
    case "Me":
      F.line = 127;
      result_1107296328 = 128;
      break;
    case "Nd":
      F.line = 129;
      result_1107296328 = 256;
      break;
    case "Nl":
      F.line = 131;
      result_1107296328 = 512;
      break;
    case "No":
      F.line = 133;
      result_1107296328 = 1024;
      break;
    case "Zs":
      F.line = 135;
      result_1107296328 = 2048;
      break;
    case "Zl":
      F.line = 137;
      result_1107296328 = 4096;
      break;
    case "Zp":
      F.line = 139;
      result_1107296328 = 8192;
      break;
    case "Cc":
      F.line = 141;
      result_1107296328 = 16384;
      break;
    case "Cf":
      F.line = 143;
      result_1107296328 = 32768;
      break;
    case "Cs":
      F.line = 145;
      result_1107296328 = 65536;
      break;
    case "Co":
      F.line = 147;
      result_1107296328 = 131072;
      break;
    case "Cn":
      F.line = 149;
      result_1107296328 = 262144;
      break;
    case "Pc":
      F.line = 151;
      result_1107296328 = 524288;
      break;
    case "Pd":
      F.line = 153;
      result_1107296328 = 1048576;
      break;
    case "Ps":
      F.line = 155;
      result_1107296328 = 2097152;
      break;
    case "Pe":
      F.line = 157;
      result_1107296328 = 4194304;
      break;
    case "Pi":
      F.line = 159;
      result_1107296328 = 8388608;
      break;
    case "Pf":
      F.line = 161;
      result_1107296328 = 16777216;
      break;
    case "Po":
      F.line = 163;
      result_1107296328 = 33554432;
      break;
    case "Sm":
      F.line = 165;
      result_1107296328 = 67108864;
      break;
    case "Sc":
      F.line = 167;
      result_1107296328 = 134217728;
      break;
    case "Sk":
      F.line = 169;
      result_1107296328 = 268435456;
      break;
    case "So":
      F.line = 171;
      result_1107296328 = 536870912;
      break;
    default: 
      F.line = 173;
      raiseException({message: makeNimstrLit("Bad category"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
  framePtr = F.prev;

  return result_1107296328;

}

function categorySetMap_1107296322(s_1107296323) {
  var result_1107296324 = 0;

  var F = {procname: "properties.categorySetMap", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/unicodedb-0.11.2/unicodedb/properties.nim", line: 0};
  framePtr = F;
    F.line = 89;
    switch (toJSStr(s_1107296323)) {
    case "L":
      F.line = 91;
      result_1107296324 = 31;
      break;
    case "M":
      F.line = 93;
      result_1107296324 = 224;
      break;
    case "N":
      F.line = 95;
      result_1107296324 = 1792;
      break;
    case "Z":
      F.line = 97;
      result_1107296324 = 14336;
      break;
    case "C":
      F.line = 99;
      result_1107296324 = 507904;
      break;
    case "P":
      F.line = 101;
      result_1107296324 = 66584576;
      break;
    case "S":
      F.line = 103;
      result_1107296324 = 1006632960;
      break;
    default: 
      F.line = 105;
      raiseException({message: makeNimstrLit("Bad category"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
  framePtr = F.prev;

  return result_1107296324;

}

function check_1174405130(cond_1174405131, msg_1174405132) {
  var F = {procname: "parser.check", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    if (!(cond_1174405131)) {
    F.line = 15;
    raiseException({message: nimCopy(null, msg_1174405132, NTI33554439), parent: null, m_type: NTI1140850705, name: null, trace: [], up: null}, "RegexError");
    }
    
  framePtr = F.prev;

  
}

function parseCC_1174405451(s_1174405452) {
  var result_1174405453 = 0;

  var F = {procname: "parser.parseCC", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 173;
++excHandler;
    try {
    F.line = 174;
    result_1174405453 = categoryMap_1107296326(s_1174405452);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = F;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555125))) {
    F.line = 176;
++excHandler;
    try {
    F.line = 177;
    result_1174405453 = categorySetMap_1107296322(s_1174405452);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = F;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555125))) {
    F.line = 179;
    check_1174405130(false, makeNimstrLit("Invalid unicode name?"));
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = F;
    }
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = F;
    }
  framePtr = F.prev;

  return result_1174405453;

}

function parseUnicodeNameX_1174405454(sc_1174405456) {
  var result_1174405457 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseUnicodeNameX", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 182;
    var startPos_1174405458 = subInt(sc_1174405456.pos, 1);
    if (!(HEX3DHEX3D_838861719(peek_1207959614(sc_1174405456), toRune_1140850719(makeNimstrLit("{"))))) {
    F.line = 183;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(183, 10) `sc.peek == \"{\".toRune` "));
    }
    
    F.line = 184;
    var _ = next_1207959694(sc_1174405456);
    F.line = 185;
    var nameEnd_1174405470 = find_1207959668(sc_1174405456, toRune_1140850719(makeNimstrLit("}")));
    F.line = 186;
    check_1174405162(!((nameEnd_1174405470 == -1)), makeNimstrLit("Invalid unicode name. Expected `}`"), startPos_1174405458, sc_1174405456.raw);
    F.line = 189;
    var name_1174405471 = mnewString(chckRange(nameEnd_1174405470, 0, 2147483647));
    Label1: do {
      F.line = 190;
      var i_1174405476 = 0;
      F.line = 119;
      var i_436212964 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436212964 < nameEnd_1174405470)) break Label3;
            F.line = 190;
            i_1174405476 = i_436212964;
            F.line = 190;
            check_1174405162((ConstSet44[chckRange(((curr_1207959687(sc_1174405456)) | 0), 0, 65535)] != undefined), makeNimstrLit("Invalid unicode name. Expected chars in {\'a\'..\'z\', \'A\'..\'Z\'}"), startPos_1174405458, sc_1174405456.raw);
            F.line = 197;
            name_1174405471[chckIndx(i_1174405476, 0, (name_1174405471).length - 1)] = chckRange(((next_1207959694(sc_1174405456)) | 0), 0, 255);
            F.line = 122;
            i_436212964 = addInt(i_436212964, 1);
          }
      } while (false);
    } while (false);
    if (!(HEX3DHEX3D_838861719(peek_1207959614(sc_1174405456), toRune_1140850719(makeNimstrLit("}"))))) {
    F.line = 198;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(198, 10) `sc.peek == \"}\".toRune` "));
    }
    
    F.line = 199;
    var _ = next_1207959694(sc_1174405456);
    F.line = 200;
    check_1174405162(contains_805306411([makeNimstrLit("Cn"), makeNimstrLit("Lu"), makeNimstrLit("Ll"), makeNimstrLit("Lt"), makeNimstrLit("Mn"), makeNimstrLit("Mc"), makeNimstrLit("Me"), makeNimstrLit("Nd"), makeNimstrLit("Nl"), makeNimstrLit("No"), makeNimstrLit("Zs"), makeNimstrLit("Zl"), makeNimstrLit("Zp"), makeNimstrLit("Cc"), makeNimstrLit("Cf"), makeNimstrLit("Cs"), makeNimstrLit("Co"), makeNimstrLit("Cn"), makeNimstrLit("Lm"), makeNimstrLit("Lo"), makeNimstrLit("Pc"), makeNimstrLit("Pd"), makeNimstrLit("Ps"), makeNimstrLit("Pe"), makeNimstrLit("Pi"), makeNimstrLit("Pf"), makeNimstrLit("Po"), makeNimstrLit("Sm"), makeNimstrLit("Sc"), makeNimstrLit("Sk"), makeNimstrLit("So"), makeNimstrLit("C"), makeNimstrLit("L"), makeNimstrLit("M"), makeNimstrLit("N"), makeNimstrLit("Z"), makeNimstrLit("P"), makeNimstrLit("S")], name_1174405471), HEX25HEX25_1140850924(makeNimstrLit("Invalid unicode name. Found $#"), name_1174405471), startPos_1174405458, sc_1174405456.raw);
    F.line = 208;
    result_1174405457 = nimCopy(result_1174405457, {kind: 22, cp: toRune_1140850719(makeNimstrLit("#")), cc: parseCC_1174405451(name_1174405471), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1174405457;

}

function find_838866105(a_838866108, item_838866109) {
  var result_838866110 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1837;
    result_838866110 = 0;
    Label1: do {
      F.line = 1838;
      var i_838866123 = 0;
      F.line = 8;
      var i_1509950444 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_1509950444 < (a_838866108).length)) break Label3;
            F.line = 1838;
            i_838866123 = a_838866108[chckIndx(i_1509950444, 0, (a_838866108).length - 1)];
            if (HEX3DHEX3D_838861719(i_838866123, item_838866109)) {
            F.line = 1839;
            break BeforeRet;
            }
            
            F.line = 1838;
            result_838866110 = addInt(result_838866110, 1);
            F.line = 11;
            i_1509950444 = addInt(i_1509950444, 1);
          }
      } while (false);
    } while (false);
    F.line = 1841;
    result_838866110 = -1;
  } while (false);
  framePtr = F.prev;

  return result_838866110;

}

function contains_838866100(a_838866102, item_838866103) {
  var result_838866104 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1855;
    result_838866104 = (0 <= find_838866105(a_838866102, item_838866103));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_838866104;

}

function parseUnicodeName_1174405542(sc_1174405544) {
  var result_1174405545 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseUnicodeName", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 214;
    var startPos_1174405546 = subInt(sc_1174405544.pos, 1);
    F.line = 215;
    switch (peek_1207959614(sc_1174405544)) {
    case 123:
      F.line = 217;
      result_1174405545 = nimCopy(result_1174405545, parseUnicodeNameX_1174405454(sc_1174405544), NTI1090519053);
      break;
    default: 
      F.line = 219;
      check_1174405162(contains_838866100([toRune_1140850719(makeNimstrLit("C")), toRune_1140850719(makeNimstrLit("L")), toRune_1140850719(makeNimstrLit("M")), toRune_1140850719(makeNimstrLit("N")), toRune_1140850719(makeNimstrLit("Z")), toRune_1140850719(makeNimstrLit("P")), toRune_1140850719(makeNimstrLit("S"))], peek_1207959614(sc_1174405544)), HEX25HEX25_1140850924(makeNimstrLit("Invalid unicode name. Found $#"), nuctoUTF8(peek_1207959614(sc_1174405544))), startPos_1174405546, sc_1174405544.raw);
      F.line = 224;
      result_1174405545 = nimCopy(result_1174405545, {kind: 22, cp: toRune_1140850719(makeNimstrLit("\xC2\xBF")), cc: parseCC_1174405451(nuctoUTF8(next_1207959694(sc_1174405544))), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
      break;
    }
  framePtr = F.prev;

  return result_1174405545;

}

function toShorthandNode_1174405182(r_1174405183) {
    var Temporary1;

  var result_1174405184 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.toShorthandNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 55;
    F.line = 57;
    switch (r_1174405183) {
    case 119:
      Temporary1 = {kind: 19, cp: r_1174405183, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 100:
      Temporary1 = {kind: 20, cp: r_1174405183, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 115:
      Temporary1 = {kind: 21, cp: r_1174405183, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 87:
      Temporary1 = {kind: 23, cp: r_1174405183, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 68:
      Temporary1 = {kind: 24, cp: r_1174405183, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 83:
      Temporary1 = {kind: 25, cp: r_1174405183, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    default: 
      Temporary1 = toCharNode_1090519156(r_1174405183);
      break;
    }
    result_1174405184 = nimCopy(result_1174405184, Temporary1, NTI1090519053);
  framePtr = F.prev;

  return result_1174405184;

}

function toAssertionNode_1174405185(r_1174405186) {
    var Temporary1;

  var result_1174405187 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.toAssertionNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 74;
    F.line = 76;
    switch (r_1174405186) {
    case 65:
      Temporary1 = {kind: 15, cp: r_1174405186, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 122:
      Temporary1 = {kind: 16, cp: r_1174405186, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 98:
      Temporary1 = {kind: 17, cp: r_1174405186, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 66:
      Temporary1 = {kind: 18, cp: r_1174405186, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    default: 
      Temporary1 = toCharNode_1090519156(r_1174405186);
      break;
    }
    result_1174405187 = nimCopy(result_1174405187, Temporary1, NTI1090519053);
  framePtr = F.prev;

  return result_1174405187;

}

function toEscapedSeqNode_1174405188(r_1174405189) {
    var Temporary1;

  var result_1174405190 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.toEscapedSeqNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 89;
    F.line = 92;
    switch (r_1174405189) {
    case 97:
      Temporary1 = {kind: 0, cp: toRune_1140850719(makeNimstrLit("\x07")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 102:
      Temporary1 = {kind: 0, cp: toRune_1140850719(makeNimstrLit("\x0C")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 116:
      Temporary1 = {kind: 0, cp: toRune_1140850719(makeNimstrLit("\x09")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 110:
      Temporary1 = {kind: 0, cp: toRune_1140850719(makeNimstrLit("\x0A")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 114:
      Temporary1 = {kind: 0, cp: toRune_1140850719(makeNimstrLit("\x0D")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 118:
      Temporary1 = {kind: 0, cp: toRune_1140850719(makeNimstrLit("\x0B")), next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    default: 
      Temporary1 = toCharNode_1090519156(r_1174405189);
      break;
    }
    result_1174405190 = nimCopy(result_1174405190, Temporary1, NTI1090519053);
  framePtr = F.prev;

  return result_1174405190;

}

function toEscapedNode_1174405191(r_1174405192) {
  var result_1174405193 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.toEscapedNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 111;
    result_1174405193 = nimCopy(result_1174405193, toShorthandNode_1174405182(r_1174405192), NTI1090519053);
    if ((result_1174405193.kind == 0)) {
    F.line = 113;
    result_1174405193 = nimCopy(result_1174405193, toAssertionNode_1174405185(r_1174405192), NTI1090519053);
    }
    
    if ((result_1174405193.kind == 0)) {
    F.line = 115;
    result_1174405193 = nimCopy(result_1174405193, toEscapedSeqNode_1174405188(r_1174405192), NTI1090519053);
    }
    
  framePtr = F.prev;

  return result_1174405193;

}

function parseEscapedSeq_1174405579(sc_1174405581) {
  var result_1174405582 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseEscapedSeq", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 231;
    switch (curr_1207959687(sc_1174405581)) {
    case 117:
      F.line = 233;
      var _ = next_1207959694(sc_1174405581);
      F.line = 234;
      result_1174405582 = nimCopy(result_1174405582, parseUnicodeLit_1174405202(sc_1174405581, 4), NTI1090519053);
      break;
    case 85:
      F.line = 236;
      var _ = next_1207959694(sc_1174405581);
      F.line = 237;
      result_1174405582 = nimCopy(result_1174405582, parseUnicodeLit_1174405202(sc_1174405581, 8), NTI1090519053);
      break;
    case 120:
      F.line = 239;
      var _ = next_1207959694(sc_1174405581);
      F.line = 240;
      switch (peek_1207959614(sc_1174405581)) {
      case 123:
        F.line = 242;
        result_1174405582 = nimCopy(result_1174405582, parseUnicodeLitX_1174405361(sc_1174405581), NTI1090519053);
        break;
      default: 
        F.line = 244;
        result_1174405582 = nimCopy(result_1174405582, parseUnicodeLit_1174405202(sc_1174405581, 2), NTI1090519053);
        break;
      }
      break;
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      F.line = 246;
      result_1174405582 = nimCopy(result_1174405582, parseOctalLit_1174405389(sc_1174405581), NTI1090519053);
      break;
    case 112:
      F.line = 248;
      var _ = next_1207959694(sc_1174405581);
      F.line = 249;
      result_1174405582 = nimCopy(result_1174405582, parseUnicodeName_1174405542(sc_1174405581), NTI1090519053);
      break;
    case 80:
      F.line = 251;
      var _ = next_1207959694(sc_1174405581);
      F.line = 252;
      result_1174405582 = nimCopy(result_1174405582, parseUnicodeName_1174405542(sc_1174405581), NTI1090519053);
      F.line = 253;
      result_1174405582.kind = 26;
      break;
    default: 
      F.line = 255;
      result_1174405582 = nimCopy(result_1174405582, toEscapedNode_1174405191(next_1207959694(sc_1174405581)), NTI1090519053);
      break;
    }
  framePtr = F.prev;

  return result_1174405582;

}

function initNotSetNode_1090519268() {
  var result_1090519269 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "types.initNotSetNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    if (false) {
    F.line = 149;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim(149, 10) `reNotSet in {reInSet, reNotSet}` "));
    }
    
    F.line = 150;
    result_1090519269 = nimCopy(result_1090519269, {kind: 40, cp: toRune_1140850719(makeNimstrLit("#")), cps: initHashSet_1090519196(2), ranges: [], shorthands: [], next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1090519269;

}

function initSetNode_1090519184() {
  var result_1090519185 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "types.initSetNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    if (false) {
    F.line = 149;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim(149, 10) `reInSet in {reInSet, reNotSet}` "));
    }
    
    F.line = 150;
    result_1090519185 = nimCopy(result_1090519185, {kind: 39, cp: toRune_1140850719(makeNimstrLit("#")), cps: initHashSet_1090519196(2), ranges: [], shorthands: [], next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1090519185;

}

function isEmpty_1090519447(n_1090519448) {
  var result_1090519449 = false;

  var F = {procname: "types.isEmpty", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    if (!((ConstSet45[n_1090519448.kind] != undefined))) {
    F.line = 194;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim(194, 10) `n.kind in {reInSet, reNotSet}` "));
    }
    
    F.line = 197;
    result_1090519449 = (((len_1090519474(n_1090519448.cps) == 0) && ((n_1090519448.ranges).length == 0)) && ((n_1090519448.shorthands).length == 0));
  framePtr = F.prev;

  return result_1090519449;

}

function parseSetEscapedSeq_1174405625(sc_1174405627) {
  var result_1174405628 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseSetEscapedSeq", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 260;
    var cp_1174405629 = peek_1207959614(sc_1174405627);
    F.line = 261;
    result_1174405628 = nimCopy(result_1174405628, parseEscapedSeq_1174405579(sc_1174405627), NTI1090519053);
    if ((ConstSet46[result_1174405628.kind] != undefined)) {
    F.line = 263;
    result_1174405628 = nimCopy(result_1174405628, toCharNode_1090519156(cp_1174405629), NTI1090519053);
    }
    
  framePtr = F.prev;

  return result_1174405628;

}

function pop_1174406555(s_1174406557, s_1174406557_Idx) {
  var result_1174406558 = 0;

  var F = {procname: "pop.pop", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1866;
    var L_1174406562 = subInt((s_1174406557[s_1174406557_Idx]).length, 1);
    F.line = 1871;
    result_1174406558 = s_1174406557[s_1174406557_Idx][chckIndx(L_1174406562, 0, (s_1174406557[s_1174406557_Idx]).length - 1)];
    F.line = 1872;
    if (s_1174406557[s_1174406557_Idx].length < chckRange(L_1174406562, 0, 2147483647)) { for (var i = s_1174406557[s_1174406557_Idx].length ; i < chckRange(L_1174406562, 0, 2147483647) ; ++i) s_1174406557[s_1174406557_Idx].push(0); }
               else { s_1174406557[s_1174406557_Idx].length = chckRange(L_1174406562, 0, 2147483647); };
  framePtr = F.prev;

  return result_1174406558;

}

function add_1174405696(x_1174405698, x_1174405698_Idx, y_1174405699) {
    var Temporary1;

  var F = {procname: "add.add", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1308;
    var xl_1174405703 = (x_1174405698[x_1174405698_Idx]).length;
    F.line = 1309;
    if (x_1174405698[x_1174405698_Idx].length < (Temporary1 = chckRange(addInt(xl_1174405703, (y_1174405699).length), 0, 2147483647), Temporary1)) { for (var i = x_1174405698[x_1174405698_Idx].length ; i < Temporary1 ; ++i) x_1174405698[x_1174405698_Idx].push(({a: 0, b: 0})); }
               else { x_1174405698[x_1174405698_Idx].length = Temporary1; };
    Label2: do {
      F.line = 1310;
      var i_1174405719 = 0;
      F.line = 75;
      var colontmp__436212972 = 0;
      F.line = 1310;
      colontmp__436212972 = (y_1174405699).length - 1;
      F.line = 90;
      var res_436212973 = 0;
      Label3: do {
        F.line = 91;
          Label4: while (true) {
          if (!(res_436212973 <= colontmp__436212972)) break Label4;
            F.line = 1310;
            i_1174405719 = res_436212973;
            F.line = 1310;
            x_1174405698[x_1174405698_Idx][chckIndx(addInt(xl_1174405703, i_1174405719), 0, (x_1174405698[x_1174405698_Idx]).length - 1)] = nimCopy(x_1174405698[x_1174405698_Idx][chckIndx(addInt(xl_1174405703, i_1174405719), 0, (x_1174405698[x_1174405698_Idx]).length - 1)], y_1174405699[chckIndx(i_1174405719, 0, (y_1174405699).length - 1)], NTI1090519085);
            F.line = 93;
            res_436212973 = addInt(res_436212973, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function toHashSet_1174405752(keys_1174405754) {
  var result_1174405755 = [({data: [], counter: 0})];

  var F = {procname: "toHashSet.toHashSet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 240;
    result_1174405755[0] = nimCopy(result_1174405755[0], initHashSet_1090519196((keys_1174405754).length), NTI1090519069);
    Label1: do {
      F.line = 241;
      var key_1174405765 = 0;
      F.line = 8;
      var i_1509950423 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_1509950423 < (keys_1174405754).length)) break Label3;
            F.line = 241;
            key_1174405765 = keys_1174405754[chckIndx(i_1509950423, 0, (keys_1174405754).length - 1)];
            F.line = 241;
            incl_1174405785(result_1174405755[0], key_1174405765);
            F.line = 11;
            i_1509950423 = addInt(i_1509950423, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1174405755[0];

}

function parseAsciiSet_1174405634(sc_1174405636) {
    var Temporary1;

  var result_1174405637 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseAsciiSet", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 269;
    var startPos_1174405638 = sc_1174405636.pos;
    if (!(HEX3DHEX3D_838861719(peek_1207959614(sc_1174405636), toRune_1140850719(makeNimstrLit(":"))))) {
    F.line = 270;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(270, 10) `sc.peek == \":\".toRune` "));
    }
    
    F.line = 271;
    var _ = next_1207959694(sc_1174405636);
    F.line = 272;
    F.line = 272;
    switch (peek_1207959614(sc_1174405636)) {
    case 94:
      F.line = 274;
      var _ = next_1207959694(sc_1174405636);
      Temporary1 = initNotSetNode_1090519268();
      break;
    default: 
      Temporary1 = initSetNode_1090519184();
      break;
    }
    result_1174405637 = nimCopy(result_1174405637, Temporary1, NTI1090519053);
    F.line = 278;
    var name_1174405656 = mnewString(0);
    Label2: do {
      F.line = 279;
      var r_1174405667 = 0;
      Label3: do {
        F.line = 28;
          Label4: while (true) {
          if (!(sc_1174405636.pos <= (sc_1174405636.s).length - 1)) break Label4;
            F.line = 29;
            sc_1174405636.pos = addInt(sc_1174405636.pos, 1);
            F.line = 279;
            r_1174405667 = sc_1174405636.s[chckIndx(subInt(sc_1174405636.pos, 1), 0, (sc_1174405636.s).length - 1)];
            if (HEX3DHEX3D_838861719(r_1174405667, toRune_1140850719(makeNimstrLit(":")))) {
            F.line = 281;
            break Label2;
            }
            
            F.line = 279;
            name_1174405656.push.apply(name_1174405656, nuctoUTF8(r_1174405667));;
          }
      } while (false);
    } while (false);
    F.line = 283;
    check_1174405162(HEX3DHEX3D_838861719(peek_1207959614(sc_1174405636), toRune_1140850719(makeNimstrLit("]"))), makeNimstrLit("Invalid ascii set. Expected [:name:]"), startPos_1174405638, sc_1174405636.raw);
    F.line = 286;
    var _ = next_1207959694(sc_1174405636);
    F.line = 287;
    switch (toJSStr(name_1174405656)) {
    case "alpha":
      F.line = 289;
      add_1174405696(result_1174405637, "ranges", [HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("a")), toRune_1140850719(makeNimstrLit("z"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("A")), toRune_1140850719(makeNimstrLit("Z")))]);
      break;
    case "alnum":
      F.line = 293;
      add_1174405696(result_1174405637, "ranges", [HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("0")), toRune_1140850719(makeNimstrLit("9"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("a")), toRune_1140850719(makeNimstrLit("z"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("A")), toRune_1140850719(makeNimstrLit("Z")))]);
      break;
    case "ascii":
      F.line = 298;
      result_1174405637.ranges.push(HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("\x00")), toRune_1140850719(makeNimstrLit("\x7F"))));;
      break;
    case "blank":
      F.line = 301;
      incl_1174406170(result_1174405637.cps, toHashSet_1174405752([toRune_1140850719(makeNimstrLit("\x09")), toRune_1140850719(makeNimstrLit(" "))]));
      break;
    case "cntrl":
      F.line = 304;
      result_1174405637.ranges.push(HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("\x00")), toRune_1140850719(makeNimstrLit("\x1F"))));;
      F.line = 306;
      incl_1174405785(result_1174405637.cps, toRune_1140850719(makeNimstrLit("\x7F")));
      break;
    case "digit":
      F.line = 308;
      result_1174405637.ranges.push(HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("0")), toRune_1140850719(makeNimstrLit("9"))));;
      break;
    case "graph":
      F.line = 311;
      result_1174405637.ranges.push(HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("!")), toRune_1140850719(makeNimstrLit("~"))));;
      break;
    case "lower":
      F.line = 314;
      result_1174405637.ranges.push(HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("a")), toRune_1140850719(makeNimstrLit("z"))));;
      break;
    case "print":
      F.line = 317;
      result_1174405637.ranges.push(HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit(" ")), toRune_1140850719(makeNimstrLit("~"))));;
      break;
    case "punct":
      F.line = 320;
      add_1174405696(result_1174405637, "ranges", [HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("!")), toRune_1140850719(makeNimstrLit("/"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit(":")), toRune_1140850719(makeNimstrLit("@"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("[")), toRune_1140850719(makeNimstrLit("`"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("{")), toRune_1140850719(makeNimstrLit("~")))]);
      break;
    case "space":
      F.line = 326;
      incl_1174406170(result_1174405637.cps, toHashSet_1174405752([toRune_1140850719(makeNimstrLit("\x09")), toRune_1140850719(makeNimstrLit("\x0A")), toRune_1140850719(makeNimstrLit("\x0B")), toRune_1140850719(makeNimstrLit("\x0C")), toRune_1140850719(makeNimstrLit("\x0D")), toRune_1140850719(makeNimstrLit(" "))]));
      break;
    case "upper":
      F.line = 330;
      result_1174405637.ranges.push(HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("A")), toRune_1140850719(makeNimstrLit("Z"))));;
      break;
    case "word":
      F.line = 333;
      add_1174405696(result_1174405637, "ranges", [HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("0")), toRune_1140850719(makeNimstrLit("9"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("a")), toRune_1140850719(makeNimstrLit("z"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("A")), toRune_1140850719(makeNimstrLit("Z")))]);
      F.line = 337;
      incl_1174405785(result_1174405637.cps, toRune_1140850719(makeNimstrLit("_")));
      break;
    case "xdigit":
      F.line = 339;
      add_1174405696(result_1174405637, "ranges", [HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("0")), toRune_1140850719(makeNimstrLit("9"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("a")), toRune_1140850719(makeNimstrLit("f"))), HEX2EHEX2E_1174405674(toRune_1140850719(makeNimstrLit("A")), toRune_1140850719(makeNimstrLit("F")))]);
      break;
    default: 
      F.line = 344;
      check_1174405162(false, HEX25HEX25_1140850924(makeNimstrLit("Invalid ascii set. `$#` is not a valid name"), name_1174405656), startPos_1174405638, sc_1174405636.raw);
      break;
    }
  framePtr = F.prev;

  return result_1174405637;

}

function parseSet_1174406450(sc_1174406452) {
    var Temporary1;
                var Temporary6;

  var result_1174406453 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseSet", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 353;
    var startPos_1174406454 = sc_1174406452.pos;
    F.line = 354;
    F.line = 354;
    switch (peek_1207959614(sc_1174406452)) {
    case 94:
      F.line = 356;
      var _ = next_1207959694(sc_1174406452);
      Temporary1 = initNotSetNode_1090519268();
      break;
    default: 
      Temporary1 = initSetNode_1090519184();
      break;
    }
    result_1174406453 = nimCopy(result_1174406453, Temporary1, NTI1090519053);
    F.line = 361;
    var hasEnd_1174406461 = false;
    F.line = 362;
    var cps_1174406469 = [newSeq_838864648(0)];
    Label2: do {
      F.line = 363;
      var cp_1174406473 = 0;
      Label3: do {
        F.line = 28;
          Label4: while (true) {
          if (!(sc_1174406452.pos <= (sc_1174406452.s).length - 1)) break Label4;
            F.line = 29;
            sc_1174406452.pos = addInt(sc_1174406452.pos, 1);
            F.line = 363;
            cp_1174406473 = sc_1174406452.s[chckIndx(subInt(sc_1174406452.pos, 1), 0, (sc_1174406452.s).length - 1)];
            Label5: do {
              F.line = 363;
              switch (cp_1174406473) {
              case 93:
                F.line = 366;
                if (!(isEmpty_1090519447(result_1174406453))) Temporary6 = true; else {                  Temporary6 = (0 < (cps_1174406469[0]).length);                }                hasEnd_1174406461 = Temporary6;
                if (hasEnd_1174406461) {
                F.line = 368;
                break Label2;
                }
                
                F.line = 369;
                cps_1174406469[0].push(cp_1174406473);;
                break;
              case 92:
                F.line = 371;
                var nn_1174406481 = parseSetEscapedSeq_1174405625(sc_1174406452);
                F.line = 372;
                switch (nn_1174406481.kind) {
                case 0:
                  F.line = 374;
                  cps_1174406469[0].push(nn_1174406481.cp);;
                  break;
                default: 
                  if (!((ConstSet47[nn_1174406481.kind] != undefined))) {
                  F.line = 376;
                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(376, 16) `nn.kind in shorthandKind` "));
                  }
                  
                  F.line = 377;
                  var Temporary7 = nimCopy(null, nn_1174406481, NTI1090519053);
                  result_1174406453.shorthands.push(Temporary7);;
                  if (HEX3DHEX3D_838861719(peek_1207959614(sc_1174406452), toRune_1140850719(makeNimstrLit("-")))) {
                  F.line = 380;
                  cps_1174406469[0].push(next_1207959694(sc_1174406452));;
                  }
                  
                  break;
                }
                break;
              case 45:
                if (finished_1207959677(sc_1174406452)) {
                F.line = 384;
                break Label5;
                }
                
                if (((cps_1174406469[0]).length == 0)) {
                F.line = 386;
                cps_1174406469[0].push(cp_1174406473);;
                F.line = 387;
                break Label5;
                }
                
                F.line = 388;
                var last_1174406522 = 0;
                F.line = 389;
                switch (peek_1207959614(sc_1174406452)) {
                case 93:
                  F.line = 391;
                  cps_1174406469[0].push(cp_1174406473);;
                  F.line = 392;
                  break Label5;
                  break;
                case 92:
                  F.line = 394;
                  var _ = next_1207959694(sc_1174406452);
                  F.line = 395;
                  var nn_1174406533 = parseSetEscapedSeq_1174405625(sc_1174406452);
                  F.line = 396;
                  check_1174405162((nn_1174406533.kind == 0), makeNimstrLit("Invalid set range. Range can\'t contain a character-class or assertion"), subInt(sc_1174406452.pos, 1), sc_1174406452.raw);
                  F.line = 402;
                  last_1174406522 = nn_1174406533.cp;
                  break;
                default: 
                  if (!(!(finished_1207959677(sc_1174406452)))) {
                  F.line = 404;
                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(404, 15) `not sc.finished` "));
                  }
                  
                  F.line = 405;
                  last_1174406522 = next_1207959694(sc_1174406452);
                  break;
                }
                F.line = 406;
                var first_1174406567 = pop_1174406555(cps_1174406469, 0);
                F.line = 407;
                check_1174405162(HEX3CHEX3D_1140850722(first_1174406567, last_1174406522), makeNimstrLit("Invalid set range. Start must be lesser than end"), sc_1174406452.pos, sc_1174406452.raw);
                F.line = 413;
                result_1174406453.ranges.push(HEX2EHEX2E_1174405674(first_1174406567, last_1174406522));;
                if (HEX3DHEX3D_838861719(peek_1207959614(sc_1174406452), toRune_1140850719(makeNimstrLit("-")))) {
                F.line = 415;
                cps_1174406469[0].push(next_1207959694(sc_1174406452));;
                }
                
                break;
              case 91:
                if (HEX3DHEX3D_838861719(peek_1207959614(sc_1174406452), toRune_1140850719(makeNimstrLit(":")))) {
                F.line = 419;
                result_1174406453.shorthands.push(parseAsciiSet_1174405634(sc_1174406452));;
                }
                else {
                  F.line = 421;
                cps_1174406469[0].push(cp_1174406473);;
                }
                
                break;
              default: 
                F.line = 423;
                cps_1174406469[0].push(cp_1174406473);;
                break;
              }
            } while (false);
          }
      } while (false);
    } while (false);
    F.line = 425;
    incl_1174406170(result_1174406453.cps, toHashSet_1174405752(cps_1174406469[0]));
    F.line = 426;
    check_1174405162(hasEnd_1174406461, makeNimstrLit("Invalid set. Missing `]`"), startPos_1174406454, sc_1174406452.raw);
  framePtr = F.prev;

  return result_1174406453;

}

function integerOutOfRangeError_654311672() {
  var F = {procname: "parseutils.integerOutOfRangeError", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 426;
    raiseException({message: makeNimstrLit("Parsed integer outside of valid range"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
  framePtr = F.prev;

  
}

function rawParseInt_654311674(s_654311675, b_654311676, b_654311676_Idx, start_654311677) {
      var Temporary1;
          var Temporary4;
      var Temporary7;

  var result_654311678 = 0;

  var F = {procname: "parseutils.rawParseInt", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 434;
    var sign_654311679 = -1;
    F.line = 435;
    var i_654311680 = start_654311677;
    if ((i_654311680 < (s_654311675).length)) {
    if ((s_654311675[chckIndx(i_654311680, 0, (s_654311675).length - 1)] == 43)) {
    F.line = 437;
    i_654311680 += 1;
    }
    else {
    if ((s_654311675[chckIndx(i_654311680, 0, (s_654311675).length - 1)] == 45)) {
    F.line = 439;
    i_654311680 += 1;
    F.line = 440;
    sign_654311679 = 1;
    }
    }
    }
    
      if (!(i_654311680 < (s_654311675).length)) Temporary1 = false; else {        Temporary1 = (ConstSet48[s_654311675[chckIndx(i_654311680, 0, (s_654311675).length - 1)]] != undefined);      }    if (Temporary1) {
    F.line = 442;
    b_654311676[b_654311676_Idx] = 0;
    Label2: do {
      F.line = 443;
        Label3: while (true) {
          if (!(i_654311680 < (s_654311675).length)) Temporary4 = false; else {            Temporary4 = (ConstSet49[s_654311675[chckIndx(i_654311680, 0, (s_654311675).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          F.line = 444;
          var c_654311703 = (s_654311675[chckIndx(i_654311680, 0, (s_654311675).length - 1)] - 48);
          if ((Math.trunc((-9223372036854775808 + c_654311703) / 10) <= b_654311676[b_654311676_Idx])) {
          F.line = 446;
          b_654311676[b_654311676_Idx] = ((b_654311676[b_654311676_Idx] * 10) - c_654311703);
          }
          else {
            F.line = 448;
          integerOutOfRangeError_654311672();
          }
          
          F.line = 449;
          i_654311680 += 1;
          Label5: do {
            F.line = 450;
              Label6: while (true) {
              if (!((i_654311680 < (s_654311675).length) && (s_654311675[chckIndx(i_654311680, 0, (s_654311675).length - 1)] == 95))) break Label6;
                F.line = 450;
                i_654311680 += 1;
              }
          } while (false);
        }
    } while (false);
      if (!(sign_654311679 == -1)) Temporary7 = false; else {        Temporary7 = (b_654311676[b_654311676_Idx] == -9223372036854775808);      }    if (Temporary7) {
    F.line = 452;
    integerOutOfRangeError_654311672();
    }
    else {
      F.line = 454;
      b_654311676[b_654311676_Idx] = (b_654311676[b_654311676_Idx] * sign_654311679);
      F.line = 455;
      result_654311678 = (i_654311680 - start_654311677);
    }
    
    }
    
  framePtr = F.prev;

  return result_654311678;

}

function npuParseBiggestInt(s_654311721, number_654311722, number_654311722_Idx, start_654311723) {
  var result_654311724 = 0;

  var F = {procname: "parseutils.parseBiggestInt", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 469;
    var res_654311725 = [0];
    F.line = 472;
    result_654311724 = rawParseInt_654311674(s_654311721, res_654311725, 0, start_654311723);
    if (!((result_654311724 == 0))) {
    F.line = 474;
    number_654311722[number_654311722_Idx] = res_654311725[0];
    }
    
  framePtr = F.prev;

  return result_654311724;

}

function npuParseInt(s_654311727, number_654311728, number_654311728_Idx, start_654311729) {
      var Temporary1;

  var result_654311730 = 0;

  var F = {procname: "parseutils.parseInt", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 487;
    var res_654311731 = [0];
    F.line = 488;
    result_654311730 = npuParseBiggestInt(s_654311727, res_654311731, 0, start_654311729);
      if ((res_654311731[0] < -2147483648)) Temporary1 = true; else {        Temporary1 = (2147483647 < res_654311731[0]);      }    if (Temporary1) {
    F.line = 491;
    integerOutOfRangeError_654311672();
    }
    
    if (!((result_654311730 == 0))) {
    F.line = 493;
    number_654311728[number_654311728_Idx] = chckRange(res_654311731[0], -2147483648, 2147483647);
    }
    
  framePtr = F.prev;

  return result_654311730;

}

function peek_1207959660(sc_1207959662, n_1207959663) {
    var Temporary1;

  var result_1207959664 = 0;

  var F = {procname: "scanner.peek", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/scanner.nim", line: 0};
  framePtr = F;
    F.line = 72;
    if ((subInt((sc_1207959662.s).length, 1) < addInt(sc_1207959662.pos, n_1207959663))) {
    Temporary1 = -1;
    }
    else {
    Temporary1 = sc_1207959662.s[chckIndx(addInt(sc_1207959662.pos, n_1207959663), 0, (sc_1207959662.s).length - 1)];
    }
    
    result_1207959664 = Temporary1;
  framePtr = F.prev;

  return result_1207959664;

}

function noRepeatCheck_1174406632(sc_1174406634) {
  var F = {procname: "parser.noRepeatCheck", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 432;
    var startPos_1174406635 = sc_1174406634.pos;
    F.line = 433;
    var hasDoubleQ_1174406636 = (HEX3DHEX3D_838861719(peek_1207959614(sc_1174406634), 63) && HEX3DHEX3D_838861719(peek_1207959660(sc_1174406634, 1), 63));
    F.line = 434;
    check_1174405162((!(contains_838866100([42, 43], peek_1207959614(sc_1174406634))) && !(hasDoubleQ_1174406636)), makeNimstrLit("Invalid repetition. There\'s nothing to repeat"), startPos_1174406635, sc_1174406634.raw);
  framePtr = F.prev;

  
}

function parseRepRange_1174406654(sc_1174406656) {
      var Temporary1;

  var result_1174406657 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseRepRange", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
      if (!!((((peek_1207959614(sc_1174406656)) | 0) == 44))) Temporary1 = false; else {        Temporary1 = !(contains_1174405250(HEX2EHEX2E_838861651(48, 57), ((peek_1207959614(sc_1174406656)) | 0)));      }    if (Temporary1) {
    F.line = 446;
    result_1174406657 = nimCopy(result_1174406657, {kind: 0, cp: 123, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
    break BeforeRet;
    }
    
    F.line = 447;
    var startPos_1174406691 = sc_1174406656.pos;
    F.line = 449;
    var first_1174406692 = [];
    F.line = 449;
    var last_1174406693 = [];
    F.line = 450;
    var hasFirst_1174406694 = false;
    F.line = 451;
    var curr_1174406695 = [];
    Label2: do {
      F.line = 452;
      var cp_1174406699 = 0;
      Label3: do {
        F.line = 28;
          Label4: while (true) {
          if (!(sc_1174406656.pos <= (sc_1174406656.s).length - 1)) break Label4;
            F.line = 29;
            sc_1174406656.pos = addInt(sc_1174406656.pos, 1);
            F.line = 452;
            cp_1174406699 = sc_1174406656.s[chckIndx(subInt(sc_1174406656.pos, 1), 0, (sc_1174406656.s).length - 1)];
            Label5: do {
              if (HEX3DHEX3D_838861719(cp_1174406699, 125)) {
              F.line = 454;
              last_1174406693 = nimCopy(null, curr_1174406695, NTI33554439);
              F.line = 455;
              break Label2;
              }
              
              if (HEX3DHEX3D_838861719(cp_1174406699, 44)) {
              F.line = 457;
              first_1174406692 = nimCopy(null, curr_1174406695, NTI33554439);
              F.line = 458;
              curr_1174406695 = nimCopy(null, [], NTI33554439);
              F.line = 459;
              check_1174405162(!(hasFirst_1174406694), makeNimstrLit("Invalid repetition range. Expected {n,m}"), startPos_1174406691, sc_1174406656.raw);
              F.line = 461;
              hasFirst_1174406694 = true;
              F.line = 462;
              break Label5;
              }
              
              F.line = 463;
              check_1174405162(contains_1174405250(HEX2EHEX2E_838861651(48, 57), ((cp_1174406699) | 0)), makeNimstrLit("Invalid repetition range. Range can only contain digits"), startPos_1174406691, sc_1174406656.raw);
              F.line = 466;
              addChar(curr_1174406695, chckRange(((cp_1174406699) | 0), 0, 255));;
            } while (false);
          }
      } while (false);
    } while (false);
    F.line = 467;
    check_1174405162(HEX3DHEX3D_838861719(prev_1174406733(sc_1174406656), 125), makeNimstrLit("Invalid repetition range. Missing closing symbol `}`"), startPos_1174406691, sc_1174406656.raw);
    if (!(hasFirst_1174406694)) {
    F.line = 471;
    first_1174406692 = nimCopy(null, curr_1174406695, NTI33554439);
    }
    
    F.line = 472;
    check_1174405162((0 < (first_1174406692).length), makeNimstrLit("Invalid repetition range. Expected {n}, {n,m}, or {n,}"), startPos_1174406691, sc_1174406656.raw);
    if (((last_1174406693).length == 0)) {
    F.line = 476;
    last_1174406693 = nimCopy(null, makeNimstrLit("-1"), NTI33554439);
    }
    
    F.line = 478;
    var firstNum_1174406737 = [0];
    F.line = 479;
    var lastNum_1174406738 = [0];
    F.line = 484;
++excHandler;
    try {
    F.line = 485;
    var _ = npuParseInt(first_1174406692, firstNum_1174406737, 0, 0);
    F.line = 486;
    var _ = npuParseInt(last_1174406693, lastNum_1174406738, 0, 0);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = F;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555125))) {
    F.line = 488;
    check_1174405162(false, HEX25HEX25_1140850924(makeNimstrLit("Invalid repetition range. Max value is $#"), HEX24_318767107(32767)), startPos_1174406691, sc_1174406656.raw);
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = F;
    }
    F.line = 491;
    check_1174405162(((firstNum_1174406737[0] <= 32767) && (lastNum_1174406738[0] <= 32767)), HEX25HEX25_1140850924(makeNimstrLit("Invalid repetition range. Max value is $#"), HEX24_318767107(32767)), startPos_1174406691, sc_1174406656.raw);
    F.line = 498;
    check_1174405162(!((100 < subInt(lastNum_1174406738[0], firstNum_1174406737[0]))), HEX25HEX25_1140850920(makeNimstrLit("Invalid repetition range. Expected $# repetitions or less, but found: $#"), [HEX24_318767107(100), HEX24_318767107(subInt(lastNum_1174406738[0], firstNum_1174406737[0]))]), startPos_1174406691, sc_1174406656.raw);
    F.line = 503;
    result_1174406657 = nimCopy(result_1174406657, {kind: 10, min: chckRange(firstNum_1174406737[0], -32768, 32767), max: chckRange(lastNum_1174406738[0], -32768, 32767), cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
    F.line = 507;
    noRepeatCheck_1174406632(sc_1174406656);
  } while (false);
  framePtr = F.prev;

  return result_1174406657;

}

function initGroupStart_1090519290(name_1090519291, flags_1090519296, isCapturing_1090519297) {
  var result_1090519298 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "types.initGroupStart", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    F.line = 172;
    result_1090519298 = nimCopy(result_1090519298, {kind: 3, cp: toRune_1140850719(makeNimstrLit("(")), name: nimCopy(null, name_1090519291, NTI33554439), flags: nimCopy(null, flags_1090519296, NTI1090519218), isCapturing: isCapturing_1090519297, next: [], isGreedy: false, uid: 0, idx: 0, min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1090519298;

}

function toNegFlag_1174406774(r_1174406775) {
    var Temporary1;

  var result_1174406776 = 0;

  var F = {procname: "parser.toNegFlag", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 530;
    F.line = 530;
    switch (r_1174406775) {
    case 105:
      Temporary1 = 1;
      break;
    case 109:
      Temporary1 = 3;
      break;
    case 115:
      Temporary1 = 5;
      break;
    case 85:
      Temporary1 = 7;
      break;
    case 117:
      Temporary1 = 9;
      break;
    case 120:
      Temporary1 = 11;
      break;
    default: 
      F.line = 545;
      raiseException({message: HEX25HEX25_1140850924(makeNimstrLit("Invalid group flag, found -$# but expected one of: -i, -m, -s, -U or -u"), HEX24_838861391(r_1174406775)), parent: null, m_type: NTI1140850705, name: null, trace: [], up: null}, "RegexError");
      break;
    }
    result_1174406776 = Temporary1;
  framePtr = F.prev;

  return result_1174406776;

}

function toFlag_1174406761(r_1174406762) {
    var Temporary1;

  var result_1174406763 = 0;

  var F = {procname: "parser.toFlag", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 510;
    F.line = 510;
    switch (r_1174406762) {
    case 105:
      Temporary1 = 0;
      break;
    case 109:
      Temporary1 = 2;
      break;
    case 115:
      Temporary1 = 4;
      break;
    case 85:
      Temporary1 = 6;
      break;
    case 117:
      Temporary1 = 8;
      break;
    case 120:
      Temporary1 = 10;
      break;
    default: 
      F.line = 525;
      raiseException({message: HEX25HEX25_1140850924(makeNimstrLit("Invalid group flag, found $# but expected one of: i, m, s, U or u"), HEX24_838861391(r_1174406762)), parent: null, m_type: NTI1140850705, name: null, trace: [], up: null}, "RegexError");
      break;
    }
    result_1174406763 = Temporary1;
  framePtr = F.prev;

  return result_1174406763;

}

function parseGroupTag_1174406778(sc_1174406780) {
      var Temporary8;

  var result_1174406781 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.parseGroupTag", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 554;
    var startPos_1174406782 = sc_1174406780.pos;
    if (!(HEX3DHEX3D_838861719(peek_1207959614(sc_1174406780), toRune_1140850719(makeNimstrLit("?"))))) {
    F.line = 556;
    result_1174406781 = nimCopy(result_1174406781, initGroupStart_1090519290([], [], true), NTI1090519053);
    F.line = 557;
    break BeforeRet;
    }
    
    F.line = 558;
    var _ = next_1207959694(sc_1174406780);
    F.line = 559;
    switch (peek_1207959614(sc_1174406780)) {
    case 58:
      F.line = 561;
      var _ = next_1207959694(sc_1174406780);
      F.line = 562;
      result_1174406781 = nimCopy(result_1174406781, initGroupStart_1090519290([], [], false), NTI1090519053);
      break;
    case 80:
      F.line = 564;
      var _ = next_1207959694(sc_1174406780);
      F.line = 565;
      check_1174405162(HEX3DHEX3D_838861719(peek_1207959614(sc_1174406780), toRune_1140850719(makeNimstrLit("<"))), makeNimstrLit("Invalid group name. Missing `<`"), startPos_1174406782, sc_1174406780.raw);
      F.line = 568;
      var _ = next_1207959694(sc_1174406780);
      F.line = 569;
      var name_1174406807 = mnewString(0);
      Label1: do {
        F.line = 570;
        var r_1174406811 = 0;
        Label2: do {
          F.line = 28;
            Label3: while (true) {
            if (!(sc_1174406780.pos <= (sc_1174406780.s).length - 1)) break Label3;
              F.line = 29;
              sc_1174406780.pos = addInt(sc_1174406780.pos, 1);
              F.line = 570;
              r_1174406811 = sc_1174406780.s[chckIndx(subInt(sc_1174406780.pos, 1), 0, (sc_1174406780.s).length - 1)];
              if (HEX3DHEX3D_838861719(r_1174406811, toRune_1140850719(makeNimstrLit(">")))) {
              F.line = 572;
              break Label1;
              }
              
              F.line = 570;
              check_1174405162((ConstSet50[chckRange(((r_1174406811) | 0), 0, 65535)] != undefined), HEX25HEX25_1140850924(makeNimstrLit("Invalid group name. Expected char in {\'a\'..\'z\', \'A\'..\'Z\', \'0\'..\'9\', \'-\', \'_\'}, but found `$#`"), HEX24_838861391(r_1174406811)), startPos_1174406782, sc_1174406780.raw);
              F.line = 570;
              addChar(name_1174406807, chckRange(((r_1174406811) | 0), 0, 255));;
            }
        } while (false);
      } while (false);
      F.line = 583;
      check_1174405162((0 < (name_1174406807).length), makeNimstrLit("Invalid group name. Name can\'t be empty"), startPos_1174406782, sc_1174406780.raw);
      F.line = 586;
      check_1174405162(HEX3DHEX3D_838861719(prev_1174406733(sc_1174406780), toRune_1140850719(makeNimstrLit(">"))), makeNimstrLit("Invalid group name. Missing `>`"), startPos_1174406782, sc_1174406780.raw);
      F.line = 589;
      result_1174406781 = nimCopy(result_1174406781, initGroupStart_1090519290(name_1174406807, [], true), NTI1090519053);
      break;
    case 105:
    case 109:
    case 115:
    case 85:
    case 117:
    case 120:
    case 45:
      F.line = 598;
      var flags_1174406850 = [];
      F.line = 599;
      var isNegated_1174406851 = false;
      Label4: do {
        F.line = 600;
        var cp_1174406855 = 0;
        Label5: do {
          F.line = 28;
            Label6: while (true) {
            if (!(sc_1174406780.pos <= (sc_1174406780.s).length - 1)) break Label6;
              F.line = 29;
              sc_1174406780.pos = addInt(sc_1174406780.pos, 1);
              F.line = 600;
              cp_1174406855 = sc_1174406780.s[chckIndx(subInt(sc_1174406780.pos, 1), 0, (sc_1174406780.s).length - 1)];
              Label7: do {
                if ((HEX3DHEX3D_838861719(cp_1174406855, toRune_1140850719(makeNimstrLit(":"))) || HEX3DHEX3D_838861719(cp_1174406855, toRune_1140850719(makeNimstrLit(")"))))) {
                F.line = 602;
                break Label4;
                }
                
                if (HEX3DHEX3D_838861719(cp_1174406855, toRune_1140850719(makeNimstrLit("-")))) {
                F.line = 604;
                isNegated_1174406851 = true;
                F.line = 605;
                break Label7;
                }
                
                if (isNegated_1174406851) {
                F.line = 607;
                flags_1174406850.push(toNegFlag_1174406774(cp_1174406855));;
                }
                else {
                  F.line = 609;
                flags_1174406850.push(toFlag_1174406761(cp_1174406855));;
                }
                
              } while (false);
            }
        } while (false);
      } while (false);
      F.line = 610;
      if (HEX3DHEX3D_838861719(prev_1174406733(sc_1174406780), toRune_1140850719(makeNimstrLit(")")))) {
      Temporary8 = {kind: 5, flags: nimCopy(null, flags_1174406850, NTI1174406355), cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      }
      else {
      Temporary8 = initGroupStart_1090519290([], flags_1174406850, false);
      }
      
      result_1174406781 = nimCopy(result_1174406781, Temporary8, NTI1090519053);
      break;
    case 61:
    case 60:
    case 33:
      F.line = 619;
      var lookAroundKind_1174406870 = 0;
      F.line = 620;
      switch (peek_1207959614(sc_1174406780)) {
      case 61:
        F.line = 622;
        lookAroundKind_1174406870 = 41;
        break;
      case 33:
        F.line = 624;
        lookAroundKind_1174406870 = 43;
        break;
      case 60:
        F.line = 626;
        var _ = next_1207959694(sc_1174406780);
        F.line = 627;
        switch (peek_1207959614(sc_1174406780)) {
        case 61:
          F.line = 629;
          lookAroundKind_1174406870 = 42;
          break;
        case 33:
          F.line = 631;
          lookAroundKind_1174406870 = 44;
          break;
        default: 
          F.line = 633;
          check_1174405162(false, makeNimstrLit("Invalid lookabehind, expected `<=` or `<!` symbol"), startPos_1174406782, sc_1174406780.raw);
          break;
        }
        break;
      default: 
        if (true) {
        F.line = 637;
        failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(637, 16) `false` "));
        }
        
        break;
      }
      if (!(contains_838866100([61, 33], peek_1207959614(sc_1174406780)))) {
      F.line = 638;
      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim(638, 14) `sc.peek in [\'=\'.Rune, \'!\'.Rune]` "));
      }
      
      F.line = 639;
      var _ = next_1207959694(sc_1174406780);
      F.line = 640;
      check_1174405162(!(HEX3DHEX3D_838861719(peek_1207959614(sc_1174406780), 41)), makeNimstrLit("Empty lookaround is not allowed"), startPos_1174406782, sc_1174406780.raw);
      F.line = 643;
      result_1174406781 = nimCopy(result_1174406781, {kind: lookAroundKind_1174406870, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
      break;
    default: 
      F.line = 645;
      check_1174405162(false, makeNimstrLit("Invalid group. Unknown group type"), startPos_1174406782, sc_1174406780.raw);
      break;
    }
  } while (false);
  framePtr = F.prev;

  return result_1174406781;

}

function subParse_1174406910(sc_1174406912) {
    var Temporary1;

  var result_1174406913 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "parser.subParse", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 650;
    F.line = 650;
    var r_1174406920 = prev_1174406733(sc_1174406912);
    F.line = 651;
    switch (r_1174406920) {
    case 92:
      Temporary1 = parseEscapedSeq_1174405579(sc_1174406912);
      break;
    case 91:
      Temporary1 = parseSet_1174406450(sc_1174406912);
      break;
    case 123:
      Temporary1 = parseRepRange_1174406654(sc_1174406912);
      break;
    case 40:
      Temporary1 = parseGroupTag_1174406778(sc_1174406912);
      break;
    case 124:
      Temporary1 = {kind: 6, cp: r_1174406920, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 42:
      F.line = 663;
      noRepeatCheck_1174406632(sc_1174406912);
      Temporary1 = {kind: 7, cp: r_1174406920, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 43:
      F.line = 666;
      noRepeatCheck_1174406632(sc_1174406912);
      Temporary1 = {kind: 8, cp: r_1174406920, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 63:
      F.line = 669;
      noRepeatCheck_1174406632(sc_1174406912);
      Temporary1 = {kind: 9, cp: r_1174406920, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 41:
      Temporary1 = {kind: 4, cp: r_1174406920, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 94:
      Temporary1 = {kind: 11, cp: r_1174406920, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 36:
      Temporary1 = {kind: 12, cp: r_1174406920, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    case 46:
      Temporary1 = {kind: 27, cp: r_1174406920, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})};
      break;
    default: 
      Temporary1 = toCharNode_1090519156(r_1174406920);
      break;
    }
    result_1174406913 = nimCopy(result_1174406913, Temporary1, NTI1090519053);
  framePtr = F.prev;

  return result_1174406913;

}

function verbosity_1174406943(vb_1174406944, vb_1174406944_Idx, sc_1174406946, n_1174406947) {
  var F = {procname: "parser.verbosity", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 709;
    switch (n_1174406947.kind) {
    case 3:
      if ((0 < (vb_1174406944[vb_1174406944_Idx]).length)) {
      F.line = 712;
      vb_1174406944[vb_1174406944_Idx].push(vb_1174406944[vb_1174406944_Idx][chckIndx(subInt((vb_1174406944[vb_1174406944_Idx]).length, 1), 0, (vb_1174406944[vb_1174406944_Idx]).length - 1)]);;
      }
      else {
        F.line = 714;
      vb_1174406944[vb_1174406944_Idx].push(false);;
      }
      
      Label1: do {
        F.line = 715;
        var f_1174406983 = 0;
        F.line = 235;
        var i_1509950411 = 0;
        F.line = 236;
        var L_1509950412 = (n_1174406947.flags).length;
        Label2: do {
          F.line = 237;
            Label3: while (true) {
            if (!(i_1509950411 < L_1509950412)) break Label3;
              F.line = 715;
              f_1174406983 = n_1174406947.flags[chckIndx(i_1509950411, 0, (n_1174406947.flags).length - 1)];
              F.line = 715;
              switch (f_1174406983) {
              case 10:
                F.line = 718;
                vb_1174406944[vb_1174406944_Idx][chckIndx(subInt((vb_1174406944[vb_1174406944_Idx]).length, 1), 0, (vb_1174406944[vb_1174406944_Idx]).length - 1)] = true;
                break;
              case 11:
                F.line = 720;
                vb_1174406944[vb_1174406944_Idx][chckIndx(subInt((vb_1174406944[vb_1174406944_Idx]).length, 1), 0, (vb_1174406944[vb_1174406944_Idx]).length - 1)] = false;
                break;
              default: 
                break;
              }
              F.line = 239;
              i_1509950411 = addInt(i_1509950411, 1);
              if (!(((n_1174406947.flags).length == L_1509950412))) {
              F.line = 240;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      break;
    case 4:
      if ((0 < (vb_1174406944[vb_1174406944_Idx]).length)) {
      F.line = 725;
      var _ = pop_1174406993(vb_1174406944, vb_1174406944_Idx);
      }
      
      break;
    case 5:
      if (((vb_1174406944[vb_1174406944_Idx]).length == 0)) {
      F.line = 730;
      vb_1174406944[vb_1174406944_Idx].push(false);;
      }
      
      Label4: do {
        F.line = 732;
        var f_1174407015 = 0;
        F.line = 235;
        var i_1509950415 = 0;
        F.line = 236;
        var L_1509950416 = (n_1174406947.flags).length;
        Label5: do {
          F.line = 237;
            Label6: while (true) {
            if (!(i_1509950415 < L_1509950416)) break Label6;
              F.line = 732;
              f_1174407015 = n_1174406947.flags[chckIndx(i_1509950415, 0, (n_1174406947.flags).length - 1)];
              F.line = 732;
              switch (f_1174407015) {
              case 10:
                F.line = 735;
                vb_1174406944[vb_1174406944_Idx][chckIndx(subInt((vb_1174406944[vb_1174406944_Idx]).length, 1), 0, (vb_1174406944[vb_1174406944_Idx]).length - 1)] = true;
                break;
              case 11:
                F.line = 737;
                vb_1174406944[vb_1174406944_Idx][chckIndx(subInt((vb_1174406944[vb_1174406944_Idx]).length, 1), 0, (vb_1174406944[vb_1174406944_Idx]).length - 1)] = false;
                break;
              default: 
                break;
              }
              F.line = 239;
              i_1509950415 = addInt(i_1509950415, 1);
              if (!(((n_1174406947.flags).length == L_1509950416))) {
              F.line = 240;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      break;
    default: 
      break;
    }
  framePtr = F.prev;

  
}

function parse_1174407031(expression_1174407032) {
  var result_1174407033 = ({s: []});

  var F = {procname: "parser.parse", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/parser.nim", line: 0};
  framePtr = F;
    F.line = 746;
    result_1174407033.s = nimCopy(null, newSeq_1174407038(chckRange((expression_1174407032).length, 0, 2147483647)), NTI1174406494);
    F.line = 747;
    if (result_1174407033.s.length < 0) { for (var i = result_1174407033.s.length ; i < 0 ; ++i) result_1174407033.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1174407033.s.length = 0; };
    F.line = 748;
    var vb_1174407071 = [newSeq_1174407054(0)];
    F.line = 749;
    var sc_1174407072 = scan_1207959570(expression_1174407032);
    Label1: do {
      F.line = 750;
      var __1174407076 = 0;
      Label2: do {
        F.line = 28;
          Label3: while (true) {
          if (!(sc_1174407072.pos <= (sc_1174407072.s).length - 1)) break Label3;
            F.line = 29;
            sc_1174407072.pos = addInt(sc_1174407072.pos, 1);
            F.line = 750;
            __1174407076 = sc_1174407072.s[chckIndx(subInt(sc_1174407072.pos, 1), 0, (sc_1174407072.s).length - 1)];
            Label4: do {
              if (skipWhiteSpace_1174406921(sc_1174407072, vb_1174407071[0])) {
              F.line = 751;
              break Label4;
              }
              
              F.line = 752;
              result_1174407033.s.push(subParse_1174406910(sc_1174407072));;
              F.line = 753;
              verbosity_1174406943(vb_1174407071, 0, sc_1174407072, HEX5BHEX5D_1174407081(result_1174407033.s, 1));
            } while (false);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1174407033;

}

function initDeque_1325400667(initialSize_1325400669) {
  var result_1325400675 = ({data: [], head: 0, tail: 0, count: 0, mask: 0});

  var F = {procname: "initDeque.initDeque", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
  framePtr = F;
    F.line = 69;
    var correctSizeHEX60gensym28_1325400677 = nextPowerOfTwo_671088843(initialSize_1325400669);
    F.line = 70;
    result_1325400675.mask = subInt(correctSizeHEX60gensym28_1325400677, 1);
    F.line = 88;
    result_1325400675.data = new Array(chckRange(correctSizeHEX60gensym28_1325400677, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym28_1325400677, 0, 2147483647) ; ++i) { result_1325400675.data[i] = 0; }  framePtr = F.prev;

  return result_1325400675;

}

function expandIfNeeded_1325400697(deq_1325400699) {
              var Temporary5;
    var Temporary6;

  var F = {procname: "expandIfNeeded.expandIfNeeded", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
  framePtr = F;
    if ((deq_1325400699.mask == 0)) {
    F.line = 69;
    var correctSizeHEX60gensym30_1325400701 = nextPowerOfTwo_671088843(4);
    F.line = 70;
    deq_1325400699.mask = subInt(correctSizeHEX60gensym30_1325400701, 1);
    F.line = 76;
    deq_1325400699.data = new Array(chckRange(correctSizeHEX60gensym30_1325400701, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym30_1325400701, 0, 2147483647) ; ++i) { deq_1325400699.data[i] = 0; }    }
    
    F.line = 247;
    var cap_1325400706 = addInt(deq_1325400699.mask, 1);
    if ((cap_1325400706 <= deq_1325400699.count)) {
    F.line = 249;
    var n_1325400710 = newSeq_1090519430(chckRange(mulInt(cap_1325400706, 2), 0, 2147483647));
    F.line = 250;
    var i_1325400711 = 0;
    Label1: do {
      F.line = 251;
      var x_1325400721 = null;
      var x_1325400721_Idx = 0;
      F.line = 212;
      var i_1509950572 = deq_1325400699.head;
      Label2: do {
        F.line = 213;
        var c_1509950574 = 0;
        F.line = 119;
        var i_1509950575 = 0;
        Label3: do {
          F.line = 120;
            Label4: while (true) {
            if (!(i_1509950575 < deq_1325400699.count)) break Label4;
              F.line = 213;
              c_1509950574 = i_1509950575;
              F.line = 251;
              x_1325400721 = deq_1325400699.data; x_1325400721_Idx = chckIndx(i_1509950572, 0, (deq_1325400699.data).length - 1);
              F.line = 253;
              Temporary5 = x_1325400721[x_1325400721_Idx];
              x_1325400721[x_1325400721_Idx] = genericReset(x_1325400721[x_1325400721_Idx], NTI33554458);
              n_1325400710[chckIndx(i_1325400711, 0, (n_1325400710).length - 1)] = Temporary5;
              F.line = 251;
              i_1325400711 = addInt(i_1325400711, 1);
              F.line = 215;
              i_1509950572 = (addInt(i_1509950572, 1) & deq_1325400699.mask);
              F.line = 122;
              i_1509950575 = addInt(i_1509950575, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    F.line = 255;
    Temporary6 = n_1325400710;
    n_1325400710 = genericReset(n_1325400710, NTI1090519307);
    deq_1325400699.data = nimCopy(null, Temporary6, NTI1090519307);
    F.line = 256;
    deq_1325400699.mask = subInt(mulInt(cap_1325400706, 2), 1);
    F.line = 257;
    deq_1325400699.tail = deq_1325400699.count;
    F.line = 258;
    deq_1325400699.head = 0;
    }
    
  framePtr = F.prev;

  
}

function addFirst_1325400688(deq_1325400690, item_1325400691) {
  var F = {procname: "addFirst.addFirst", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
  framePtr = F;
    F.line = 271;
    expandIfNeeded_1325400697(deq_1325400690);
    F.line = 272;
    deq_1325400690.count = addInt(deq_1325400690.count, 1);
    F.line = 273;
    deq_1325400690.head = (subInt(deq_1325400690.head, 1) & deq_1325400690.mask);
    F.line = 274;
    deq_1325400690.data[chckIndx(deq_1325400690.head, 0, (deq_1325400690.data).length - 1)] = item_1325400691;
  framePtr = F.prev;

  
}

function len_1325400769(deq_1325400771) {
  var result_1325400772 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
  framePtr = F;
    F.line = 92;
    result_1325400772 = deq_1325400771.count;
  framePtr = F.prev;

  return result_1325400772;

}

function popLast_1325400778(deq_1325400780) {
    var Temporary1;

  var result_1325400781 = 0;

  var F = {procname: "popLast.popLast", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/deques.nim", line: 0};
  framePtr = F;
    if ((deq_1325400780.count < 1)) {
    F.line = 98;
    raiseException({message: makeNimstrLit("Empty deque."), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");
    }
    
    F.line = 399;
    deq_1325400780.count = subInt(deq_1325400780.count, 1);
    F.line = 400;
    deq_1325400780.tail = (subInt(deq_1325400780.tail, 1) & deq_1325400780.mask);
    F.line = 401;
    Temporary1 = deq_1325400780.data[chckIndx(deq_1325400780.tail, 0, (deq_1325400780.data).length - 1)];
    deq_1325400780.data[chckIndx(deq_1325400780.tail, 0, (deq_1325400780.data).length - 1)] = genericReset(deq_1325400780.data[chckIndx(deq_1325400780.tail, 0, (deq_1325400780.data).length - 1)], NTI33554458);
    result_1325400781 = Temporary1;
  framePtr = F.prev;

  return result_1325400781;

}

function isTransitionZ_1325400494(n_1325400495) {
    var Temporary1;

  var result_1325400496 = false;

  var F = {procname: "nfa.isTransitionZ", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    F.line = 153;
    F.line = 153;
    switch (n_1325400495.kind) {
    case 3:
    case 4:
      Temporary1 = n_1325400495.isCapturing;
      break;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 29:
    case 30:
    case 41:
    case 42:
    case 43:
    case 44:
      Temporary1 = true;
      break;
    default: 
      Temporary1 = false;
      break;
    }
    result_1325400496 = Temporary1;
  framePtr = F.prev;

  return result_1325400496;

}

function find_1325400562(a_1325400565, item_1325400566) {
  var result_1325400567 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1837;
    result_1325400567 = 0;
    Label1: do {
      F.line = 1838;
      var i_1325400571 = 0;
      F.line = 8;
      var i_1509950589 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_1509950589 < (a_1325400565).length)) break Label3;
            F.line = 1838;
            i_1325400571 = a_1325400565[chckIndx(i_1509950589, 0, (a_1325400565).length - 1)];
            if ((i_1325400571 == item_1325400566)) {
            F.line = 1839;
            break BeforeRet;
            }
            
            F.line = 1838;
            result_1325400567 = addInt(result_1325400567, 1);
            F.line = 11;
            i_1509950589 = addInt(i_1509950589, 1);
          }
      } while (false);
    } while (false);
    F.line = 1841;
    result_1325400567 = -1;
  } while (false);
  framePtr = F.prev;

  return result_1325400567;

}

function contains_1325400557(a_1325400559, item_1325400560) {
  var result_1325400561 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1855;
    result_1325400561 = (0 <= find_1325400562(a_1325400559, item_1325400560));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1325400561;

}

function pop_1325400285(s_1325400287, s_1325400287_Idx) {
  var result_1325400288 = 0;

  var F = {procname: "pop.pop", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1866;
    var L_1325400292 = subInt((s_1325400287[s_1325400287_Idx]).length, 1);
    F.line = 1871;
    result_1325400288 = s_1325400287[s_1325400287_Idx][chckIndx(L_1325400292, 0, (s_1325400287[s_1325400287_Idx]).length - 1)];
    F.line = 1872;
    if (s_1325400287[s_1325400287_Idx].length < chckRange(L_1325400292, 0, 2147483647)) { for (var i = s_1325400287[s_1325400287_Idx].length ; i < chckRange(L_1325400292, 0, 2147483647) ; ++i) s_1325400287[s_1325400287_Idx].push(0); }
               else { s_1325400287[s_1325400287_Idx].length = chckRange(L_1325400292, 0, 2147483647); };
  framePtr = F.prev;

  return result_1325400288;

}

function teClosure_1325400497(result_1325400498, result_1325400498_Idx, eNfa_1325400499, state_1325400500, processing_1325400501, processing_1325400501_Idx, zTransitions_1325400502) {
              var Temporary4;

  var F = {procname: "nfa.teClosure", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 168;
    var zTransitionsCurr_1325400503 = nimCopy(null, zTransitions_1325400502, NTI1325400468);
    if (isTransitionZ_1325400494(eNfa_1325400499.s[chckIndx(state_1325400500, 0, (eNfa_1325400499.s).length - 1)])) {
    F.line = 170;
    zTransitionsCurr_1325400503.push(state_1325400500);;
    }
    
    if ((ConstSet51[eNfa_1325400499.s[chckIndx(state_1325400500, 0, (eNfa_1325400499.s).length - 1)].kind] != undefined)) {
    F.line = 172;
    result_1325400498[result_1325400498_Idx].push({Field0: state_1325400500, Field1: nimCopy(null, zTransitionsCurr_1325400503, NTI1325400468)});;
    F.line = 173;
    break BeforeRet;
    }
    
    Label1: do {
      F.line = 174;
      var i_1325400551 = 0;
      F.line = 174;
      var s_1325400552 = 0;
      F.line = 166;
      var colontmp__1509950583 = [];
      F.line = 174;
      colontmp__1509950583 = eNfa_1325400499.s[chckIndx(state_1325400500, 0, (eNfa_1325400499.s).length - 1)].next;
      F.line = 168;
      var i_1509950585 = 0;
      F.line = 169;
      var L_1509950586 = (colontmp__1509950583).length;
      Label2: do {
        F.line = 170;
          Label3: while (true) {
          if (!(i_1509950585 < L_1509950586)) break Label3;
            F.line = 174;
            i_1325400551 = i_1509950585;
            F.line = 174;
            s_1325400552 = colontmp__1509950583[chckIndx(i_1509950585, 0, (colontmp__1509950583).length - 1)];
            if ((ConstSet52[eNfa_1325400499.s[chckIndx(state_1325400500, 0, (eNfa_1325400499.s).length - 1)].kind] != undefined)) {
              if (!(contains_1325400557(processing_1325400501[processing_1325400501_Idx], s_1325400552))) Temporary4 = true; else {                Temporary4 = (i_1325400551 == ((eNfa_1325400499.s[chckIndx(state_1325400500, 0, (eNfa_1325400499.s).length - 1)].isGreedy) | 0));              }            if (Temporary4) {
            F.line = 178;
            processing_1325400501[processing_1325400501_Idx].push(s_1325400552);;
            F.line = 179;
            teClosure_1325400497(result_1325400498, result_1325400498_Idx, eNfa_1325400499, s_1325400552, processing_1325400501, processing_1325400501_Idx, zTransitionsCurr_1325400503);
            F.line = 180;
            var _ = pop_1325400285(processing_1325400501, processing_1325400501_Idx);
            }
            
            }
            else {
              F.line = 183;
            teClosure_1325400497(result_1325400498, result_1325400498_Idx, eNfa_1325400499, s_1325400552, processing_1325400501, processing_1325400501_Idx, zTransitionsCurr_1325400503);
            }
            
            F.line = 172;
            i_1509950585 = addInt(i_1509950585, 1);
            if (!(((colontmp__1509950583).length == L_1509950586))) {
            F.line = 173;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  } while (false);
  framePtr = F.prev;

  
}

function teClosure_1325400592(result_1325400593, result_1325400593_Idx, eNfa_1325400594, state_1325400595, processing_1325400596, processing_1325400596_Idx) {
  var F = {procname: "nfa.teClosure", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    if (!(((processing_1325400596[processing_1325400596_Idx]).length == 0))) {
    F.line = 191;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(191, 12) `processing.len == 0` "));
    }
    
    F.line = 192;
    var zclosure_1325400605 = [];
    Label1: do {
      F.line = 193;
      var s_1325400609 = 0;
      F.line = 233;
      var colontmp__1509950578 = [];
      F.line = 193;
      colontmp__1509950578 = eNfa_1325400594.s[chckIndx(state_1325400595, 0, (eNfa_1325400594.s).length - 1)].next;
      F.line = 235;
      var i_1509950579 = 0;
      F.line = 236;
      var L_1509950580 = (colontmp__1509950578).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950579 < L_1509950580)) break Label3;
            F.line = 193;
            s_1325400609 = colontmp__1509950578[chckIndx(i_1509950579, 0, (colontmp__1509950578).length - 1)];
            F.line = 193;
            teClosure_1325400497(result_1325400593, result_1325400593_Idx, eNfa_1325400594, s_1325400609, processing_1325400596, processing_1325400596_Idx, zclosure_1325400605);
            F.line = 239;
            i_1509950579 = addInt(i_1509950579, 1);
            if (!(((colontmp__1509950578).length == L_1509950580))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function HEX5BHEX5DHEX3D_1325400874(s_1325400876, i_1325400877, x_1325400878) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2655;
    s_1325400876[chckIndx(subInt((s_1325400876).length, i_1325400877), 0, (s_1325400876).length - 1)] = x_1325400878;
  framePtr = F.prev;

  
}

function eRemoval_1325400614(eNfa_1325400615) {
    var Temporary1;
    var Temporary18;

  var result_1325400616 = ({s: [], t: ({allZ: [], z: []})});

  var F = {procname: "nfa.eRemoval", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    F.line = 207;
    result_1325400616.s = nimCopy(null, newSeq_1174407038(chckRange((eNfa_1325400615.s).length, 0, 2147483647)), NTI1174406494);
    F.line = 208;
    if (result_1325400616.s.length < 0) { for (var i = result_1325400616.s.length ; i < 0 ; ++i) result_1325400616.s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1325400616.s.length = 0; };
    F.line = 209;
    if (result_1325400616.t.allZ.length < (Temporary1 = chckRange((eNfa_1325400615.s).length, 0, 2147483647), Temporary1)) { for (var i = result_1325400616.t.allZ.length ; i < Temporary1 ; ++i) result_1325400616.t.allZ.push([]); }
               else { result_1325400616.t.allZ.length = Temporary1; };
    F.line = 210;
    var statesMap_1325400648 = newSeq_1090519430(chckRange((eNfa_1325400615.s).length, 0, 2147483647));
    Label2: do {
      F.line = 211;
      var i_1325400656 = 0;
      F.line = 75;
      var colontmp__1509950555 = 0;
      F.line = 211;
      colontmp__1509950555 = subInt((statesMap_1325400648).length, 1);
      F.line = 90;
      var res_1509950556 = 0;
      Label3: do {
        F.line = 91;
          Label4: while (true) {
          if (!(res_1509950556 <= colontmp__1509950555)) break Label4;
            F.line = 211;
            i_1325400656 = res_1509950556;
            F.line = 211;
            statesMap_1325400648[chckIndx(i_1325400656, 0, (statesMap_1325400648).length - 1)] = -1;
            F.line = 93;
            res_1509950556 = addInt(res_1509950556, 1);
          }
      } while (false);
    } while (false);
    F.line = 213;
    var start_1325400660 = chckRange(subInt((eNfa_1325400615.s).length, 1), -32768, 32767);
    F.line = 214;
    var Temporary5 = nimCopy(null, eNfa_1325400615.s[chckIndx(start_1325400660, 0, (eNfa_1325400615.s).length - 1)], NTI1090519053);
    result_1325400616.s.push(Temporary5);;
    F.line = 215;
    statesMap_1325400648[chckIndx(start_1325400660, 0, (statesMap_1325400648).length - 1)] = 0;
    F.line = 216;
    var closure_1325400665 = [[]];
    F.line = 217;
    var zc_1325400666 = [];
    F.line = 218;
    var qw_1325400682 = [initDeque_1325400667(2)];
    F.line = 219;
    addFirst_1325400688(qw_1325400682[0], start_1325400660);
    F.line = 220;
    var qu_1325400749 = {};
    F.line = 221;
    qu_1325400749[start_1325400660] = true;
    F.line = 222;
    var qa_1325400754 = 0;
    F.line = 223;
    var processing_1325400759 = [[]];
    Label6: do {
      F.line = 224;
        Label7: while (true) {
        if (!(0 < len_1325400769(qw_1325400682[0]))) break Label7;
          F.line = 225;
++excHandler;
          try {
          F.line = 226;
          qa_1325400754 = popLast_1325400778(qw_1325400682[0]);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
          framePtr = F;
          if (lastJSError && (isObj(lastJSError.m_type, NTI33555128))) {
          if (true) {
          F.line = 228;
          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(228, 16) `false` "));
          }
          
          }
          else {
          	reraiseException();
          }
          lastJSError = prevJSError;
          } finally {
          framePtr = F;
          }
          F.line = 229;
          if (closure_1325400665[0].length < 0) { for (var i = closure_1325400665[0].length ; i < 0 ; ++i) closure_1325400665[0].push({Field0: 0, Field1: []}); }
               else { closure_1325400665[0].length = 0; };
          F.line = 230;
          teClosure_1325400592(closure_1325400665, 0, eNfa_1325400615, qa_1325400754, processing_1325400759, 0);
          F.line = 231;
          if (result_1325400616.s[chckIndx(statesMap_1325400648[chckIndx(qa_1325400754, 0, (statesMap_1325400648).length - 1)], 0, (result_1325400616.s).length - 1)].next.length < 0) { for (var i = result_1325400616.s[chckIndx(statesMap_1325400648[chckIndx(qa_1325400754, 0, (statesMap_1325400648).length - 1)], 0, (result_1325400616.s).length - 1)].next.length ; i < 0 ; ++i) result_1325400616.s[chckIndx(statesMap_1325400648[chckIndx(qa_1325400754, 0, (statesMap_1325400648).length - 1)], 0, (result_1325400616.s).length - 1)].next.push(0); }
               else { result_1325400616.s[chckIndx(statesMap_1325400648[chckIndx(qa_1325400754, 0, (statesMap_1325400648).length - 1)], 0, (result_1325400616.s).length - 1)].next.length = 0; };
          Label9: do {
            F.line = 232;
            var qb_1325400824 = 0;
            F.line = 232;
            var zclosure_1325400825 = [];
            F.line = 235;
            var i_1509950565 = 0;
            F.line = 236;
            var L_1509950566 = (closure_1325400665[0]).length;
            Label10: do {
              F.line = 237;
                Label11: while (true) {
                if (!(i_1509950565 < L_1509950566)) break Label11;
                  F.line = 232;
                  qb_1325400824 = closure_1325400665[0][chckIndx(i_1509950565, 0, (closure_1325400665[0]).length - 1)]["Field0"];
                  F.line = 232;
                  zclosure_1325400825 = closure_1325400665[0][chckIndx(i_1509950565, 0, (closure_1325400665[0]).length - 1)]["Field1"];
                  if ((statesMap_1325400648[chckIndx(qb_1325400824, 0, (statesMap_1325400648).length - 1)] == -1)) {
                  F.line = 234;
                  var Temporary12 = nimCopy(null, eNfa_1325400615.s[chckIndx(qb_1325400824, 0, (eNfa_1325400615.s).length - 1)], NTI1090519053);
                  result_1325400616.s.push(Temporary12);;
                  F.line = 235;
                  statesMap_1325400648[chckIndx(qb_1325400824, 0, (statesMap_1325400648).length - 1)] = subInt(chckRange((result_1325400616.s).length, -32768, 32767), 1);
                  }
                  
                  if (!((-1 < statesMap_1325400648[chckIndx(qb_1325400824, 0, (statesMap_1325400648).length - 1)]))) {
                  F.line = 236;
                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(236, 16) `statesMap[qb] > -1` "));
                  }
                  
                  if (!((-1 < statesMap_1325400648[chckIndx(qa_1325400754, 0, (statesMap_1325400648).length - 1)]))) {
                  F.line = 237;
                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(237, 16) `statesMap[qa] > -1` "));
                  }
                  
                  F.line = 232;
                  result_1325400616.s[chckIndx(statesMap_1325400648[chckIndx(qa_1325400754, 0, (statesMap_1325400648).length - 1)], 0, (result_1325400616.s).length - 1)].next.push(statesMap_1325400648[chckIndx(qb_1325400824, 0, (statesMap_1325400648).length - 1)]);;
                  F.line = 232;
                  result_1325400616.t.allZ[chckIndx(statesMap_1325400648[chckIndx(qa_1325400754, 0, (statesMap_1325400648).length - 1)], 0, (result_1325400616.t.allZ).length - 1)].push(-1);;
                  F.line = 232;
                  if (zc_1325400666.length < 0) { for (var i = zc_1325400666.length ; i < 0 ; ++i) zc_1325400666.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { zc_1325400666.length = 0; };
                  Label13: do {
                    F.line = 241;
                    var z_1325400858 = 0;
                    F.line = 235;
                    var i_1509950561 = 0;
                    F.line = 236;
                    var L_1509950562 = (zclosure_1325400825).length;
                    Label14: do {
                      F.line = 237;
                        Label15: while (true) {
                        if (!(i_1509950561 < L_1509950562)) break Label15;
                          F.line = 241;
                          z_1325400858 = zclosure_1325400825[chckIndx(i_1509950561, 0, (zclosure_1325400825).length - 1)];
                          F.line = 241;
                          var Temporary16 = nimCopy(null, eNfa_1325400615.s[chckIndx(z_1325400858, 0, (eNfa_1325400615.s).length - 1)], NTI1090519053);
                          zc_1325400666.push(Temporary16);;
                          F.line = 239;
                          i_1509950561 = addInt(i_1509950561, 1);
                          if (!(((zclosure_1325400825).length == L_1509950562))) {
                          F.line = 240;
                          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                          }
                          
                        }
                    } while (false);
                  } while (false);
                  if ((0 < (zc_1325400666).length)) {
                  F.line = 244;
                  var Temporary17 = nimCopy(null, zc_1325400666, NTI1325400601);
                  result_1325400616.t.z.push(Temporary17);;
                  F.line = 245;
                  HEX5BHEX5DHEX3D_1325400874(result_1325400616.t.allZ[chckIndx(statesMap_1325400648[chckIndx(qa_1325400754, 0, (statesMap_1325400648).length - 1)], 0, (result_1325400616.t.allZ).length - 1)], 1, chckRange(subInt((result_1325400616.t.z).length, 1), -32768, 32767));
                  }
                  
                  if (!((qu_1325400749[qb_1325400824] != undefined))) {
                  F.line = 247;
                  qu_1325400749[qb_1325400824] = true;
                  F.line = 248;
                  addFirst_1325400688(qw_1325400682[0], qb_1325400824);
                  }
                  
                  F.line = 239;
                  i_1509950565 = addInt(i_1509950565, 1);
                  if (!(((closure_1325400665[0]).length == L_1509950566))) {
                  F.line = 240;
                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while (false);
          } while (false);
        }
    } while (false);
    F.line = 249;
    if (result_1325400616.t.allZ.length < (Temporary18 = chckRange((result_1325400616.s).length, 0, 2147483647), Temporary18)) { for (var i = result_1325400616.t.allZ.length ; i < Temporary18 ; ++i) result_1325400616.t.allZ.push([]); }
               else { result_1325400616.t.allZ.length = Temporary18; };
  framePtr = F.prev;

  return result_1325400616;

}

function newSeq_1325400209(len_1325400211) {
  var result_1325400212 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 680;
    result_1325400212 = new Array(len_1325400211); for (var i = 0 ; i < len_1325400211 ; ++i) { result_1325400212[i] = []; }  framePtr = F.prev;

  return result_1325400212;

}

function check_1325400069(cond_1325400070, msg_1325400071) {
  var F = {procname: "nfa.check", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    if (!(cond_1325400070)) {
    F.line = 9;
    raiseException({message: nimCopy(null, msg_1325400071, NTI33554439), parent: null, m_type: NTI1140850705, name: null, trace: [], up: null}, "RegexError");
    }
    
  framePtr = F.prev;

  
}

function add_1325400161(x_1325400163, x_1325400163_Idx, y_1325400164) {
    var Temporary1;

  var F = {procname: "add.add", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1308;
    var xl_1325400168 = (x_1325400163[x_1325400163_Idx]).length;
    F.line = 1309;
    if (x_1325400163[x_1325400163_Idx].length < (Temporary1 = chckRange(addInt(xl_1325400168, (y_1325400164).length), 0, 2147483647), Temporary1)) { for (var i = x_1325400163[x_1325400163_Idx].length ; i < Temporary1 ; ++i) x_1325400163[x_1325400163_Idx].push(0); }
               else { x_1325400163[x_1325400163_Idx].length = Temporary1; };
    Label2: do {
      F.line = 1310;
      var i_1325400183 = 0;
      F.line = 75;
      var colontmp__1509950536 = 0;
      F.line = 1310;
      colontmp__1509950536 = (y_1325400164).length - 1;
      F.line = 90;
      var res_1509950537 = 0;
      Label3: do {
        F.line = 91;
          Label4: while (true) {
          if (!(res_1509950537 <= colontmp__1509950536)) break Label4;
            F.line = 1310;
            i_1325400183 = res_1509950537;
            F.line = 1310;
            x_1325400163[x_1325400163_Idx][chckIndx(addInt(xl_1325400168, i_1325400183), 0, (x_1325400163[x_1325400163_Idx]).length - 1)] = y_1325400164[chckIndx(i_1325400183, 0, (y_1325400164).length - 1)];
            F.line = 93;
            res_1509950537 = addInt(res_1509950537, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function update_1325400145(ends_1325400146, ends_1325400146_Idx, ni_1325400147, next_1325400148) {
  var F = {procname: "nfa.update", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    F.line = 43;
    if (ends_1325400146[ends_1325400146_Idx][chckIndx(ni_1325400147, 0, (ends_1325400146[ends_1325400146_Idx]).length - 1)].length < 0) { for (var i = ends_1325400146[ends_1325400146_Idx][chckIndx(ni_1325400147, 0, (ends_1325400146[ends_1325400146_Idx]).length - 1)].length ; i < 0 ; ++i) ends_1325400146[ends_1325400146_Idx][chckIndx(ni_1325400147, 0, (ends_1325400146[ends_1325400146_Idx]).length - 1)].push(0); }
               else { ends_1325400146[ends_1325400146_Idx][chckIndx(ni_1325400147, 0, (ends_1325400146[ends_1325400146_Idx]).length - 1)].length = 0; };
    Label1: do {
      F.line = 44;
      var n_1325400156 = 0;
      F.line = 8;
      var i_1509950533 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_1509950533 < (next_1325400148).length)) break Label3;
            F.line = 44;
            n_1325400156 = next_1325400148[chckIndx(i_1509950533, 0, (next_1325400148).length - 1)];
            if ((n_1325400156 == 0)) {
            F.line = 46;
            ends_1325400146[ends_1325400146_Idx][chckIndx(ni_1325400147, 0, (ends_1325400146[ends_1325400146_Idx]).length - 1)].push(ni_1325400147);;
            }
            else {
              F.line = 48;
            add_1325400161(ends_1325400146[ends_1325400146_Idx], chckIndx(ni_1325400147, 0, (ends_1325400146[ends_1325400146_Idx]).length - 1), ends_1325400146[ends_1325400146_Idx][chckIndx(n_1325400156, 0, (ends_1325400146[ends_1325400146_Idx]).length - 1)]);
            }
            
            F.line = 11;
            i_1509950533 = addInt(i_1509950533, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function combine_1325400074(eNfa_1325400075, ends_1325400076, ends_1325400076_Idx, org_1325400077, target_1325400078) {
  var F = {procname: "nfa.combine", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    Label1: do {
      F.line = 26;
      var e_1325400100 = 0;
      F.line = 233;
      var colontmp__1509950545 = [];
      F.line = 26;
      colontmp__1509950545 = ends_1325400076[ends_1325400076_Idx][chckIndx(org_1325400077, 0, (ends_1325400076[ends_1325400076_Idx]).length - 1)];
      F.line = 235;
      var i_1509950547 = 0;
      F.line = 236;
      var L_1509950548 = (colontmp__1509950545).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950547 < L_1509950548)) break Label3;
            F.line = 26;
            e_1325400100 = colontmp__1509950545[chckIndx(i_1509950547, 0, (colontmp__1509950545).length - 1)];
            Label4: do {
              F.line = 27;
              var i_1325400121 = null;
              var i_1325400121_Idx = 0;
              F.line = 244;
              var i_1509950542 = 0;
              F.line = 245;
              var L_1509950543 = (eNfa_1325400075.s[chckIndx(e_1325400100, 0, (eNfa_1325400075.s).length - 1)].next).length;
              Label5: do {
                F.line = 246;
                  Label6: while (true) {
                  if (!(i_1509950542 < L_1509950543)) break Label6;
                    F.line = 27;
                    i_1325400121 = eNfa_1325400075.s[chckIndx(e_1325400100, 0, (eNfa_1325400075.s).length - 1)].next; i_1325400121_Idx = chckIndx(i_1509950542, 0, (eNfa_1325400075.s[chckIndx(e_1325400100, 0, (eNfa_1325400075.s).length - 1)].next).length - 1);
                    if ((eNfa_1325400075.s[chckIndx(i_1325400121[i_1325400121_Idx], 0, (eNfa_1325400075.s).length - 1)].kind == 46)) {
                    F.line = 29;
                    i_1325400121[i_1325400121_Idx] = target_1325400078;
                    }
                    
                    F.line = 248;
                    i_1509950542 = addInt(i_1509950542, 1);
                    if (!(((eNfa_1325400075.s[chckIndx(e_1325400100, 0, (eNfa_1325400075.s).length - 1)].next).length == L_1509950543))) {
                    F.line = 249;
                    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            F.line = 239;
            i_1509950547 = addInt(i_1509950547, 1);
            if (!(((colontmp__1509950545).length == L_1509950548))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 30;
    ends_1325400076[ends_1325400076_Idx][chckIndx(org_1325400077, 0, (ends_1325400076[ends_1325400076_Idx]).length - 1)] = nimCopy(null, ends_1325400076[ends_1325400076_Idx][chckIndx(target_1325400078, 0, (ends_1325400076[ends_1325400076_Idx]).length - 1)], NTI1325400070);
  framePtr = F.prev;

  
}

function initSkipNode_1090519310(next_1090519311) {
  var result_1090519312 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});

  var F = {procname: "types.initSkipNode", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/types.nim", line: 0};
  framePtr = F;
    F.line = 188;
    Label1: do {
      F.line = 783;
      var iHEX60gensym14_1090519426 = 0;
      F.line = 784;
      var resultHEX60gensym14_1090519438 = newSeq_1090519430(chckRange((next_1090519311).length, 0, 2147483647));
      Label2: do {
        F.line = 785;
        var itHEX60gensym14_1090519442 = 0;
        F.line = 8;
        var i_1509950552 = 0;
        Label3: do {
          F.line = 9;
            Label4: while (true) {
            if (!(i_1509950552 < (next_1090519311).length)) break Label4;
              F.line = 785;
              itHEX60gensym14_1090519442 = next_1090519311[chckIndx(i_1509950552, 0, (next_1090519311).length - 1)];
              F.line = 786;
              resultHEX60gensym14_1090519438[chckIndx(iHEX60gensym14_1090519426, 0, (resultHEX60gensym14_1090519438).length - 1)] = itHEX60gensym14_1090519442;
              F.line = 785;
              iHEX60gensym14_1090519426 = addInt(iHEX60gensym14_1090519426, 1);
              F.line = 11;
              i_1509950552 = addInt(i_1509950552, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    result_1090519312 = nimCopy(result_1090519312, {kind: 45, cp: toRune_1140850719(makeNimstrLit("#")), next: nimCopy(null, resultHEX60gensym14_1090519438, NTI1090519307), isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})}, NTI1090519053);
  framePtr = F.prev;

  return result_1090519312;

}

function eNfa_1325400184(exp_1325400185) {
              var Temporary7;
              var Temporary8;
              var Temporary11;
              var Temporary12;
              var Temporary15;
              var Temporary16;

  var result_1325400186 = [({s: []})];

  var F = {procname: "nfa.eNfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    F.line = 52;
    result_1325400186[0].s = nimCopy(null, newSeq_1174407038(chckRange(addInt((exp_1325400185.s).length, 2), 0, 2147483647)), NTI1174406494);
    F.line = 53;
    if (result_1325400186[0].s.length < 0) { for (var i = result_1325400186[0].s.length ; i < 0 ; ++i) result_1325400186[0].s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1325400186[0].s.length = 0; };
    F.line = 54;
    result_1325400186[0].s.push(initEoeNode_1090519179());;
    F.line = 56;
    var ends_1325400229 = [newSeq_1325400209(chckRange(addInt((exp_1325400185.s).length, 1), 0, 2147483647))];
    F.line = 57;
    var states_1325400237 = [newSeq_1090519430(0)];
    if (((exp_1325400185.s).length == 0)) {
    F.line = 59;
    states_1325400237[0].push(0);;
    }
    
    Label1: do {
      F.line = 60;
      var n_1325400248 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 235;
      var i_1509950525 = 0;
      F.line = 236;
      var L_1509950526 = (exp_1325400185.s).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950525 < L_1509950526)) break Label3;
            F.line = 60;
            n_1325400248 = exp_1325400185.s[chckIndx(i_1509950525, 0, (exp_1325400185.s).length - 1)];
            F.line = 61;
            var n_1325400249 = nimCopy(null, n_1325400248, NTI1090519053);
            if (!(((n_1325400249.next).length == 0))) {
            F.line = 62;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(62, 14) `n.next.len == 0` "));
            }
            
            F.line = 60;
            check_1325400069(((result_1325400186[0].s).length - 1 < 32767), HEX25HEX25_1140850924(makeNimstrLit("The expression is too long, limit is ~$#"), HEX24_318767107(32767)));
            F.line = 67;
            var ni_1325400272 = chckRange((result_1325400186[0].s).length, -32768, 32767);
            F.line = 60;
            switch (n_1325400249.kind) {
            case 0:
            case 1:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 45:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 29:
            case 30:
            case 41:
            case 42:
            case 43:
            case 44:
              F.line = 70;
              n_1325400249.next.push(0);;
              F.line = 71;
              update_1325400145(ends_1325400229, 0, ni_1325400272, new Int16Array([0]));
              F.line = 72;
              var Temporary4 = nimCopy(null, n_1325400249, NTI1090519053);
              result_1325400186[0].s.push(Temporary4);;
              F.line = 73;
              states_1325400237[0].push(ni_1325400272);;
              break;
            case 2:
              F.line = 76;
              var stateB_1325400297 = pop_1325400285(states_1325400237, 0);
              F.line = 77;
              var stateA_1325400301 = pop_1325400285(states_1325400237, 0);
              F.line = 78;
              combine_1325400074(result_1325400186[0], ends_1325400229, 0, stateA_1325400301, stateB_1325400297);
              F.line = 79;
              states_1325400237[0].push(stateA_1325400301);;
              break;
            case 6:
              F.line = 81;
              check_1325400069((2 <= (states_1325400237[0]).length), makeNimstrLit("Invalid OR conditional, nothing to match at right/left side of the condition"));
              F.line = 86;
              var stateB_1325400312 = pop_1325400285(states_1325400237, 0);
              F.line = 87;
              var stateA_1325400316 = pop_1325400285(states_1325400237, 0);
              F.line = 88;
              add_1325400161(n_1325400249, "next", new Int16Array([stateA_1325400316, stateB_1325400312]));
              F.line = 89;
              update_1325400145(ends_1325400229, 0, ni_1325400272, n_1325400249.next);
              F.line = 90;
              var Temporary5 = nimCopy(null, n_1325400249, NTI1090519053);
              result_1325400186[0].s.push(Temporary5);;
              F.line = 91;
              states_1325400237[0].push(ni_1325400272);;
              break;
            case 7:
              F.line = 93;
              check_1325400069((1 <= (states_1325400237[0]).length), makeNimstrLit("Invalid `*` operator, nothing to repeat"));
              F.line = 97;
              var stateA_1325400335 = pop_1325400285(states_1325400237, 0);
              F.line = 98;
              add_1325400161(n_1325400249, "next", new Int16Array([stateA_1325400335, 0]));
              F.line = 99;
              update_1325400145(ends_1325400229, 0, ni_1325400272, n_1325400249.next);
              F.line = 100;
              combine_1325400074(result_1325400186[0], ends_1325400229, 0, stateA_1325400335, ni_1325400272);
              F.line = 101;
              var Temporary6 = nimCopy(null, n_1325400249, NTI1090519053);
              result_1325400186[0].s.push(Temporary6);;
              F.line = 102;
              states_1325400237[0].push(ni_1325400272);;
              if (!(n_1325400249.isGreedy)) {
              F.line = 104;
              var Temporary9 = (Temporary7 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary7)[chckIndx(0, 0, (Temporary7).length - 1)]; (Temporary7 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary7)[chckIndx(0, 0, (Temporary7).length - 1)] = (Temporary8 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary8)[chckIndx(1, 0, (Temporary8).length - 1)]; (Temporary8 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary8)[chckIndx(1, 0, (Temporary8).length - 1)] = Temporary9;              }
              
              break;
            case 8:
              F.line = 106;
              check_1325400069((1 <= (states_1325400237[0]).length), makeNimstrLit("Invalid `+` operator, nothing to repeat"));
              F.line = 110;
              var stateA_1325400366 = pop_1325400285(states_1325400237, 0);
              F.line = 111;
              add_1325400161(n_1325400249, "next", new Int16Array([stateA_1325400366, 0]));
              F.line = 112;
              update_1325400145(ends_1325400229, 0, ni_1325400272, n_1325400249.next);
              F.line = 113;
              combine_1325400074(result_1325400186[0], ends_1325400229, 0, stateA_1325400366, ni_1325400272);
              F.line = 114;
              var Temporary10 = nimCopy(null, n_1325400249, NTI1090519053);
              result_1325400186[0].s.push(Temporary10);;
              F.line = 115;
              states_1325400237[0].push(stateA_1325400366);;
              if (!(n_1325400249.isGreedy)) {
              F.line = 117;
              var Temporary13 = (Temporary11 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary11)[chckIndx(0, 0, (Temporary11).length - 1)]; (Temporary11 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary11)[chckIndx(0, 0, (Temporary11).length - 1)] = (Temporary12 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary12)[chckIndx(1, 0, (Temporary12).length - 1)]; (Temporary12 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary12)[chckIndx(1, 0, (Temporary12).length - 1)] = Temporary13;              }
              
              break;
            case 9:
              F.line = 119;
              check_1325400069((1 <= (states_1325400237[0]).length), makeNimstrLit("Invalid `?` operator, nothing to make optional"));
              F.line = 123;
              var stateA_1325400397 = pop_1325400285(states_1325400237, 0);
              F.line = 124;
              add_1325400161(n_1325400249, "next", new Int16Array([stateA_1325400397, 0]));
              F.line = 125;
              update_1325400145(ends_1325400229, 0, ni_1325400272, n_1325400249.next);
              F.line = 126;
              var Temporary14 = nimCopy(null, n_1325400249, NTI1090519053);
              result_1325400186[0].s.push(Temporary14);;
              F.line = 127;
              states_1325400237[0].push(ni_1325400272);;
              if (!(n_1325400249.isGreedy)) {
              F.line = 129;
              var Temporary17 = (Temporary15 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary15)[chckIndx(0, 0, (Temporary15).length - 1)]; (Temporary15 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary15)[chckIndx(0, 0, (Temporary15).length - 1)] = (Temporary16 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary16)[chckIndx(1, 0, (Temporary16).length - 1)]; (Temporary16 = HEX5BHEX5D_1174407081(result_1325400186[0].s, 1).next, Temporary16)[chckIndx(1, 0, (Temporary16).length - 1)] = Temporary17;              }
              
              break;
            case 3:
              F.line = 131;
              var stateA_1325400425 = pop_1325400285(states_1325400237, 0);
              F.line = 132;
              n_1325400249.next.push(stateA_1325400425);;
              F.line = 133;
              update_1325400145(ends_1325400229, 0, ni_1325400272, n_1325400249.next);
              F.line = 134;
              var Temporary18 = nimCopy(null, n_1325400249, NTI1090519053);
              result_1325400186[0].s.push(Temporary18);;
              F.line = 135;
              states_1325400237[0].push(ni_1325400272);;
              break;
            case 4:
              F.line = 137;
              n_1325400249.next.push(0);;
              F.line = 138;
              update_1325400145(ends_1325400229, 0, ni_1325400272, n_1325400249.next);
              F.line = 139;
              var stateA_1325400445 = pop_1325400285(states_1325400237, 0);
              F.line = 140;
              combine_1325400074(result_1325400186[0], ends_1325400229, 0, stateA_1325400445, ni_1325400272);
              F.line = 141;
              var Temporary19 = nimCopy(null, n_1325400249, NTI1090519053);
              result_1325400186[0].s.push(Temporary19);;
              F.line = 142;
              states_1325400237[0].push(stateA_1325400445);;
              break;
            default: 
              if (true) {
              F.line = 144;
              failedAssertImpl_218103864((makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(144, 15) `false` ") || []).concat(HEX25HEX25_1140850924(makeNimstrLit("Unhandled node: $#"), reprEnum(n_1325400249.kind, NTI1090519051)) || []));
              }
              
              break;
            }
            F.line = 239;
            i_1509950525 = addInt(i_1509950525, 1);
            if (!(((exp_1325400185.s).length == L_1509950526))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (!(((states_1325400237[0]).length == 1))) {
    F.line = 145;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(145, 12) `states.len == 1` "));
    }
    
    F.line = 146;
    result_1325400186[0].s.push(initSkipNode_1090519310(states_1325400237[0]));;
  framePtr = F.prev;

  return result_1325400186[0];

}

function pop_1325400987(s_1325400989, s_1325400989_Idx) {
  var result_1325400990 = {Field0: 0, Field1: 0};

  var F = {procname: "pop.pop", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1866;
    var L_1325400994 = subInt((s_1325400989[s_1325400989_Idx]).length, 1);
    F.line = 1871;
    result_1325400990 = nimCopy(result_1325400990, s_1325400989[s_1325400989_Idx][chckIndx(L_1325400994, 0, (s_1325400989[s_1325400989_Idx]).length - 1)], NTI1325400816);
    F.line = 1872;
    if (s_1325400989[s_1325400989_Idx].length < chckRange(L_1325400994, 0, 2147483647)) { for (var i = s_1325400989[s_1325400989_Idx].length ; i < chckRange(L_1325400994, 0, 2147483647) ; ++i) s_1325400989[s_1325400989_Idx].push({Field0: 0, Field1: 0}); }
               else { s_1325400989[s_1325400989_Idx].length = chckRange(L_1325400994, 0, 2147483647); };
  framePtr = F.prev;

  return result_1325400990;

}

function reverse_1325401040(a_1325401042, first_1325401043, last_1325401044) {
  var F = {procname: "reverse.reverse", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 112;
    var x_1325401045 = first_1325401043;
    F.line = 113;
    var y_1325401046 = last_1325401044;
    Label1: do {
      F.line = 114;
        Label2: while (true) {
        if (!(x_1325401045 < y_1325401046)) break Label2;
          F.line = 115;
          var Temporary3 = a_1325401042[chckIndx(x_1325401045, 0, (a_1325401042).length - 1)]; a_1325401042[chckIndx(x_1325401045, 0, (a_1325401042).length - 1)] = a_1325401042[chckIndx(y_1325401046, 0, (a_1325401042).length - 1)]; a_1325401042[chckIndx(y_1325401046, 0, (a_1325401042).length - 1)] = Temporary3;          F.line = 116;
          y_1325401046 = subInt(y_1325401046, 1);
          F.line = 117;
          x_1325401045 = addInt(x_1325401045, 1);
        }
    } while (false);
  framePtr = F.prev;

  
}

function reverse_1325401034(a_1325401036) {
  var F = {procname: "reverse.reverse", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 132;
    reverse_1325401040(a_1325401036, 0, chckRange(nimMax(0, (a_1325401036).length - 1), 0, 2147483647));
  framePtr = F.prev;

  
}

function reverse_1325400961(eNfa_1325400962) {
  var result_1325400963 = ({s: []});

  var F = {procname: "nfa.reverse", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    F.line = 253;
    result_1325400963 = nimCopy(result_1325400963, eNfa_1325400962, NTI1090519045);
    Label1: do {
      F.line = 254;
      var n_1325400968 = null;
      F.line = 244;
      var i_436207940 = 0;
      F.line = 245;
      var L_436207941 = (result_1325400963.s).length;
      Label2: do {
        F.line = 246;
          Label3: while (true) {
          if (!(i_436207940 < L_436207941)) break Label3;
            F.line = 254;
            n_1325400968 = result_1325400963.s[chckIndx(i_436207940, 0, (result_1325400963.s).length - 1)];
            F.line = 254;
            if (n_1325400968.next.length < 0) { for (var i = n_1325400968.next.length ; i < 0 ; ++i) n_1325400968.next.push(0); }
               else { n_1325400968.next.length = 0; };
            F.line = 248;
            i_436207940 = addInt(i_436207940, 1);
            if (!(((result_1325400963.s).length == L_436207941))) {
            F.line = 249;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 256;
    var stack_1325400980 = [[nimCopy(null, {Field0: chckRange(subInt((eNfa_1325400962.s).length, 1), -32768, 32767), Field1: -1}, NTI1325400816)]];
    F.line = 257;
    var visited_1325400981 = {};
    Label4: do {
      F.line = 259;
        Label5: while (true) {
        if (!(0 < (stack_1325400980[0]).length)) break Label5;
          Label6: do {
            F.line = 260;
            var colontmp__436212980 = pop_1325400987(stack_1325400980, 0);
            F.line = 260;
            var ni_1325401008 = colontmp__436212980["Field0"];
            F.line = 260;
            var pi_1325401009 = colontmp__436212980["Field1"];
            if ((-1 < pi_1325401009)) {
            F.line = 262;
            result_1325400963.s[chckIndx(ni_1325401008, 0, (result_1325400963.s).length - 1)].next.push(pi_1325401009);;
            }
            
            if ((visited_1325400981[ni_1325401008] != undefined)) {
            F.line = 264;
            break Label6;
            }
            
            F.line = 265;
            visited_1325400981[ni_1325401008] = true;
            Label7: do {
              F.line = 266;
              var mi_1325401025 = 0;
              F.line = 233;
              var colontmp__436207946 = [];
              F.line = 266;
              colontmp__436207946 = eNfa_1325400962.s[chckIndx(ni_1325401008, 0, (eNfa_1325400962.s).length - 1)].next;
              F.line = 235;
              var i_436207947 = 0;
              F.line = 236;
              var L_436207948 = (colontmp__436207946).length;
              Label8: do {
                F.line = 237;
                  Label9: while (true) {
                  if (!(i_436207947 < L_436207948)) break Label9;
                    F.line = 266;
                    mi_1325401025 = colontmp__436207946[chckIndx(i_436207947, 0, (colontmp__436207946).length - 1)];
                    F.line = 266;
                    stack_1325400980[0].push({Field0: mi_1325401025, Field1: ni_1325401008});;
                    F.line = 239;
                    i_436207947 = addInt(i_436207947, 1);
                    if (!(((colontmp__436207946).length == L_436207948))) {
                    F.line = 240;
                    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
          } while (false);
        }
    } while (false);
    Label10: do {
      F.line = 268;
      var n_1325401033 = null;
      F.line = 244;
      var i_436207951 = 0;
      F.line = 245;
      var L_436207952 = (result_1325400963.s).length;
      Label11: do {
        F.line = 246;
          Label12: while (true) {
          if (!(i_436207951 < L_436207952)) break Label12;
            F.line = 268;
            n_1325401033 = result_1325400963.s[chckIndx(i_436207951, 0, (result_1325400963.s).length - 1)];
            F.line = 268;
            reverse_1325401034(n_1325401033.next);
            F.line = 248;
            i_436207951 = addInt(i_436207951, 1);
            if (!(((result_1325400963.s).length == L_436207952))) {
            F.line = 249;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    Label13: do {
      F.line = 271;
      var i_1325401090 = 0;
      F.line = 271;
      var n_1325401091 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 168;
      var i_436207955 = 0;
      F.line = 169;
      var L_436207956 = (eNfa_1325400962.s).length;
      Label14: do {
        F.line = 170;
          Label15: while (true) {
          if (!(i_436207955 < L_436207956)) break Label15;
            F.line = 271;
            i_1325401090 = i_436207955;
            F.line = 271;
            n_1325401091 = nimCopy(n_1325401091, eNfa_1325400962.s[chckIndx(i_436207955, 0, (eNfa_1325400962.s).length - 1)], NTI1090519053);
            F.line = 271;
            switch (n_1325401091.kind) {
            case 7:
              if (!(n_1325401091.isGreedy)) {
              F.line = 275;
              reverse_1325401034(result_1325400963.s[chckIndx(i_1325401090, 0, (result_1325400963.s).length - 1)].next);
              }
              
              break;
            case 8:
              if (!(n_1325401091.isGreedy)) {
              F.line = 278;
              reverse_1325401034(result_1325400963.s[chckIndx(n_1325401091.next[chckIndx(1, 0, (n_1325401091.next).length - 1)], 0, (result_1325400963.s).length - 1)].next);
              }
              
              break;
            default: 
              break;
            }
            F.line = 172;
            i_436207955 = addInt(i_436207955, 1);
            if (!(((eNfa_1325400962.s).length == L_436207956))) {
            F.line = 173;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 282;
    var eoeIdx_1325401098 = -1;
    Label16: do {
      F.line = 283;
      var i_1325401104 = 0;
      F.line = 283;
      var n_1325401105 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 168;
      var i_436207959 = 0;
      F.line = 169;
      var L_436207960 = (result_1325400963.s).length;
      Label17: do {
        F.line = 170;
          Label18: while (true) {
          if (!(i_436207959 < L_436207960)) break Label18;
            F.line = 283;
            i_1325401104 = i_436207959;
            F.line = 283;
            n_1325401105 = nimCopy(n_1325401105, result_1325400963.s[chckIndx(i_436207959, 0, (result_1325400963.s).length - 1)], NTI1090519053);
            if ((n_1325401105.kind == 46)) {
            if (!((eoeIdx_1325401098 == -1))) {
            F.line = 285;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(285, 16) `eoeIdx == -1` "));
            }
            
            F.line = 286;
            eoeIdx_1325401098 = chckRange(i_1325401104, -32768, 32767);
            }
            
            F.line = 172;
            i_436207959 = addInt(i_436207959, 1);
            if (!(((result_1325400963.s).length == L_436207960))) {
            F.line = 173;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (!(!((eoeIdx_1325401098 == -1)))) {
    F.line = 287;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(287, 12) `eoeIdx != -1` "));
    }
    
    Label19: do {
      F.line = 288;
      var i_1325401126 = 0;
      F.line = 233;
      var colontmp__436207967 = [];
      F.line = 288;
      colontmp__436207967 = eNfa_1325400962.s[chckIndx(subInt((eNfa_1325400962.s).length, 1), 0, (eNfa_1325400962.s).length - 1)].next;
      F.line = 235;
      var i_436207968 = 0;
      F.line = 236;
      var L_436207969 = (colontmp__436207967).length;
      Label20: do {
        F.line = 237;
          Label21: while (true) {
          if (!(i_436207968 < L_436207969)) break Label21;
            F.line = 288;
            i_1325401126 = colontmp__436207967[chckIndx(i_436207968, 0, (colontmp__436207967).length - 1)];
            Label22: do {
              F.line = 289;
              var j_1325401134 = 0;
              F.line = 75;
              var colontmp__436207964 = 0;
              F.line = 289;
              colontmp__436207964 = subInt((result_1325400963.s[chckIndx(i_1325401126, 0, (result_1325400963.s).length - 1)].next).length, 1);
              F.line = 90;
              var res_436207965 = 0;
              Label23: do {
                F.line = 91;
                  Label24: while (true) {
                  if (!(res_436207965 <= colontmp__436207964)) break Label24;
                    F.line = 289;
                    j_1325401134 = res_436207965;
                    if ((result_1325400963.s[chckIndx(i_1325401126, 0, (result_1325400963.s).length - 1)].next[chckIndx(j_1325401134, 0, (result_1325400963.s[chckIndx(i_1325401126, 0, (result_1325400963.s).length - 1)].next).length - 1)] == chckRange(subInt((eNfa_1325400962.s).length, 1), -32768, 32767))) {
                    F.line = 291;
                    result_1325400963.s[chckIndx(i_1325401126, 0, (result_1325400963.s).length - 1)].next[chckIndx(j_1325401134, 0, (result_1325400963.s[chckIndx(i_1325401126, 0, (result_1325400963.s).length - 1)].next).length - 1)] = eoeIdx_1325401098;
                    }
                    
                    F.line = 93;
                    res_436207965 = addInt(res_436207965, 1);
                  }
              } while (false);
            } while (false);
            F.line = 239;
            i_436207968 = addInt(i_436207968, 1);
            if (!(((colontmp__436207967).length == L_436207969))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 292;
    var Temporary25 = result_1325400963.s[chckIndx(subInt((eNfa_1325400962.s).length, 1), 0, (result_1325400963.s).length - 1)].next; result_1325400963.s[chckIndx(subInt((eNfa_1325400962.s).length, 1), 0, (result_1325400963.s).length - 1)].next = result_1325400963.s[chckIndx(eoeIdx_1325401098, 0, (result_1325400963.s).length - 1)].next; result_1325400963.s[chckIndx(eoeIdx_1325401098, 0, (result_1325400963.s).length - 1)].next = Temporary25;    if (!((result_1325400963.s[chckIndx(subInt((eNfa_1325400962.s).length, 1), 0, (result_1325400963.s).length - 1)].kind == 45))) {
    F.line = 293;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(293, 12) `result.s[state0].kind == reSkip` "));
    }
    
    if (!((result_1325400963.s[chckIndx(eoeIdx_1325401098, 0, (result_1325400963.s).length - 1)].kind == 46))) {
    F.line = 294;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(294, 12) `result.s[eoeIdx].kind == reEoe` "));
    }
    
    if (!((0 < (result_1325400963.s[chckIndx(subInt((eNfa_1325400962.s).length, 1), 0, (result_1325400963.s).length - 1)].next).length))) {
    F.line = 295;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(295, 12) `result.s[state0].next.len > 0` "));
    }
    
    if (!(((result_1325400963.s[chckIndx(eoeIdx_1325401098, 0, (result_1325400963.s).length - 1)].next).length == 0))) {
    F.line = 296;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim(296, 12) `result.s[eoeIdx].next.len == 0` "));
    }
    
  framePtr = F.prev;

  return result_1325400963;

}

function subExps_1325401212(exp_1325401213) {
  var result_1325401214 = ({s: []});

  var F = {procname: "nfa.subExps", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    F.line = 299;
    result_1325401214 = nimCopy(result_1325401214, exp_1325401213, NTI1090519044);
    Label1: do {
      F.line = 300;
      var n_1325401218 = null;
      F.line = 244;
      var i_1509950521 = 0;
      F.line = 245;
      var L_1509950522 = (result_1325401214.s).length;
      Label2: do {
        F.line = 246;
          Label3: while (true) {
          if (!(i_1509950521 < L_1509950522)) break Label3;
            F.line = 300;
            n_1325401218 = result_1325401214.s[chckIndx(i_1509950521, 0, (result_1325401214.s).length - 1)];
            F.line = 300;
            switch (n_1325401218.kind) {
            case 41:
            case 43:
              F.line = 306;
              n_1325401218.subExp.nfa = nimCopy(n_1325401218.subExp.nfa, eRemoval_1325400614(eNfa_1325400184(subExps_1325401212(n_1325401218.subExp.rpn))), NTI1090519049);
              F.line = 307;
              n_1325401218.subExp.rpn.s = nimCopy(null, newSeq_1174407038(0), NTI1174406494);
              break;
            case 42:
            case 44:
              F.line = 313;
              n_1325401218.subExp.nfa = nimCopy(n_1325401218.subExp.nfa, eRemoval_1325400614(reverse_1325400961(eNfa_1325400184(subExps_1325401212(n_1325401218.subExp.rpn)))), NTI1090519049);
              F.line = 314;
              n_1325401218.subExp.rpn.s = nimCopy(null, newSeq_1174407038(0), NTI1174406494);
              break;
            default: 
              break;
            }
            F.line = 248;
            i_1509950521 = addInt(i_1509950521, 1);
            if (!(((result_1325401214.s).length == L_1509950522))) {
            F.line = 249;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1325401214;

}

function nfa2_1325401242(exp_1325401243) {
  var result_1325401244 = ({s: [], t: ({allZ: [], z: []})});

  var F = {procname: "nfa.nfa2", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfa.nim", line: 0};
  framePtr = F;
    F.line = 320;
    result_1325401244 = nimCopy(result_1325401244, eRemoval_1325400614(eNfa_1325400184(subExps_1325401212(exp_1325401243))), NTI1090519049);
  framePtr = F.prev;

  return result_1325401244;

}

function update_1258291231(ends_1258291232, ends_1258291232_Idx, ni_1258291233, next_1258291234) {
  var F = {procname: "litopt.update", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
  framePtr = F;
    F.line = 81;
    if (ends_1258291232[ends_1258291232_Idx][chckIndx(ni_1258291233, 0, (ends_1258291232[ends_1258291232_Idx]).length - 1)].length < 0) { for (var i = ends_1258291232[ends_1258291232_Idx][chckIndx(ni_1258291233, 0, (ends_1258291232[ends_1258291232_Idx]).length - 1)].length ; i < 0 ; ++i) ends_1258291232[ends_1258291232_Idx][chckIndx(ni_1258291233, 0, (ends_1258291232[ends_1258291232_Idx]).length - 1)].push(0); }
               else { ends_1258291232[ends_1258291232_Idx][chckIndx(ni_1258291233, 0, (ends_1258291232[ends_1258291232_Idx]).length - 1)].length = 0; };
    Label1: do {
      F.line = 82;
      var n_1258291242 = 0;
      F.line = 8;
      var i_1509950608 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_1509950608 < (next_1258291234).length)) break Label3;
            F.line = 82;
            n_1258291242 = next_1258291234[chckIndx(i_1509950608, 0, (next_1258291234).length - 1)];
            if ((n_1258291242 == 0)) {
            F.line = 84;
            ends_1258291232[ends_1258291232_Idx][chckIndx(ni_1258291233, 0, (ends_1258291232[ends_1258291232_Idx]).length - 1)].push(ni_1258291233);;
            }
            else {
              F.line = 86;
            add_1325400161(ends_1258291232[ends_1258291232_Idx], chckIndx(ni_1258291233, 0, (ends_1258291232[ends_1258291232_Idx]).length - 1), ends_1258291232[ends_1258291232_Idx][chckIndx(n_1258291242, 0, (ends_1258291232[ends_1258291232_Idx]).length - 1)]);
            }
            
            F.line = 11;
            i_1509950608 = addInt(i_1509950608, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function combine_1258291213(eNfa_1258291214, ends_1258291215, ends_1258291215_Idx, org_1258291216, target_1258291217) {
  var F = {procname: "litopt.combine", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
  framePtr = F;
    Label1: do {
      F.line = 68;
      var e_1258291221 = 0;
      F.line = 233;
      var colontmp__1509950615 = [];
      F.line = 68;
      colontmp__1509950615 = ends_1258291215[ends_1258291215_Idx][chckIndx(org_1258291216, 0, (ends_1258291215[ends_1258291215_Idx]).length - 1)];
      F.line = 235;
      var i_1509950616 = 0;
      F.line = 236;
      var L_1509950617 = (colontmp__1509950615).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950616 < L_1509950617)) break Label3;
            F.line = 68;
            e_1258291221 = colontmp__1509950615[chckIndx(i_1509950616, 0, (colontmp__1509950615).length - 1)];
            Label4: do {
              F.line = 69;
              var i_1258291225 = null;
              var i_1258291225_Idx = 0;
              F.line = 244;
              var i_1509950612 = 0;
              F.line = 245;
              var L_1509950613 = (eNfa_1258291214.s[chckIndx(e_1258291221, 0, (eNfa_1258291214.s).length - 1)].next).length;
              Label5: do {
                F.line = 246;
                  Label6: while (true) {
                  if (!(i_1509950612 < L_1509950613)) break Label6;
                    F.line = 69;
                    i_1258291225 = eNfa_1258291214.s[chckIndx(e_1258291221, 0, (eNfa_1258291214.s).length - 1)].next; i_1258291225_Idx = chckIndx(i_1509950612, 0, (eNfa_1258291214.s[chckIndx(e_1258291221, 0, (eNfa_1258291214.s).length - 1)].next).length - 1);
                    if ((eNfa_1258291214.s[chckIndx(i_1258291225[i_1258291225_Idx], 0, (eNfa_1258291214.s).length - 1)].kind == 46)) {
                    F.line = 71;
                    i_1258291225[i_1258291225_Idx] = target_1258291217;
                    }
                    
                    F.line = 248;
                    i_1509950612 = addInt(i_1509950612, 1);
                    if (!(((eNfa_1258291214.s[chckIndx(e_1258291221, 0, (eNfa_1258291214.s).length - 1)].next).length == L_1509950613))) {
                    F.line = 249;
                    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            F.line = 239;
            i_1509950616 = addInt(i_1509950616, 1);
            if (!(((colontmp__1509950615).length == L_1509950617))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 72;
    ends_1258291215[ends_1258291215_Idx][chckIndx(org_1258291216, 0, (ends_1258291215[ends_1258291215_Idx]).length - 1)] = nimCopy(null, ends_1258291215[ends_1258291215_Idx][chckIndx(target_1258291217, 0, (ends_1258291215[ends_1258291215_Idx]).length - 1)], NTI1258291212);
  framePtr = F.prev;

  
}

function toLitNfa_1258291251(exp_1258291252) {
  var result_1258291253 = [({s: []})];

  var F = {procname: "litopt.toLitNfa", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
  framePtr = F;
    F.line = 93;
    result_1258291253[0].s = nimCopy(null, newSeq_1174407038(chckRange(addInt((exp_1258291252.s).length, 2), 0, 2147483647)), NTI1174406494);
    F.line = 94;
    if (result_1258291253[0].s.length < 0) { for (var i = result_1258291253[0].s.length ; i < 0 ; ++i) result_1258291253[0].s.push(({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})})); }
               else { result_1258291253[0].s.length = 0; };
    F.line = 95;
    result_1258291253[0].s.push(initEoeNode_1090519179());;
    F.line = 97;
    var ends_1258291282 = [newSeq_1325400209(chckRange(addInt((exp_1258291252.s).length, 1), 0, 2147483647))];
    F.line = 98;
    var states_1258291290 = [newSeq_1090519430(0)];
    if (((exp_1258291252.s).length == 0)) {
    F.line = 100;
    states_1258291290[0].push(0);;
    }
    
    Label1: do {
      F.line = 101;
      var n_1258291301 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 235;
      var i_1509950604 = 0;
      F.line = 236;
      var L_1509950605 = (exp_1258291252.s).length;
      Label2: do {
        F.line = 237;
          Label3: while (true) {
          if (!(i_1509950604 < L_1509950605)) break Label3;
            F.line = 101;
            n_1258291301 = exp_1258291252.s[chckIndx(i_1509950604, 0, (exp_1258291252.s).length - 1)];
            F.line = 102;
            var n_1258291302 = nimCopy(null, n_1258291301, NTI1090519053);
            if (!(((n_1258291302.next).length == 0))) {
            F.line = 103;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(103, 14) `n.next.len == 0` "));
            }
            
            F.line = 104;
            var ni_1258291314 = chckRange((result_1258291253[0].s).length, -32768, 32767);
            F.line = 101;
            switch (n_1258291302.kind) {
            case 0:
            case 1:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 45:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 29:
            case 30:
            case 41:
            case 42:
            case 43:
            case 44:
              F.line = 107;
              n_1258291302.next.push(0);;
              F.line = 108;
              update_1258291231(ends_1258291282, 0, ni_1258291314, new Int16Array([0]));
              F.line = 109;
              var Temporary4 = nimCopy(null, n_1258291302, NTI1090519053);
              result_1258291253[0].s.push(Temporary4);;
              F.line = 110;
              states_1258291290[0].push(ni_1258291314);;
              break;
            case 2:
              F.line = 113;
              var stateB_1258291330 = pop_1325400285(states_1258291290, 0);
              F.line = 114;
              var stateA_1258291334 = pop_1325400285(states_1258291290, 0);
              F.line = 115;
              combine_1258291213(result_1258291253[0], ends_1258291282, 0, stateA_1258291334, stateB_1258291330);
              F.line = 116;
              states_1258291290[0].push(stateA_1258291334);;
              break;
            case 6:
              F.line = 118;
              var _ = pop_1325400285(states_1258291290, 0);
              F.line = 119;
              var _ = pop_1325400285(states_1258291290, 0);
              F.line = 120;
              update_1258291231(ends_1258291282, 0, ni_1258291314, new Int16Array([0]));
              F.line = 121;
              result_1258291253[0].s.push(initSkipNode_1090519310(new Int16Array([0])));;
              F.line = 122;
              states_1258291290[0].push(ni_1258291314);;
              break;
            case 7:
            case 9:
            case 8:
              F.line = 124;
              var _ = pop_1325400285(states_1258291290, 0);
              F.line = 125;
              update_1258291231(ends_1258291282, 0, ni_1258291314, new Int16Array([0]));
              F.line = 126;
              result_1258291253[0].s.push(initSkipNode_1090519310(new Int16Array([0])));;
              F.line = 127;
              states_1258291290[0].push(ni_1258291314);;
              break;
            case 3:
              break;
            case 4:
              break;
            default: 
              if (true) {
              F.line = 133;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(133, 16) `false` "));
              }
              
              break;
            }
            F.line = 239;
            i_1509950604 = addInt(i_1509950604, 1);
            if (!(((exp_1258291252.s).length == L_1509950605))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (!(((states_1258291290[0]).length == 1))) {
    F.line = 134;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(134, 12) `states.len == 1` "));
    }
    
    F.line = 135;
    result_1258291253[0].s.push(initSkipNode_1090519310(states_1258291290[0]));;
  framePtr = F.prev;

  return result_1258291253[0];

}

function HEX3DHEX3D_1258291561(x_1258291563, y_1258291564) {
  var result_1258291565 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/comparisons.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 301;
    var sameObject_1258291572 = false;
    F.line = 302;
    sameObject_1258291572 = x_1258291563 === y_1258291564
    if (sameObject_1258291572) {
    F.line = 303;
    result_1258291565 = true;
    break BeforeRet;
    }
    
    if (!(((x_1258291563).length == (y_1258291564).length))) {
    F.line = 306;
    result_1258291565 = false;
    break BeforeRet;
    }
    
    Label1: do {
      F.line = 308;
      var i_1258291586 = 0;
      F.line = 75;
      var colontmp__1509950626 = 0;
      F.line = 308;
      colontmp__1509950626 = subInt((x_1258291563).length, 1);
      F.line = 90;
      var res_1509950627 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_1509950627 <= colontmp__1509950626)) break Label3;
            F.line = 308;
            i_1258291586 = res_1509950627;
            if (!((x_1258291563[chckIndx(i_1258291586, 0, (x_1258291563).length - 1)] == y_1258291564[chckIndx(i_1258291586, 0, (y_1258291564).length - 1)]))) {
            F.line = 310;
            result_1258291565 = false;
            break BeforeRet;
            }
            
            F.line = 93;
            res_1509950627 = addInt(res_1509950627, 1);
          }
      } while (false);
    } while (false);
    F.line = 312;
    result_1258291565 = true;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1258291565;

}

function HEX2A_788529160(x_788529161, order_788529162) {
  var result_788529163 = 0;

  var F = {procname: "algorithm.*", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 64;
    var y_788529168 = subInt(order_788529162, 1);
    F.line = 65;
    result_788529163 = subInt((x_788529161 ^ y_788529168), y_788529168);
  framePtr = F.prev;

  return result_788529163;

}

function mergeAlt_1258291509(a_1258291511, b_1258291512, lo_1258291513, m_1258291514, hi_1258291515, cmp_1258291518, order_1258291519) {
  var F = {procname: "mergeAlt.mergeAlt", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if ((HEX2A_788529160(cmp_1258291518(a_1258291511[chckIndx(m_1258291514, 0, (a_1258291511).length - 1)], a_1258291511[chckIndx(addInt(m_1258291514, 1), 0, (a_1258291511).length - 1)]), order_1258291519) <= 0)) {
    F.line = 331;
    break BeforeRet;
    }
    
    F.line = 332;
    var j_1258291520 = lo_1258291513;
    if (!((j_1258291520 <= m_1258291514))) {
    F.line = 334;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim(334, 10) `j <= m` "));
    }
    
    F.line = 336;
    var bb_1258291526 = 0;
    Label1: do {
      F.line = 337;
        Label2: while (true) {
        if (!(j_1258291520 <= m_1258291514)) break Label2;
          F.line = 338;
          b_1258291512[chckIndx(bb_1258291526, 0, (b_1258291512).length - 1)] = a_1258291511[chckIndx(j_1258291520, 0, (a_1258291511).length - 1)];
          F.line = 339;
          bb_1258291526 = addInt(bb_1258291526, 1);
          F.line = 340;
          j_1258291520 = addInt(j_1258291520, 1);
        }
    } while (false);
    F.line = 344;
    var i_1258291535 = 0;
    F.line = 345;
    var k_1258291536 = lo_1258291513;
    Label3: do {
      F.line = 347;
        Label4: while (true) {
        if (!((k_1258291536 < j_1258291520) && (j_1258291520 <= hi_1258291515))) break Label4;
          if ((HEX2A_788529160(cmp_1258291518(b_1258291512[chckIndx(i_1258291535, 0, (b_1258291512).length - 1)], a_1258291511[chckIndx(j_1258291520, 0, (a_1258291511).length - 1)]), order_1258291519) <= 0)) {
          F.line = 349;
          a_1258291511[chckIndx(k_1258291536, 0, (a_1258291511).length - 1)] = b_1258291512[chckIndx(i_1258291535, 0, (b_1258291512).length - 1)];
          F.line = 350;
          i_1258291535 = addInt(i_1258291535, 1);
          }
          else {
            F.line = 352;
            a_1258291511[chckIndx(k_1258291536, 0, (a_1258291511).length - 1)] = a_1258291511[chckIndx(j_1258291520, 0, (a_1258291511).length - 1)];
            F.line = 353;
            j_1258291520 = addInt(j_1258291520, 1);
          }
          
          F.line = 354;
          k_1258291536 = addInt(k_1258291536, 1);
        }
    } while (false);
    Label5: do {
      F.line = 357;
        Label6: while (true) {
        if (!(k_1258291536 < j_1258291520)) break Label6;
          F.line = 358;
          a_1258291511[chckIndx(k_1258291536, 0, (a_1258291511).length - 1)] = b_1258291512[chckIndx(i_1258291535, 0, (b_1258291512).length - 1)];
          F.line = 359;
          k_1258291536 = addInt(k_1258291536, 1);
          F.line = 360;
          i_1258291535 = addInt(i_1258291535, 1);
        }
    } while (false);
  } while (false);
  framePtr = F.prev;

  
}

function sort_1258291492(a_1258291494, cmp_1258291497, order_1258291498) {
  var F = {procname: "sort.sort", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 407;
    var n_1258291502 = (a_1258291494).length;
    F.line = 408;
    var b_1258291506 = newSeq_1090519430(chckRange(divInt(n_1258291502, 2), 0, 2147483647));
    F.line = 409;
    var s_1258291507 = 1;
    Label1: do {
      F.line = 410;
        Label2: while (true) {
        if (!(s_1258291507 < n_1258291502)) break Label2;
          F.line = 411;
          var m_1258291508 = subInt(subInt(n_1258291502, 1), s_1258291507);
          Label3: do {
            F.line = 412;
              Label4: while (true) {
              if (!(0 <= m_1258291508)) break Label4;
                F.line = 413;
                mergeAlt_1258291509(a_1258291494, b_1258291506, nimMax(addInt(subInt(m_1258291508, s_1258291507), 1), 0), m_1258291508, addInt(m_1258291508, s_1258291507), cmp_1258291497, order_1258291498);
                F.line = 414;
                m_1258291508 = subInt(m_1258291508, mulInt(s_1258291507, 2));
              }
          } while (false);
          F.line = 415;
          s_1258291507 = mulInt(s_1258291507, 2);
        }
    } while (false);
  framePtr = F.prev;

  
}

function sorted_1258291470(a_1258291472, cmp_1258291475, order_1258291476) {
  var result_1258291477 = [];

  var F = {procname: "sorted.sorted", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 444;
    result_1258291477 = nimCopy(null, newSeq_1090519430(chckRange((a_1258291472).length, 0, 2147483647)), NTI1090519307);
    Label1: do {
      F.line = 445;
      var i_1258291491 = 0;
      F.line = 75;
      var colontmp__1509950620 = 0;
      F.line = 445;
      colontmp__1509950620 = (a_1258291472).length - 1;
      F.line = 90;
      var res_1509950621 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_1509950621 <= colontmp__1509950620)) break Label3;
            F.line = 445;
            i_1258291491 = res_1509950621;
            F.line = 445;
            result_1258291477[chckIndx(i_1258291491, 0, (result_1258291477).length - 1)] = a_1258291472[chckIndx(i_1258291491, 0, (a_1258291472).length - 1)];
            F.line = 93;
            res_1509950621 = addInt(res_1509950621, 1);
          }
      } while (false);
    } while (false);
    F.line = 447;
    sort_1258291492(result_1258291477, cmp_1258291475, order_1258291476);
  framePtr = F.prev;

  return result_1258291477;

}

function cmp_1258291463(x_1258291465, y_1258291466) {
  var result_1258291467 = 0;

  var F = {procname: "cmp.cmp", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if ((x_1258291465 == y_1258291466)) {
    F.line = 957;
    result_1258291467 = 0;
    break BeforeRet;
    }
    
    if ((x_1258291465 < y_1258291466)) {
    F.line = 958;
    result_1258291467 = -1;
    break BeforeRet;
    }
    
    F.line = 959;
    result_1258291467 = 1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1258291467;

}

function lonelyLit_1258291382(exp_1258291383) {
            var Temporary3;
    var Temporary4;
                var Temporary9;

  var result_1258291384 = 0;

  var F = {procname: "litopt.lonelyLit", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
  framePtr = F;
    F.line = 142;
    result_1258291384 = -1;
    F.line = 143;
    var litNfa_1258291386 = toLitNfa_1258291251(exp_1258291383);
    F.line = 144;
    var cpSeen_1258291390 = [initHashSet_1090519196(16)];
    F.line = 145;
    var lits_1258291398 = newSeq_1090519430(0);
    F.line = 146;
    var stateIdx_1258291402 = subInt(chckRange((litNfa_1258291386.s).length, -32768, 32767), 1);
    Label1: do {
      F.line = 147;
        Label2: while (true) {
        if (!!((litNfa_1258291386.s[chckIndx(stateIdx_1258291402, 0, (litNfa_1258291386.s).length - 1)].kind == 46))) break Label2;
            if (!(litNfa_1258291386.s[chckIndx(stateIdx_1258291402, 0, (litNfa_1258291386.s).length - 1)].kind == 0)) Temporary3 = false; else {              Temporary3 = (((litNfa_1258291386.s[chckIndx(stateIdx_1258291402, 0, (litNfa_1258291386.s).length - 1)].cp) | 0) <= 127);            }          if (Temporary3) {
          if (!(contains_1275068568(cpSeen_1258291390[0], litNfa_1258291386.s[chckIndx(stateIdx_1258291402, 0, (litNfa_1258291386.s).length - 1)].cp))) {
          F.line = 151;
          incl_1174405785(cpSeen_1258291390[0], litNfa_1258291386.s[chckIndx(stateIdx_1258291402, 0, (litNfa_1258291386.s).length - 1)].cp);
          F.line = 152;
          lits_1258291398.push(stateIdx_1258291402);;
          }
          
          }
          
          if (!(((litNfa_1258291386.s[chckIndx(stateIdx_1258291402, 0, (litNfa_1258291386.s).length - 1)].next).length == 1))) {
          F.line = 153;
          failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(153, 14) `state.next.len == 1` "));
          }
          
          F.line = 154;
          stateIdx_1258291402 = litNfa_1258291386.s[chckIndx(stateIdx_1258291402, 0, (litNfa_1258291386.s).length - 1)].next[chckIndx(0, 0, (litNfa_1258291386.s[chckIndx(stateIdx_1258291402, 0, (litNfa_1258291386.s).length - 1)].next).length - 1)];
        }
    } while (false);
    if (!(HEX3DHEX3D_1258291561(lits_1258291398, sorted_1258291470(lits_1258291398, cmp_1258291463, 1)))) {
    F.line = 155;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(155, 10) `lits == sorted(lits, system.cmp)` "));
    }
    
    F.line = 158;
    if (lits_1258291398.length < (Temporary4 = chckRange(nimMin((lits_1258291398).length, 128), 0, 2147483647), Temporary4)) { for (var i = lits_1258291398.length ; i < Temporary4 ; ++i) lits_1258291398.push(0); }
               else { lits_1258291398.length = Temporary4; };
    F.line = 159;
    var litsTmp_1258291606 = newSeq_1090519430(0);
    Label5: do {
      F.line = 160;
      var ni_1258291612 = 0;
      F.line = 160;
      var n_1258291613 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 168;
      var i_1509950599 = 0;
      F.line = 169;
      var L_1509950600 = (exp_1258291383.s).length;
      Label6: do {
        F.line = 170;
          Label7: while (true) {
          if (!(i_1509950599 < L_1509950600)) break Label7;
            F.line = 160;
            ni_1258291612 = i_1509950599;
            F.line = 160;
            n_1258291613 = nimCopy(n_1258291613, exp_1258291383.s[chckIndx(i_1509950599, 0, (exp_1258291383.s).length - 1)], NTI1090519053);
            Label8: do {
                if (!(-1 < result_1258291384)) Temporary9 = false; else {                  Temporary9 = (addInt(exp_1258291383.s[chckIndx(result_1258291384, 0, (exp_1258291383.s).length - 1)].uid, 1) < n_1258291613.uid);                }              if (Temporary9) {
              F.line = 163;
              break Label5;
              }
              
              if (!((ConstSet53[n_1258291613.kind] != undefined))) {
              F.line = 165;
              break Label8;
              }
              
              Label10: do {
                F.line = 166;
                var nlit_1258291621 = 0;
                F.line = 235;
                var i_1509950595 = 0;
                F.line = 236;
                var L_1509950596 = (lits_1258291398).length;
                Label11: do {
                  F.line = 237;
                    Label12: while (true) {
                    if (!(i_1509950595 < L_1509950596)) break Label12;
                      F.line = 166;
                      nlit_1258291621 = lits_1258291398[chckIndx(i_1509950595, 0, (lits_1258291398).length - 1)];
                      if (!((n_1258291613.uid <= litNfa_1258291386.s[chckIndx(nlit_1258291621, 0, (litNfa_1258291386.s).length - 1)].uid))) {
                      F.line = 167;
                      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(167, 16) `n.uid <= litNfa.s[nlit].uid` "));
                      }
                      
                      if ((n_1258291613.uid == litNfa_1258291386.s[chckIndx(nlit_1258291621, 0, (litNfa_1258291386.s).length - 1)].uid)) {
                      F.line = 169;
                      result_1258291384 = chckRange(ni_1258291612, -32768, 32767);
                      }
                      
                      if (!(match_1275068547(n_1258291613, litNfa_1258291386.s[chckIndx(nlit_1258291621, 0, (litNfa_1258291386.s).length - 1)].cp))) {
                      F.line = 172;
                      litsTmp_1258291606.push(nlit_1258291621);;
                      }
                      
                      F.line = 239;
                      i_1509950595 = addInt(i_1509950595, 1);
                      if (!(((lits_1258291398).length == L_1509950596))) {
                      F.line = 240;
                      failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
              F.line = 173;
              var Temporary13 = lits_1258291398; lits_1258291398 = litsTmp_1258291606; litsTmp_1258291606 = Temporary13;              F.line = 174;
              if (litsTmp_1258291606.length < 0) { for (var i = litsTmp_1258291606.length ; i < 0 ; ++i) litsTmp_1258291606.push(0); }
               else { litsTmp_1258291606.length = 0; };
            } while (false);
            F.line = 172;
            i_1509950599 = addInt(i_1509950599, 1);
            if (!(((exp_1258291383.s).length == L_1509950600))) {
            F.line = 173;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1258291384;

}

function prefix_1258291657(eNfa_1258291658, uid_1258291659) {
  var result_1258291660 = ({s: []});

  var F = {procname: "litopt.prefix", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
  framePtr = F;
    F.line = 178;
    result_1258291660 = nimCopy(result_1258291660, eNfa_1258291658, NTI1090519045);
    Label1: do {
      F.line = 179;
      var n_1258291665 = null;
      F.line = 244;
      var i_436212985 = 0;
      F.line = 245;
      var L_436212986 = (result_1258291660.s).length;
      Label2: do {
        F.line = 246;
          Label3: while (true) {
          if (!(i_436212985 < L_436212986)) break Label3;
            F.line = 179;
            n_1258291665 = result_1258291660.s[chckIndx(i_436212985, 0, (result_1258291660.s).length - 1)];
            F.line = 179;
            if (n_1258291665.next.length < 0) { for (var i = n_1258291665.next.length ; i < 0 ; ++i) n_1258291665.next.push(0); }
               else { n_1258291665.next.length = 0; };
            F.line = 248;
            i_436212985 = addInt(i_436212985, 1);
            if (!(((result_1258291660.s).length == L_436212986))) {
            F.line = 249;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 182;
    var stack_1258291677 = [[nimCopy(null, {Field0: subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1), Field1: -1}, NTI1258291610)]];
    F.line = 183;
    var visited_1258291678 = {};
    Label4: do {
      F.line = 185;
        Label5: while (true) {
        if (!(0 < (stack_1258291677[0]).length)) break Label5;
          Label6: do {
            F.line = 186;
            var colontmp__436213016 = pop_1325400987(stack_1258291677, 0);
            F.line = 186;
            var ni_1258291686 = colontmp__436213016["Field0"];
            F.line = 186;
            var pi_1258291687 = colontmp__436213016["Field1"];
            if ((-1 < pi_1258291687)) {
            F.line = 188;
            result_1258291660.s[chckIndx(ni_1258291686, 0, (result_1258291660.s).length - 1)].next.push(pi_1258291687);;
            }
            
            if ((visited_1258291678[ni_1258291686] != undefined)) {
            F.line = 190;
            break Label6;
            }
            
            F.line = 191;
            visited_1258291678[ni_1258291686] = true;
            if ((eNfa_1258291658.s[chckIndx(ni_1258291686, 0, (eNfa_1258291658.s).length - 1)].uid == uid_1258291659)) {
            F.line = 194;
            break Label6;
            }
            
            Label7: do {
              F.line = 195;
              var mi_1258291703 = 0;
              F.line = 233;
              var colontmp__436212991 = [];
              F.line = 195;
              colontmp__436212991 = eNfa_1258291658.s[chckIndx(ni_1258291686, 0, (eNfa_1258291658.s).length - 1)].next;
              F.line = 235;
              var i_436212992 = 0;
              F.line = 236;
              var L_436212993 = (colontmp__436212991).length;
              Label8: do {
                F.line = 237;
                  Label9: while (true) {
                  if (!(i_436212992 < L_436212993)) break Label9;
                    F.line = 195;
                    mi_1258291703 = colontmp__436212991[chckIndx(i_436212992, 0, (colontmp__436212991).length - 1)];
                    F.line = 195;
                    stack_1258291677[0].push({Field0: mi_1258291703, Field1: ni_1258291686});;
                    F.line = 239;
                    i_436212992 = addInt(i_436212992, 1);
                    if (!(((colontmp__436212991).length == L_436212993))) {
                    F.line = 240;
                    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
          } while (false);
        }
    } while (false);
    Label10: do {
      F.line = 197;
      var n_1258291711 = null;
      F.line = 244;
      var i_436212996 = 0;
      F.line = 245;
      var L_436212997 = (result_1258291660.s).length;
      Label11: do {
        F.line = 246;
          Label12: while (true) {
          if (!(i_436212996 < L_436212997)) break Label12;
            F.line = 197;
            n_1258291711 = result_1258291660.s[chckIndx(i_436212996, 0, (result_1258291660.s).length - 1)];
            F.line = 197;
            reverse_1325401034(n_1258291711.next);
            F.line = 199;
            n_1258291711.isGreedy = true;
            F.line = 248;
            i_436212996 = addInt(i_436212996, 1);
            if (!(((result_1258291660.s).length == L_436212997))) {
            F.line = 249;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    F.line = 201;
    var eoeIdx_1258291715 = -1;
    Label13: do {
      F.line = 202;
      var ni_1258291721 = 0;
      F.line = 202;
      var n_1258291722 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 168;
      var i_436213000 = 0;
      F.line = 169;
      var L_436213001 = (result_1258291660.s).length;
      Label14: do {
        F.line = 170;
          Label15: while (true) {
          if (!(i_436213000 < L_436213001)) break Label15;
            F.line = 202;
            ni_1258291721 = i_436213000;
            F.line = 202;
            n_1258291722 = nimCopy(n_1258291722, result_1258291660.s[chckIndx(i_436213000, 0, (result_1258291660.s).length - 1)], NTI1090519053);
            if ((n_1258291722.kind == 46)) {
            if (!((eoeIdx_1258291715 == -1))) {
            F.line = 204;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(204, 16) `eoeIdx == -1` "));
            }
            
            F.line = 205;
            eoeIdx_1258291715 = chckRange(ni_1258291721, -32768, 32767);
            }
            
            F.line = 172;
            i_436213000 = addInt(i_436213000, 1);
            if (!(((result_1258291660.s).length == L_436213001))) {
            F.line = 173;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (!(!((eoeIdx_1258291715 == -1)))) {
    F.line = 206;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(206, 12) `eoeIdx != -1` "));
    }
    
    Label16: do {
      F.line = 207;
      var ni_1258291743 = 0;
      F.line = 233;
      var colontmp__436213008 = [];
      F.line = 207;
      colontmp__436213008 = eNfa_1258291658.s[chckIndx(subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1), 0, (eNfa_1258291658.s).length - 1)].next;
      F.line = 235;
      var i_436213009 = 0;
      F.line = 236;
      var L_436213010 = (colontmp__436213008).length;
      Label17: do {
        F.line = 237;
          Label18: while (true) {
          if (!(i_436213009 < L_436213010)) break Label18;
            F.line = 207;
            ni_1258291743 = colontmp__436213008[chckIndx(i_436213009, 0, (colontmp__436213008).length - 1)];
            Label19: do {
              F.line = 208;
              var i_1258291751 = 0;
              F.line = 75;
              var colontmp__436213005 = 0;
              F.line = 208;
              colontmp__436213005 = subInt((result_1258291660.s[chckIndx(ni_1258291743, 0, (result_1258291660.s).length - 1)].next).length, 1);
              F.line = 90;
              var res_436213006 = 0;
              Label20: do {
                F.line = 91;
                  Label21: while (true) {
                  if (!(res_436213006 <= colontmp__436213005)) break Label21;
                    F.line = 208;
                    i_1258291751 = res_436213006;
                    if ((result_1258291660.s[chckIndx(ni_1258291743, 0, (result_1258291660.s).length - 1)].next[chckIndx(i_1258291751, 0, (result_1258291660.s[chckIndx(ni_1258291743, 0, (result_1258291660.s).length - 1)].next).length - 1)] == subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1))) {
                    F.line = 210;
                    result_1258291660.s[chckIndx(ni_1258291743, 0, (result_1258291660.s).length - 1)].next[chckIndx(i_1258291751, 0, (result_1258291660.s[chckIndx(ni_1258291743, 0, (result_1258291660.s).length - 1)].next).length - 1)] = eoeIdx_1258291715;
                    }
                    
                    F.line = 93;
                    res_436213006 = addInt(res_436213006, 1);
                  }
              } while (false);
            } while (false);
            F.line = 239;
            i_436213009 = addInt(i_436213009, 1);
            if (!(((colontmp__436213008).length == L_436213010))) {
            F.line = 240;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (!((result_1258291660.s[chckIndx(eoeIdx_1258291715, 0, (result_1258291660.s).length - 1)].kind == 46))) {
    F.line = 211;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(211, 12) `result.s[eoeIdx].kind == reEoe` "));
    }
    
    if (!((result_1258291660.s[chckIndx(subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1), 0, (result_1258291660.s).length - 1)].kind == 45))) {
    F.line = 212;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(212, 12) `result.s[state0].kind == reSkip` "));
    }
    
    F.line = 213;
    var Temporary22 = result_1258291660.s[chckIndx(subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1), 0, (result_1258291660.s).length - 1)].kind; result_1258291660.s[chckIndx(subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1), 0, (result_1258291660.s).length - 1)].kind = result_1258291660.s[chckIndx(eoeIdx_1258291715, 0, (result_1258291660.s).length - 1)].kind; result_1258291660.s[chckIndx(eoeIdx_1258291715, 0, (result_1258291660.s).length - 1)].kind = Temporary22;    F.line = 214;
    var Temporary23 = result_1258291660.s[chckIndx(subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1), 0, (result_1258291660.s).length - 1)]; result_1258291660.s[chckIndx(subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1), 0, (result_1258291660.s).length - 1)] = result_1258291660.s[chckIndx(eoeIdx_1258291715, 0, (result_1258291660.s).length - 1)]; result_1258291660.s[chckIndx(eoeIdx_1258291715, 0, (result_1258291660.s).length - 1)] = Temporary23;    F.line = 216;
    var nIdx_1258291790 = -1;
    Label24: do {
      F.line = 217;
      var ni_1258291796 = 0;
      F.line = 217;
      var n_1258291797 = ({kind: 0, cp: 0, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: ({data: [], counter: 0}), ranges: [], shorthands: [], cc: 0, subExp: ({nfa: ({s: [], t: ({allZ: [], z: []})}), rpn: ({s: []}), reverseCapts: false})});
      F.line = 168;
      var i_436213013 = 0;
      F.line = 169;
      var L_436213014 = (eNfa_1258291658.s).length;
      Label25: do {
        F.line = 170;
          Label26: while (true) {
          if (!(i_436213013 < L_436213014)) break Label26;
            F.line = 217;
            ni_1258291796 = i_436213013;
            F.line = 217;
            n_1258291797 = nimCopy(n_1258291797, eNfa_1258291658.s[chckIndx(i_436213013, 0, (eNfa_1258291658.s).length - 1)], NTI1090519053);
            if ((n_1258291797.uid == uid_1258291659)) {
            if (!((nIdx_1258291790 == -1))) {
            F.line = 219;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(219, 16) `nIdx == -1` "));
            }
            
            F.line = 220;
            nIdx_1258291790 = ni_1258291796;
            }
            
            F.line = 172;
            i_436213013 = addInt(i_436213013, 1);
            if (!(((eNfa_1258291658.s).length == L_436213014))) {
            F.line = 173;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (!(!((nIdx_1258291790 == -1)))) {
    F.line = 221;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim(221, 12) `nIdx != -1` "));
    }
    
    F.line = 222;
    result_1258291660.s[chckIndx(subInt(chckRange((eNfa_1258291658.s).length, -32768, 32767), 1), 0, (result_1258291660.s).length - 1)].next = nimCopy(null, result_1258291660.s[chckIndx(nIdx_1258291790, 0, (result_1258291660.s).length - 1)].next, NTI1090519062);
  framePtr = F.prev;

  return result_1258291660;

}

function litopt2_1258291820(exp_1258291821) {
  var result_1258291822 = ({lit: 0, nfa: ({s: [], t: ({allZ: [], z: []})})});

  var F = {procname: "litopt.litopt2", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/litopt.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 234;
    var litIdx_1258291824 = lonelyLit_1258291382(exp_1258291821);
    if ((litIdx_1258291824 == -1)) {
    F.line = 236;
    break BeforeRet;
    }
    
    F.line = 237;
    result_1258291822.lit = exp_1258291821.s[chckIndx(litIdx_1258291824, 0, (exp_1258291821.s).length - 1)].cp;
    F.line = 242;
    result_1258291822.nfa = nimCopy(result_1258291822.nfa, eRemoval_1325400614(prefix_1258291657(eNfa_1325400184(subExps_1325401212(exp_1258291821)), exp_1258291821.s[chckIndx(litIdx_1258291824, 0, (exp_1258291821.s).length - 1)].uid)), NTI1090519049);
  } while (false);
  framePtr = F.prev;

  return result_1258291822;

}

function reImpl_1157627911(s_1157627912) {
  var result_1157627913 = ({nfa: ({s: [], t: ({allZ: [], z: []})}), groupsCount: 0, namedGroups: ({data: [], counter: 0, first: 0, last: 0}), litOpt: ({lit: 0, nfa: ({s: [], t: ({allZ: [], z: []})})})});

  var F = {procname: "compiler.reImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/compiler.nim", line: 0};
  framePtr = F;
    F.line = 11;
    var groups_1157627914 = [({count: 0, names: ({data: [], counter: 0, first: 0, last: 0})})];
    F.line = 12;
    var rpn_1157627915 = transformExp_1224739880(parse_1174407031(s_1157627912), groups_1157627914[0]);
    F.line = 15;
    var nfa_1157627916 = nfa2_1325401242(rpn_1157627915);
    F.line = 16;
    var opt_1157627917 = litopt2_1258291820(rpn_1157627915);
    F.line = 17;
    result_1157627913 = nimCopy(result_1157627913, {nfa: nimCopy(null, nfa_1157627916, NTI1090519049), groupsCount: groups_1157627914[0].count, namedGroups: nimCopy(null, groups_1157627914[0].names, NTI1224736906), litOpt: nimCopy(null, opt_1157627917, NTI1258291715)}, NTI1241514194);
  framePtr = F.prev;

  return result_1157627913;

}

function re_1056964626(s_1056964627) {
  var result_1056964628 = ({nfa: ({s: [], t: ({allZ: [], z: []})}), groupsCount: 0, namedGroups: ({data: [], counter: 0, first: 0, last: 0}), litOpt: ({lit: 0, nfa: ({s: [], t: ({allZ: [], z: []})})})});

  var F = {procname: "regex.re", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 277;
    result_1056964628 = nimCopy(result_1056964628, reImpl_1157627911(s_1056964627), NTI1241514194);
  framePtr = F.prev;

  return result_1056964628;

}

function nuctoLowerStr(s_838862834) {
  var result_838862835 = [];

  var F = {procname: "unicode.toLower", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/unicode.nim", line: 0};
  framePtr = F;
    F.line = 648;
    result_838862835 = nimCopy(null, mnewString(chckRange((s_838862834).length, 0, 2147483647)), NTI33554439);
    F.line = 650;
    var iHEX60gensym394_838862839 = 0;
    F.line = 651;
    var resultIndexHEX60gensym394_838862840 = 0;
    F.line = 652;
    var runeHEX60gensym394_838862841 = 0;
    Label1: do {
      F.line = 670;
        Label2: while (true) {
        if (!(iHEX60gensym394_838862839 < (s_838862834).length)) break Label2;
          if ((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] <= 127)) {
          F.line = 81;
          runeHEX60gensym394_838862841 = chckRange(s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)], -2147483648, 2147483647);
          F.line = 82;
          iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 1);
          }
          else {
          if (((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] >>> 5) == 6)) {
          if ((iHEX60gensym394_838862839 <= subInt((s_838862834).length, 2))) {
          F.line = 86;
          runeHEX60gensym394_838862841 = chckRange((((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] & 31) << 6) | (s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 1), 0, (s_838862834).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 88;
          iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 2);
          }
          else {
            F.line = 90;
            runeHEX60gensym394_838862841 = 65533;
            F.line = 91;
            iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 1);
          }
          
          }
          else {
          if (((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] >>> 4) == 14)) {
          if ((iHEX60gensym394_838862839 <= subInt((s_838862834).length, 3))) {
          F.line = 96;
          runeHEX60gensym394_838862841 = chckRange(((((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] & 15) << 12) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 1), 0, (s_838862834).length - 1)] & 63) << 6)) | (s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 2), 0, (s_838862834).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 99;
          iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 3);
          }
          else {
            F.line = 101;
            runeHEX60gensym394_838862841 = 65533;
            F.line = 102;
            iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 1);
          }
          
          }
          else {
          if (((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] >>> 3) == 30)) {
          if ((iHEX60gensym394_838862839 <= subInt((s_838862834).length, 4))) {
          F.line = 108;
          runeHEX60gensym394_838862841 = chckRange((((((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] & 7) << 18) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 1), 0, (s_838862834).length - 1)] & 63) << 12)) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 2), 0, (s_838862834).length - 1)] & 63) << 6)) | (s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 3), 0, (s_838862834).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 112;
          iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 4);
          }
          else {
            F.line = 114;
            runeHEX60gensym394_838862841 = 65533;
            F.line = 115;
            iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 1);
          }
          
          }
          else {
          if (((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] >>> 2) == 62)) {
          if ((iHEX60gensym394_838862839 <= subInt((s_838862834).length, 5))) {
          F.line = 122;
          runeHEX60gensym394_838862841 = chckRange(((((((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] & 3) << 24) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 1), 0, (s_838862834).length - 1)] & 63) << 18)) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 2), 0, (s_838862834).length - 1)] & 63) << 12)) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 3), 0, (s_838862834).length - 1)] & 63) << 6)) | (s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 4), 0, (s_838862834).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 127;
          iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 5);
          }
          else {
            F.line = 129;
            runeHEX60gensym394_838862841 = 65533;
            F.line = 130;
            iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 1);
          }
          
          }
          else {
          if (((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] >>> 1) == 126)) {
          if ((iHEX60gensym394_838862839 <= subInt((s_838862834).length, 6))) {
          F.line = 138;
          runeHEX60gensym394_838862841 = chckRange((((((((s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)] & 1) << 30) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 1), 0, (s_838862834).length - 1)] & 63) << 24)) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 2), 0, (s_838862834).length - 1)] & 63) << 18)) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 3), 0, (s_838862834).length - 1)] & 63) << 12)) | ((s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 4), 0, (s_838862834).length - 1)] & 63) << 6)) | (s_838862834[chckIndx(addInt(iHEX60gensym394_838862839, 5), 0, (s_838862834).length - 1)] & 63)), -2147483648, 2147483647);
          F.line = 144;
          iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 6);
          }
          else {
            F.line = 146;
            runeHEX60gensym394_838862841 = 65533;
            F.line = 147;
            iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 1);
          }
          
          }
          else {
            F.line = 149;
            runeHEX60gensym394_838862841 = chckRange(s_838862834[chckIndx(iHEX60gensym394_838862839, 0, (s_838862834).length - 1)], -2147483648, 2147483647);
            F.line = 150;
            iHEX60gensym394_838862839 = addInt(iHEX60gensym394_838862839, 1);
          }
          }}}}}
          F.line = 655;
          runeHEX60gensym394_838862841 = nuctoLower(runeHEX60gensym394_838862841);
          F.line = 211;
          var iHEX60gensym444_838863051 = runeHEX60gensym394_838862841;
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_838863051, 127)) {
          F.line = 213;
          (result_838862835.length = chckRange(addInt(resultIndexHEX60gensym394_838862840, 1), 0, 2147483647));
          F.line = 214;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 0), 0, (result_838862835).length - 1)] = chckRange(iHEX60gensym444_838863051, 0, 255);
          F.line = 215;
          resultIndexHEX60gensym394_838862840 = addInt(resultIndexHEX60gensym394_838862840, 1);
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_838863051, 2047)) {
          F.line = 217;
          (result_838862835.length = chckRange(addInt(resultIndexHEX60gensym394_838862840, 2), 0, 2147483647));
          F.line = 218;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 0), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 >> 6) | 192), 0, 255);
          F.line = 219;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 1), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 & 63) | 128), 0, 255);
          F.line = 220;
          resultIndexHEX60gensym394_838862840 = addInt(resultIndexHEX60gensym394_838862840, 2);
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_838863051, 65535)) {
          F.line = 222;
          (result_838862835.length = chckRange(addInt(resultIndexHEX60gensym394_838862840, 3), 0, 2147483647));
          F.line = 223;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 0), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 >> 12) | 224), 0, 255);
          F.line = 224;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 1), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 6) & 63) | 128), 0, 255);
          F.line = 225;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 2), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 & 63) | 128), 0, 255);
          F.line = 226;
          resultIndexHEX60gensym394_838862840 = addInt(resultIndexHEX60gensym394_838862840, 3);
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_838863051, 2097151)) {
          F.line = 228;
          (result_838862835.length = chckRange(addInt(resultIndexHEX60gensym394_838862840, 4), 0, 2147483647));
          F.line = 229;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 0), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 >> 18) | 240), 0, 255);
          F.line = 230;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 1), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 12) & 63) | 128), 0, 255);
          F.line = 231;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 2), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 6) & 63) | 128), 0, 255);
          F.line = 232;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 3), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 & 63) | 128), 0, 255);
          F.line = 233;
          resultIndexHEX60gensym394_838862840 = addInt(resultIndexHEX60gensym394_838862840, 4);
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_838863051, 67108863)) {
          F.line = 235;
          (result_838862835.length = chckRange(addInt(resultIndexHEX60gensym394_838862840, 5), 0, 2147483647));
          F.line = 236;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 0), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 >> 24) | 248), 0, 255);
          F.line = 237;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 1), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 18) & 63) | 128), 0, 255);
          F.line = 238;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 2), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 12) & 63) | 128), 0, 255);
          F.line = 239;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 3), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 6) & 63) | 128), 0, 255);
          F.line = 240;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 4), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 & 63) | 128), 0, 255);
          F.line = 241;
          resultIndexHEX60gensym394_838862840 = addInt(resultIndexHEX60gensym394_838862840, 5);
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_838863051, 2147483647)) {
          F.line = 243;
          (result_838862835.length = chckRange(addInt(resultIndexHEX60gensym394_838862840, 6), 0, 2147483647));
          F.line = 244;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 0), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 >> 30) | 252), 0, 255);
          F.line = 245;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 1), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 24) & 63) | 128), 0, 255);
          F.line = 246;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 2), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 18) & 63) | 128), 0, 255);
          F.line = 247;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 3), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 12) & 63) | 128), 0, 255);
          F.line = 248;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 4), 0, (result_838862835).length - 1)] = chckRange((((iHEX60gensym444_838863051 >> 6) & 63) | 128), 0, 255);
          F.line = 249;
          result_838862835[chckIndx(addInt(resultIndexHEX60gensym394_838862840, 5), 0, (result_838862835).length - 1)] = chckRange(((iHEX60gensym444_838863051 & 63) | 128), 0, 255);
          F.line = 250;
          resultIndexHEX60gensym394_838862840 = addInt(resultIndexHEX60gensym394_838862840, 6);
          }
          else {
          }
          }}}}}
        }
    } while (false);
  framePtr = F.prev;

  return result_838862835;

}

function initTable_436208024(initialSize_436208027) {
  var result_436208028 = ({data: [], counter: 0});

  var F = {procname: "initTable.initTable", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 163;
    var correctSizeHEX60gensym36_436208030 = slotsNeeded_1023410218(chckRange(initialSize_436208027, 0, 2147483647));
    F.line = 167;
    result_436208028.counter = 0;
    F.line = 168;
    result_436208028.data = new Array(chckRange(correctSizeHEX60gensym36_436208030, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym36_436208030, 0, 2147483647) ; ++i) { result_436208028.data[i] = {Field0: 0, Field1: [], Field2: null}; }  framePtr = F.prev;

  return result_436208028;

}

function rawGet_436208173(t_436208176, key_436208177, hc_436208178, hc_436208178_Idx) {
            var Temporary3;

  var result_436208179 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 64;
    hc_436208178[hc_436208178_Idx] = hash_973078950(key_436208177);
    if ((hc_436208178[hc_436208178_Idx] == 0)) {
    F.line = 66;
    hc_436208178[hc_436208178_Idx] = 314159265;
    }
    
    if (((t_436208176.data).length == 0)) {
    F.line = 48;
    result_436208179 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_436208241 = (hc_436208178[hc_436208178_Idx] & (t_436208176.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_1023410207(t_436208176.data[chckIndx(h_436208241, 0, (t_436208176.data).length - 1)].Field0)) break Label2;
            if (!(t_436208176.data[chckIndx(h_436208241, 0, (t_436208176.data).length - 1)].Field0 == hc_436208178[hc_436208178_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_436208176.data[chckIndx(h_436208241, 0, (t_436208176.data).length - 1)].Field1, key_436208177);            }          if (Temporary3) {
          F.line = 56;
          result_436208179 = h_436208241;
          break BeforeRet;
          }
          
          F.line = 57;
          h_436208241 = nextTry_1023410210(h_436208241, (t_436208176.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_436208179 = subInt(-1, h_436208241);
  } while (false);
  framePtr = F.prev;

  return result_436208179;

}

function mustRehash_436208547(t_436208549) {
  var result_436208550 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_436208549.counter < (t_436208549.data).length))) {
    F.line = 29;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 30;
    result_436208550 = ((mulInt((t_436208549.data).length, 2) < mulInt(t_436208549.counter, 3)) || (subInt((t_436208549.data).length, t_436208549.counter) < 4));
  framePtr = F.prev;

  return result_436208550;

}

function rawInsert_436209056(t_436209060, data_436209061, data_436209061_Idx, key_436209062, val_436209063, hc_436209064, h_436209065) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 22;
    data_436209061[data_436209061_Idx][chckIndx(h_436209065, 0, (data_436209061[data_436209061_Idx]).length - 1)].Field1 = nimCopy(null, key_436209062, NTI33554439);
    F.line = 23;
    data_436209061[data_436209061_Idx][chckIndx(h_436209065, 0, (data_436209061[data_436209061_Idx]).length - 1)].Field2 = val_436209063;
    F.line = 24;
    data_436209061[data_436209061_Idx][chckIndx(h_436209065, 0, (data_436209061[data_436209061_Idx]).length - 1)].Field0 = hc_436209064;
  framePtr = F.prev;

  
}

function enlarge_436208735(t_436208738) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 249;
    var n_436208741 = [];
    F.line = 250;
    n_436208741 = new Array(chckRange(mulInt((t_436208738.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_436208738.data).length, 2), 0, 2147483647) ; ++i) { n_436208741[i] = {Field0: 0, Field1: [], Field2: null}; }    F.line = 251;
    var Temporary1 = t_436208738.data; t_436208738.data = n_436208741; n_436208741 = Temporary1;    Label2: do {
      F.line = 252;
      var i_436208816 = 0;
      F.line = 43;
      var colontmp__436213025 = 0;
      F.line = 252;
      colontmp__436213025 = (n_436208741).length - 1;
      F.line = 65;
      var res_436213026 = 0;
      Label3: do {
        F.line = 66;
          Label4: while (true) {
          if (!(res_436213026 <= colontmp__436213025)) break Label4;
            F.line = 252;
            i_436208816 = res_436213026;
            F.line = 253;
            var eh_436208874 = n_436208741[chckIndx(i_436208816, 0, (n_436208741).length - 1)].Field0;
            if (isFilled_1023410207(eh_436208874)) {
            F.line = 255;
            var j_436208878 = (eh_436208874 & (t_436208738.data).length - 1);
            Label5: do {
              F.line = 256;
                Label6: while (true) {
                if (!isFilled_1023410207(t_436208738.data[chckIndx(j_436208878, 0, (t_436208738.data).length - 1)].Field0)) break Label6;
                  F.line = 257;
                  j_436208878 = nextTry_1023410210(j_436208878, (t_436208738.data).length - 1);
                }
            } while (false);
            F.line = 259;
            rawInsert_436209056(t_436208738, t_436208738, "data", n_436208741[chckIndx(i_436208816, 0, (n_436208741).length - 1)].Field1, n_436208741[chckIndx(i_436208816, 0, (n_436208741).length - 1)].Field2, eh_436208874, j_436208878);
            }
            
            F.line = 68;
            res_436213026 = addInt(res_436213026, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function rawGetKnownHC_436209247(t_436209250, key_436209251, hc_436209252) {
  var result_436209253 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (((t_436209250.data).length == 0)) {
    F.line = 48;
    result_436209253 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_436209315 = (hc_436209252 & (t_436209250.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_1023410207(t_436209250.data[chckIndx(h_436209315, 0, (t_436209250.data).length - 1)].Field0)) break Label2;
          if (((t_436209250.data[chckIndx(h_436209315, 0, (t_436209250.data).length - 1)].Field0 == hc_436209252) && eqStrings(t_436209250.data[chckIndx(h_436209315, 0, (t_436209250.data).length - 1)].Field1, key_436209251))) {
          F.line = 56;
          result_436209253 = h_436209315;
          break BeforeRet;
          }
          
          F.line = 57;
          h_436209315 = nextTry_1023410210(h_436209315, (t_436209250.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_436209253 = subInt(-1, h_436209315);
  } while (false);
  framePtr = F.prev;

  return result_436209253;

}

function HEX5BHEX5DHEX3D_436208101(t_436208104, key_436208105, val_436208106) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_436208104.data).length == 0)) {
    F.line = 163;
    var correctSizeHEX60gensym39_436208167 = slotsNeeded_1023410218(32);
    F.line = 167;
    t_436208104.counter = 0;
    F.line = 168;
    t_436208104.data = new Array(chckRange(correctSizeHEX60gensym39_436208167, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym39_436208167, 0, 2147483647) ; ++i) { t_436208104.data[i] = {Field0: 0, Field1: [], Field2: null}; }    }
    
    F.line = 57;
    var hc_436208172 = [0];
    F.line = 58;
    var index_436208425 = rawGet_436208173(t_436208104, key_436208105, hc_436208172, 0);
    if ((0 <= index_436208425)) {
    F.line = 59;
    t_436208104.data[chckIndx(index_436208425, 0, (t_436208104.data).length - 1)].Field2 = val_436208106;
    }
    else {
      if (((t_436208104.data).length == 0)) {
      F.line = 163;
      var correctSizeHEX60gensym44_436208542 = slotsNeeded_1023410218(32);
      F.line = 167;
      t_436208104.counter = 0;
      F.line = 168;
      t_436208104.data = new Array(chckRange(correctSizeHEX60gensym44_436208542, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym44_436208542, 0, 2147483647) ; ++i) { t_436208104.data[i] = {Field0: 0, Field1: [], Field2: null}; }      }
      
      if (mustRehash_436208547(t_436208104)) {
      F.line = 49;
      enlarge_436208735(t_436208104);
      F.line = 50;
      index_436208425 = rawGetKnownHC_436209247(t_436208104, key_436208105, hc_436208172[0]);
      }
      
      F.line = 51;
      index_436208425 = subInt(-1, index_436208425);
      F.line = 52;
      rawInsert_436209056(t_436208104, t_436208104, "data", key_436208105, val_436208106, hc_436208172[0], index_436208425);
      F.line = 60;
      t_436208104.counter = addInt(t_436208104.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function toTable_436208014(pairs_436208017) {
  var result_436208023 = [({data: [], counter: 0})];

  var F = {procname: "toTable.toTable", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 314;
    result_436208023[0] = nimCopy(result_436208023[0], initTable_436208024((pairs_436208017).length), NTI436208078);
    Label1: do {
      F.line = 315;
      var key_436208059 = [];
      F.line = 315;
      var val_436208060 = null;
      F.line = 8;
      var i_436213020 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_436213020 < (pairs_436208017).length)) break Label3;
            F.line = 315;
            key_436208059 = pairs_436208017[chckIndx(i_436213020, 0, (pairs_436208017).length - 1)]["Field0"];
            F.line = 315;
            val_436208060 = pairs_436208017[chckIndx(i_436213020, 0, (pairs_436208017).length - 1)]["Field1"];
            F.line = 315;
            HEX5BHEX5DHEX3D_436208101(result_436208023[0], key_436208059, val_436208060);
            F.line = 11;
            i_436213020 = addInt(i_436213020, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_436208023[0];

}

function HEX5BHEX5D_838861676(s_838861679, x_838861680) {
  var result_838861681 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2563;
    var a_838861683 = x_838861680.a;
    F.line = 2564;
    var L_838861685 = addInt(subInt(x_838861680.b, a_838861683), 1);
    F.line = 2565;
    result_838861681 = nimCopy(null, mnewString(chckRange(L_838861685, 0, 2147483647)), NTI33554439);
    Label1: do {
      F.line = 2566;
      var i_838861690 = 0;
      F.line = 119;
      var i_436213030 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436213030 < L_838861685)) break Label3;
            F.line = 2566;
            i_838861690 = i_436213030;
            F.line = 2566;
            result_838861681[chckIndx(i_838861690, 0, (result_838861681).length - 1)] = s_838861679[chckIndx(addInt(i_838861690, a_838861683), 0, (s_838861679).length - 1)];
            F.line = 122;
            i_436213030 = addInt(i_436213030, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_838861681;

}

function rawGet_1509949659(t_1509949662, key_1509949663, hc_1509949664, hc_1509949664_Idx) {
            var Temporary3;

  var result_1509949665 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 64;
    hc_1509949664[hc_1509949664_Idx] = hash_973078950(key_1509949663);
    if ((hc_1509949664[hc_1509949664_Idx] == 0)) {
    F.line = 66;
    hc_1509949664[hc_1509949664_Idx] = 314159265;
    }
    
    if (((t_1509949662.data).length == 0)) {
    F.line = 48;
    result_1509949665 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_1509949687 = (hc_1509949664[hc_1509949664_Idx] & (t_1509949662.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_956301350(t_1509949662.data[chckIndx(h_1509949687, 0, (t_1509949662.data).length - 1)].Field0)) break Label2;
            if (!(t_1509949662.data[chckIndx(h_1509949687, 0, (t_1509949662.data).length - 1)].Field0 == hc_1509949664[hc_1509949664_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_1509949662.data[chckIndx(h_1509949687, 0, (t_1509949662.data).length - 1)].Field1, key_1509949663);            }          if (Temporary3) {
          F.line = 56;
          result_1509949665 = h_1509949687;
          break BeforeRet;
          }
          
          F.line = 57;
          h_1509949687 = nextTry_956301353(h_1509949687, (t_1509949662.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_1509949665 = subInt(-1, h_1509949687);
  } while (false);
  framePtr = F.prev;

  return result_1509949665;

}

function contains_1509950728(s_1509950730, key_1509950731) {
  var result_1509950732 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 163;
    var hc_1509950733 = [0];
    F.line = 164;
    var index_1509950747 = rawGet_1509949659(s_1509950730, key_1509950731, hc_1509950733, 0);
    F.line = 165;
    result_1509950732 = (0 <= index_1509950747);
  framePtr = F.prev;

  return result_1509950732;

}

function init_1509949557(s_1509949559, initialSize_1509949560) {
  var F = {procname: "init.init", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 19;
    var correctSizeHEX60gensym0_1509949562 = slotsNeeded_956301361(chckRange(initialSize_1509949560, 0, 2147483647));
    F.line = 23;
    s_1509949559.counter = 0;
    F.line = 110;
    s_1509949559.data = new Array(chckRange(correctSizeHEX60gensym0_1509949562, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym0_1509949562, 0, 2147483647) ; ++i) { s_1509949559.data[i] = {Field0: 0, Field1: []}; }  framePtr = F.prev;

  
}

function initHashSet_1509949549(initialSize_1509949551) {
  var result_1509949552 = [({data: [], counter: 0})];

  var F = {procname: "initHashSet.initHashSet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 129;
    init_1509949557(result_1509949552[0], initialSize_1509949551);
  framePtr = F.prev;

  return result_1509949552[0];

}

function mustRehash_1509949713(t_1509949715) {
  var result_1509949716 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_1509949715.counter < (t_1509949715.data).length))) {
    F.line = 29;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 30;
    result_1509949716 = ((mulInt((t_1509949715.data).length, 2) < mulInt(t_1509949715.counter, 3)) || (subInt((t_1509949715.data).length, t_1509949715.counter) < 4));
  framePtr = F.prev;

  return result_1509949716;

}

function rawGetKnownHC_1509949839(t_1509949842, key_1509949843, hc_1509949844) {
  var result_1509949845 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (((t_1509949842.data).length == 0)) {
    F.line = 48;
    result_1509949845 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_1509949867 = (hc_1509949844 & (t_1509949842.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_956301350(t_1509949842.data[chckIndx(h_1509949867, 0, (t_1509949842.data).length - 1)].Field0)) break Label2;
          if (((t_1509949842.data[chckIndx(h_1509949867, 0, (t_1509949842.data).length - 1)].Field0 == hc_1509949844) && eqStrings(t_1509949842.data[chckIndx(h_1509949867, 0, (t_1509949842.data).length - 1)].Field1, key_1509949843))) {
          F.line = 56;
          result_1509949845 = h_1509949867;
          break BeforeRet;
          }
          
          F.line = 57;
          h_1509949867 = nextTry_956301353(h_1509949867, (t_1509949842.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_1509949845 = subInt(-1, h_1509949867);
  } while (false);
  framePtr = F.prev;

  return result_1509949845;

}

function rawInsert_1509949896(s_1509949898, data_1509949899, data_1509949899_Idx, key_1509949900, hc_1509949901, h_1509949902) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/setimpl.nim", line: 0};
  framePtr = F;
    if (((data_1509949899[data_1509949899_Idx]).length == 0)) {
    F.line = 19;
    var correctSizeHEX60gensym10_1509949922 = slotsNeeded_956301361(64);
    F.line = 23;
    s_1509949898.counter = 0;
    F.line = 28;
    s_1509949898.data = new Array(chckRange(correctSizeHEX60gensym10_1509949922, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym10_1509949922, 0, 2147483647) ; ++i) { s_1509949898.data[i] = {Field0: 0, Field1: []}; }    }
    
    F.line = 29;
    data_1509949899[data_1509949899_Idx][chckIndx(h_1509949902, 0, (data_1509949899[data_1509949899_Idx]).length - 1)].Field1 = nimCopy(null, key_1509949900, NTI33554439);
    F.line = 30;
    data_1509949899[data_1509949899_Idx][chckIndx(h_1509949902, 0, (data_1509949899[data_1509949899_Idx]).length - 1)].Field0 = hc_1509949901;
  framePtr = F.prev;

  
}

function enlarge_1509949787(s_1509949789) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/setimpl.nim", line: 0};
  framePtr = F;
    F.line = 37;
    var n_1509949791 = [];
    F.line = 38;
    n_1509949791 = new Array(chckRange(mulInt((s_1509949789.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((s_1509949789.data).length, 2), 0, 2147483647) ; ++i) { n_1509949791[i] = {Field0: 0, Field1: []}; }    F.line = 39;
    var Temporary1 = s_1509949789.data; s_1509949789.data = n_1509949791; n_1509949791 = Temporary1;    Label2: do {
      F.line = 40;
      var i_1509949826 = 0;
      F.line = 43;
      var colontmp__1509950170 = 0;
      F.line = 40;
      colontmp__1509950170 = (n_1509949791).length - 1;
      F.line = 65;
      var res_1509950172 = 0;
      Label3: do {
        F.line = 66;
          Label4: while (true) {
          if (!(res_1509950172 <= colontmp__1509950170)) break Label4;
            F.line = 40;
            i_1509949826 = res_1509950172;
            if (isFilled_956301350(n_1509949791[chckIndx(i_1509949826, 0, (n_1509949791).length - 1)].Field0)) {
            F.line = 42;
            var j_1509949883 = subInt(-1, rawGetKnownHC_1509949839(s_1509949789, n_1509949791[chckIndx(i_1509949826, 0, (n_1509949791).length - 1)].Field1, n_1509949791[chckIndx(i_1509949826, 0, (n_1509949791).length - 1)].Field0));
            F.line = 43;
            rawInsert_1509949896(s_1509949789, s_1509949789, "data", n_1509949791[chckIndx(i_1509949826, 0, (n_1509949791).length - 1)].Field1, n_1509949791[chckIndx(i_1509949826, 0, (n_1509949791).length - 1)].Field0, j_1509949883);
            }
            
            F.line = 68;
            res_1509950172 = addInt(res_1509950172, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function incl_1509949612(s_1509949614, key_1509949615) {
  var F = {procname: "incl.incl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    if (((s_1509949614.data).length == 0)) {
    F.line = 19;
    var correctSizeHEX60gensym1_1509949636 = slotsNeeded_956301361(64);
    F.line = 23;
    s_1509949614.counter = 0;
    F.line = 47;
    s_1509949614.data = new Array(chckRange(correctSizeHEX60gensym1_1509949636, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym1_1509949636, 0, 2147483647) ; ++i) { s_1509949614.data[i] = {Field0: 0, Field1: []}; }    }
    
    F.line = 48;
    var hc_1509949651 = [0];
    F.line = 49;
    var index_1509949712 = rawGet_1509949659(s_1509949614, key_1509949615, hc_1509949651, 0);
    if ((index_1509949712 < 0)) {
    if (mustRehash_1509949713(s_1509949614)) {
    F.line = 52;
    enlarge_1509949787(s_1509949614);
    F.line = 53;
    index_1509949712 = rawGetKnownHC_1509949839(s_1509949614, key_1509949615, hc_1509949651[0]);
    }
    
    F.line = 54;
    rawInsert_1509949896(s_1509949614, s_1509949614, "data", key_1509949615, hc_1509949651[0], subInt(-1, index_1509949712));
    F.line = 55;
    s_1509949614.counter = addInt(s_1509949614.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function toHashSet_1509949545(keys_1509949547) {
  var result_1509949548 = [({data: [], counter: 0})];

  var F = {procname: "toHashSet.toHashSet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 240;
    result_1509949548[0] = nimCopy(result_1509949548[0], initHashSet_1509949549((keys_1509949547).length), NTI1509949529);
    Label1: do {
      F.line = 241;
      var key_1509949592 = [];
      F.line = 8;
      var i_1509949984 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_1509949984 < (keys_1509949547).length)) break Label3;
            F.line = 241;
            key_1509949592 = keys_1509949547[chckIndx(i_1509949984, 0, (keys_1509949547).length - 1)];
            F.line = 241;
            incl_1509949612(result_1509949548[0], key_1509949592);
            F.line = 11;
            i_1509949984 = addInt(i_1509949984, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1509949548[0];

}

function incl_1509950060(s_1509950062, other_1509950063) {
  var F = {procname: "incl.incl", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    Label1: do {
      F.line = 221;
      var item_1509950126 = [];
      F.line = 262;
      var length_1509950163 = len_1509950082(other_1509950063);
      Label2: do {
        F.line = 263;
        var h_1509950165 = 0;
        F.line = 75;
        var colontmp__1509950166 = 0;
        F.line = 263;
        colontmp__1509950166 = (other_1509950063.data).length - 1;
        F.line = 90;
        var res_1509950167 = 0;
        Label3: do {
          F.line = 91;
            Label4: while (true) {
            if (!(res_1509950167 <= colontmp__1509950166)) break Label4;
              F.line = 263;
              h_1509950165 = res_1509950167;
              if (isFilled_956301350(other_1509950063.data[chckIndx(h_1509950165, 0, (other_1509950063.data).length - 1)].Field0)) {
              F.line = 221;
              item_1509950126 = other_1509950063.data[chckIndx(h_1509950165, 0, (other_1509950063.data).length - 1)].Field1;
              F.line = 221;
              incl_1509949612(s_1509950062, item_1509950126);
              if (!((len_1509950082(other_1509950063) == length_1509950163))) {
              F.line = 266;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim(266, 13) `len(s) == length` the length of the HashSet changed while iterating over it"));
              }
              
              }
              
              F.line = 93;
              res_1509950167 = addInt(res_1509950167, 1);
            }
        } while (false);
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function union_1509950029(s1_1509950031, s2_1509950032) {
  var result_1509950033 = [({data: [], counter: 0})];

  var F = {procname: "union.union", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 401;
    result_1509950033[0] = nimCopy(result_1509950033[0], s1_1509950031, NTI1509949529);
    F.line = 402;
    incl_1509950060(result_1509950033[0], s2_1509950032);
  framePtr = F.prev;

  return result_1509950033[0];

}

function HEX2B_1509950020(s1_1509950022, s2_1509950023) {
  var result_1509950024 = ({data: [], counter: 0});

  var F = {procname: "+.+", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 485;
    result_1509950024 = nimCopy(result_1509950024, union_1509950029(s1_1509950022, s2_1509950023), NTI1509949529);
  framePtr = F.prev;

  return result_1509950024;

}

function difference_436210654(s1_436210656, s2_436210657) {
  var result_436210658 = [({data: [], counter: 0})];

  var F = {procname: "difference.difference", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 454;
    result_436210658[0] = nimCopy(result_436210658[0], initHashSet_1509949549(64), NTI1509949529);
    Label1: do {
      F.line = 455;
      var item_436210665 = [];
      F.line = 262;
      var length_436213049 = len_1509950082(s1_436210656);
      Label2: do {
        F.line = 263;
        var h_436213051 = 0;
        F.line = 75;
        var colontmp__436213052 = 0;
        F.line = 263;
        colontmp__436213052 = (s1_436210656.data).length - 1;
        F.line = 90;
        var res_436213053 = 0;
        Label3: do {
          F.line = 91;
            Label4: while (true) {
            if (!(res_436213053 <= colontmp__436213052)) break Label4;
              F.line = 263;
              h_436213051 = res_436213053;
              if (isFilled_956301350(s1_436210656.data[chckIndx(h_436213051, 0, (s1_436210656.data).length - 1)].Field0)) {
              F.line = 455;
              item_436210665 = s1_436210656.data[chckIndx(h_436213051, 0, (s1_436210656.data).length - 1)].Field1;
              if (!(contains_1509950728(s2_436210657, item_436210665))) {
              F.line = 457;
              incl_1509949612(result_436210658[0], item_436210665);
              }
              
              if (!((len_1509950082(s1_436210656) == length_436213049))) {
              F.line = 266;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim(266, 13) `len(s) == length` the length of the HashSet changed while iterating over it"));
              }
              
              }
              
              F.line = 93;
              res_436213053 = addInt(res_436213053, 1);
            }
        } while (false);
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_436210658[0];

}

function HEX2D_436210645(s1_436210647, s2_436210648) {
  var result_436210649 = ({data: [], counter: 0});

  var F = {procname: "-.-", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim", line: 0};
  framePtr = F;
    F.line = 493;
    result_436210649 = nimCopy(result_436210649, difference_436210654(s1_436210647, s2_436210648), NTI1509949529);
  framePtr = F.prev;

  return result_436210649;

}

function clear_1241514321(t_1241514324) {
  var F = {procname: "clear.clear", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    Label1: do {
      F.line = 149;
      var i_1241514387 = 0;
      F.line = 117;
      var colontmp__436213062 = 0;
      F.line = 149;
      colontmp__436213062 = (t_1241514324.data).length;
      F.line = 119;
      var i_436213063 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436213063 < colontmp__436213062)) break Label3;
            F.line = 149;
            i_1241514387 = i_436213063;
            F.line = 151;
            t_1241514324.data[chckIndx(i_1241514387, 0, (t_1241514324.data).length - 1)].Field0 = 0;
            F.line = 152;
            t_1241514324.data[chckIndx(i_1241514387, 0, (t_1241514324.data).length - 1)].Field2 = nimCopy(null, [], NTI33554439);
            F.line = 153;
            t_1241514324.data[chckIndx(i_1241514387, 0, (t_1241514324.data).length - 1)].Field3 = 0;
            F.line = 122;
            i_436213063 = addInt(i_436213063, 1);
          }
      } while (false);
    } while (false);
    F.line = 154;
    t_1241514324.counter = 0;
    F.line = 1597;
    t_1241514324.first = -1;
    F.line = 1598;
    t_1241514324.last = -1;
  framePtr = F.prev;

  
}

function clear_1241514201(m_1241514202) {
  var F = {procname: "nfatype.clear", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfatype.nim", line: 0};
  framePtr = F;
    if ((0 < (m_1241514202.captures).length)) {
    F.line = 83;
    if (m_1241514202.captures.length < 0) { for (var i = m_1241514202.captures.length ; i < 0 ; ++i) m_1241514202.captures.push([]); }
               else { m_1241514202.captures.length = 0; };
    }
    
    if ((0 < len_1241514265(m_1241514202.namedGroups))) {
    F.line = 85;
    clear_1241514321(m_1241514202.namedGroups);
    }
    
    F.line = 86;
    m_1241514202.boundaries = nimCopy(m_1241514202.boundaries, HEX2EHEX2E_838861651(0, -1), NTI687865917);
  framePtr = F.prev;

  
}

function matchImpl_1375732818(text_1375732819, regex_1375732820, m_1375732821, start_1375732822) {
  var result_1375732823 = false;

  var F = {procname: "nfamatch.matchImpl", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex/nfamatch.nim", line: 0};
  framePtr = F;
    F.line = 229;
    clear_1241514201(m_1375732821);
    F.line = 231;
    var smA_1375732827 = [newSubmatches_1241514760((regex_1375732820.nfa.s).length)];
    F.line = 232;
    var smB_1375732831 = [newSubmatches_1241514760((regex_1375732820.nfa.s).length)];
    F.line = 233;
    var capts_1375732832 = [[]];
    F.line = 234;
    var capt_1375732833 = [-1];
    F.line = 235;
    var look_1375732834 = [{ahead: matchImpl_1375731751, behind: reversedMatchImpl_1375732198, smL: ({s: [], i: 0})}];
    F.line = 236;
    result_1375732823 = matchImpl_1375731751(smA_1375732827, 0, smB_1375732831, 0, capts_1375732832, 0, capt_1375732833, 0, text_1375732819, regex_1375732820.nfa, look_1375732834[0], start_1375732822, ConstSet54);
    if (result_1375732823) {
    F.line = 239;
    constructSubmatches_1241513999(m_1375732821, "captures", capts_1375732832[0], ((capt_1375732833[0]) | 0), ((regex_1375732820.groupsCount) | 0));
    if ((0 < len_1241514265(regex_1375732820.namedGroups))) {
    F.line = 242;
    m_1375732821.namedGroups = nimCopy(m_1375732821.namedGroups, regex_1375732820.namedGroups, NTI1224736906);
    }
    
    F.line = 243;
    m_1375732821.boundaries = nimCopy(m_1375732821.boundaries, HEX5BHEX5D_1241514827(smA_1375732827[0], 0).Field2, NTI687865917);
    }
    
  framePtr = F.prev;

  return result_1375732823;

}

function match_1056965822(s_1056965823, pattern_1056965824) {
  var result_1056965825 = false;

  var F = {procname: "regex.match", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 515;
    var m_1056965826 = [({captures: [], namedGroups: ({data: [], counter: 0, first: 0, last: 0}), boundaries: ({a: 0, b: 0})})];
    F.line = 516;
    result_1056965825 = matchImpl_1375732818(s_1056965823, pattern_1056965824, m_1056965826[0], 0);
  framePtr = F.prev;

  return result_1056965825;

}

function re_1509950389() {
  var result_1509950392 = ({nfa: ({s: [], t: ({allZ: [], z: []})}), groupsCount: 0, namedGroups: ({data: [], counter: 0, first: 0, last: 0}), litOpt: ({lit: 0, nfa: ({s: [], t: ({allZ: [], z: []})})})});

  var F = {procname: "re.re", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 292;
    result_1509950392 = nimCopy(result_1509950392, {nfa: {s: [{kind: 45, cp: 35, next: [1, 2], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [3, 2], isGreedy: false, uid: 2, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 908899684, Field1: 104}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -673973369, Field1: 100}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -1101683829, Field1: 102}, {Field0: -2116423573, Field1: 106}, {Field0: 454490284, Field1: 42849}, {Field0: 0, Field1: 0}, {Field0: -1380996561, Field1: 116}, {Field0: -1160343377, Field1: 112}, {Field0: 0, Field1: 0}, {Field0: -1451409774, Field1: 103}, {Field0: 922521427, Field1: 107}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -1629987273, Field1: 108}, {Field0: -1145849800, Field1: 98}, {Field0: -990644199, Field1: 99}, {Field0: 96048537, Field1: 114}, {Field0: 330576504, Field1: 122}, {Field0: -1712371396, Field1: 110}, {Field0: -1262851587, Field1: 109}, {Field0: 1152145308, Field1: 115}, {Field0: 0, Field1: 0}], counter: 17}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [2, 4, 5, 6], isGreedy: false, uid: 7, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 889415264, Field1: 97}, {Field0: -116348257, Field1: 7909}, {Field0: 1886473970, Field1: 7841}, {Field0: 340567103, Field1: 101}, {Field0: 0, Field1: 0}, {Field0: 853264933, Field1: 7885}, {Field0: -259192459, Field1: 803}, {Field0: 1123150279, Field1: 305}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 1890224028, Field1: 117}, {Field0: 0, Field1: 0}, {Field0: -48272642, Field1: 7865}, {Field0: -720547953, Field1: 111}], counter: 10}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 104, next: [2], isGreedy: false, uid: 3, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [5, 6], isGreedy: false, uid: 9, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -1516120132, Field1: 113}, {Field0: -1262851587, Field1: 109}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], counter: 2}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [7, 8], isGreedy: false, uid: 13, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 908899684, Field1: 104}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -673973369, Field1: 100}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -1101683829, Field1: 102}, {Field0: -2116423573, Field1: 106}, {Field0: -1839864179, Field1: 39}, {Field0: 454490284, Field1: 42849}, {Field0: -1380996561, Field1: 116}, {Field0: -1160343377, Field1: 112}, {Field0: 0, Field1: 0}, {Field0: -1451409774, Field1: 103}, {Field0: 922521427, Field1: 107}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -1629987273, Field1: 108}, {Field0: -1145849800, Field1: 98}, {Field0: -990644199, Field1: 99}, {Field0: 96048537, Field1: 114}, {Field0: 330576504, Field1: 122}, {Field0: -1712371396, Field1: 110}, {Field0: -1262851587, Field1: 109}, {Field0: 1152145308, Field1: 115}, {Field0: -1516120132, Field1: 113}], counter: 19}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 46, cp: 35, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 0, cp: 104, next: [8], isGreedy: false, uid: 14, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [8, 9, 5, 6], isGreedy: false, uid: 17, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 889415264, Field1: 97}, {Field0: -116348257, Field1: 7909}, {Field0: 1886473970, Field1: 7841}, {Field0: 340567103, Field1: 101}, {Field0: 0, Field1: 0}, {Field0: 853264933, Field1: 7885}, {Field0: -259192459, Field1: 803}, {Field0: 1123150279, Field1: 305}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 1890224028, Field1: 117}, {Field0: 0, Field1: 0}, {Field0: -48272642, Field1: 7865}, {Field0: -720547953, Field1: 111}], counter: 10}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 39, cp: 35, next: [5, 6], isGreedy: false, uid: 19, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [{Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: -1516120132, Field1: 113}, {Field0: -1262851587, Field1: 109}, {Field0: 0, Field1: 0}, {Field0: 0, Field1: 0}], counter: 2}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], t: {allZ: [[0, -1], [-1, 1], [-1, -1, 2, 3], [4], [5, 6], [-1, 7], [], [8], [-1, -1, 9, 10], [11, 12]], z: [[{kind: 3, cp: 40, next: [1], isGreedy: false, uid: 1, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [7], isGreedy: false, uid: 5, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [14], isGreedy: false, uid: 11, idx: 1, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 3, cp: 40, next: [11], isGreedy: false, uid: 12, idx: 2, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 12, cp: 36, next: [0], isGreedy: false, uid: 23, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [7], isGreedy: false, uid: 5, idx: 0, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 3, cp: 40, next: [14], isGreedy: false, uid: 11, idx: 1, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 3, cp: 40, next: [11], isGreedy: false, uid: 12, idx: 2, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 12, cp: 36, next: [0], isGreedy: false, uid: 23, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [16], isGreedy: false, uid: 16, idx: 2, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [16], isGreedy: false, uid: 16, idx: 2, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [22], isGreedy: false, uid: 21, idx: 1, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 3, cp: 40, next: [14], isGreedy: false, uid: 11, idx: 1, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 3, cp: 40, next: [11], isGreedy: false, uid: 12, idx: 2, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [22], isGreedy: false, uid: 21, idx: 1, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 12, cp: 36, next: [0], isGreedy: false, uid: 23, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [22], isGreedy: false, uid: 21, idx: 1, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 3, cp: 40, next: [14], isGreedy: false, uid: 11, idx: 1, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 3, cp: 40, next: [11], isGreedy: false, uid: 12, idx: 2, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], [{kind: 4, cp: 41, next: [22], isGreedy: false, uid: 21, idx: 1, isCapturing: true, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 12, cp: 36, next: [0], isGreedy: false, uid: 23, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}]]}}, groupsCount: 3, namedGroups: {data: [{Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}], counter: 0, first: -1, last: -1}, litOpt: {lit: 0, nfa: {s: [], t: {allZ: [], z: []}}}}, NTI1241514194);
  framePtr = F.prev;

  return result_1509950392;

}

function is_a_contentive_lemma_1509950365(s_1509950366) {
  var result_1509950367 = false;

  var F = {procname: "latin.is_a_contentive_lemma", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 95;
    result_1509950367 = match_1056965822(s_1509950366, re_1509950389());
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1509950367;

}

function is_a_lemma_1509950656(s_1509950657) {
  var result_1509950658 = false;

  var F = {procname: "latin.is_a_lemma", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 102;
    result_1509950658 = (is_a_contentive_lemma_1509950365(s_1509950657) || contains_1509950728(HEX2B_1509950020(HEX2B_1509950020(toneless_particles_1509950360, functors_with_lexical_tone_1509950334), interjections_1509950364), s_1509950657));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1509950658;

}

function first_1509950880(s_1509950882, has_property_1509950884) {
  var result_1509951002 = 0;

  var F = {procname: "first.first", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    Label1: do {
      F.line = 149;
      var i_1509951021 = -1;
      Label2: do {
        F.line = 148;
        var e_1509951025 = 0;
        F.line = 235;
        var i_436213067 = 0;
        F.line = 236;
        var L_436213068 = (s_1509950882).length;
        Label3: do {
          F.line = 237;
            Label4: while (true) {
            if (!(i_436213067 < L_436213068)) break Label4;
              F.line = 149;
              e_1509951025 = s_1509950882[chckIndx(i_436213067, 0, (s_1509950882).length - 1)];
              F.line = 149;
              i_1509951021 = addInt(i_1509951021, 1);
              if (has_property_1509950884(e_1509951025)) {
              F.line = 150;
              result_1509951002 = i_1509951021;
              break BeforeRet;
              }
              
              F.line = 239;
              i_436213067 = addInt(i_436213067, 1);
              if (!(((s_1509950882).length == L_436213068))) {
              F.line = 240;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    F.line = 151;
    result_1509951002 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1509951002;

}

function HEX26_1509951089(x_1509951091, y_1509951092) {
  var result_1509951093 = [];

  var F = {procname: "&.&", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1685;
    result_1509951093 = new Array(chckRange(addInt((x_1509951091).length, (y_1509951092).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_1509951091).length, (y_1509951092).length), 0, 2147483647) ; ++i) { result_1509951093[i] = 0; }    Label1: do {
      F.line = 1686;
      var i_1509951111 = 0;
      F.line = 75;
      var colontmp__436213071 = 0;
      F.line = 1686;
      colontmp__436213071 = subInt((x_1509951091).length, 1);
      F.line = 90;
      var res_436213072 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_436213072 <= colontmp__436213071)) break Label3;
            F.line = 1686;
            i_1509951111 = res_436213072;
            F.line = 1686;
            result_1509951093[chckIndx(i_1509951111, 0, (result_1509951093).length - 1)] = x_1509951091[chckIndx(i_1509951111, 0, (x_1509951091).length - 1)];
            F.line = 93;
            res_436213072 = addInt(res_436213072, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      F.line = 1688;
      var i_1509951119 = 0;
      F.line = 75;
      var colontmp__436213075 = 0;
      F.line = 1688;
      colontmp__436213075 = subInt((y_1509951092).length, 1);
      F.line = 90;
      var res_436213076 = 0;
      Label5: do {
        F.line = 91;
          Label6: while (true) {
          if (!(res_436213076 <= colontmp__436213075)) break Label6;
            F.line = 1688;
            i_1509951119 = res_436213076;
            F.line = 1688;
            result_1509951093[chckIndx(addInt(i_1509951119, (x_1509951091).length), 0, (result_1509951093).length - 1)] = y_1509951092[chckIndx(i_1509951119, 0, (y_1509951092).length - 1)];
            F.line = 93;
            res_436213076 = addInt(res_436213076, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1509951093;

}

function HEX5BHEX5D_1509951069(s_1509951073, x_1509951074) {
  var result_1509951075 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2619;
    var a_1509951077 = x_1509951074.a;
    F.line = 2620;
    var L_1509951079 = addInt(subInt(x_1509951074.b, a_1509951077), 1);
    F.line = 2621;
    result_1509951075 = new Array(chckRange(L_1509951079, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1509951079, 0, 2147483647) ; ++i) { result_1509951075[i] = 0; }    Label1: do {
      F.line = 2622;
      var i_1509951088 = 0;
      F.line = 119;
      var i_436213079 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436213079 < L_1509951079)) break Label3;
            F.line = 2622;
            i_1509951088 = i_436213079;
            F.line = 2622;
            result_1509951075[chckIndx(i_1509951088, 0, (result_1509951075).length - 1)] = s_1509951073[chckIndx(addInt(i_1509951088, a_1509951077), 0, (s_1509951073).length - 1)];
            F.line = 122;
            i_436213079 = addInt(i_436213079, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1509951075;

}

function HEX5BHEX5D_1509951132(s_1509951136, x_1509951137) {
  var result_1509951138 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2619;
    var a_1509951140 = x_1509951137.a;
    F.line = 2620;
    var L_1509951145 = addInt(subInt(subInt((s_1509951136).length, x_1509951137.b), a_1509951140), 1);
    F.line = 2621;
    result_1509951138 = new Array(chckRange(L_1509951145, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1509951145, 0, 2147483647) ; ++i) { result_1509951138[i] = 0; }    Label1: do {
      F.line = 2622;
      var i_1509951154 = 0;
      F.line = 119;
      var i_436213082 = 0;
      Label2: do {
        F.line = 120;
          Label3: while (true) {
          if (!(i_436213082 < L_1509951145)) break Label3;
            F.line = 2622;
            i_1509951154 = i_436213082;
            F.line = 2622;
            result_1509951138[chckIndx(i_1509951154, 0, (result_1509951138).length - 1)] = s_1509951136[chckIndx(addInt(i_1509951154, a_1509951140), 0, (s_1509951136).length - 1)];
            F.line = 122;
            i_436213082 = addInt(i_436213082, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_1509951138;

}

function with_replaced_interval_1509950886(s1_1509950888, i_1509950889, j_1509950890, s2_1509950891) {
  var result_1509951049 = [];

  var F = {procname: "with_replaced_interval.with_replaced_interval", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (!((i_1509950889 < j_1509950890))) {
    F.line = 164;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim(164, 9) `i < j` "));
    }
    
    F.line = 165;
    result_1509951049 = nimCopy(null, HEX26_1509951089(HEX26_1509951089(HEX5BHEX5D_1509951069(s1_1509950888, HEX2EHEX2E_838861651(0, subInt(i_1509950889, 1))), s2_1509950891), HEX5BHEX5D_1509951132(s1_1509950888, HEX2EHEX2E_805306448(j_1509950890, 1))), NTI1509950698);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1509951049;

}

function nsuInitNewSkipTable(sub_637535713) {
  var result_637535714 = [new Int32Array(256)];

  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1820;
    nsuInitSkipTable(result_637535714[0], sub_637535713);
  framePtr = F.prev;

  return result_637535714[0];

}

function nsuFindStr(s_637535769, sub_637535770, start_637535771, last_637535772) {
  var result_637535773 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if ((subInt((s_637535769).length, start_637535771) < (sub_637535770).length)) {
    F.line = 1915;
    result_637535773 = -1;
    break BeforeRet;
    }
    
    if (((sub_637535770).length == 1)) {
    F.line = 1916;
    result_637535773 = nsuFindChar(s_637535769, sub_637535770[chckIndx(0, 0, (sub_637535770).length - 1)], start_637535771, last_637535772);
    break BeforeRet;
    }
    
    F.line = 1918;
    result_637535773 = nsuFindStrA(nsuInitNewSkipTable(sub_637535770), s_637535769, sub_637535770, start_637535771, last_637535772);
  } while (false);
  framePtr = F.prev;

  return result_637535773;

}

function contains_637535896(s_637535897, sub_637535898) {
  var result_637535899 = false;

  var F = {procname: "strutils.contains", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 2055;
    result_637535899 = (0 <= nsuFindStr(s_637535897, sub_637535898, 0, 0));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_637535899;

}

function HEX26_1509951215(x_1509951217, y_1509951218) {
  var result_1509951219 = [];

  var F = {procname: "&.&", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1701;
    result_1509951219 = new Array(chckRange(addInt((x_1509951217).length, 1), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_1509951217).length, 1), 0, 2147483647) ; ++i) { result_1509951219[i] = 0; }    Label1: do {
      F.line = 1702;
      var i_1509951234 = 0;
      F.line = 75;
      var colontmp__436213091 = 0;
      F.line = 1702;
      colontmp__436213091 = subInt((x_1509951217).length, 1);
      F.line = 90;
      var res_436213092 = 0;
      Label2: do {
        F.line = 91;
          Label3: while (true) {
          if (!(res_436213092 <= colontmp__436213091)) break Label3;
            F.line = 1702;
            i_1509951234 = res_436213092;
            F.line = 1702;
            result_1509951219[chckIndx(i_1509951234, 0, (result_1509951219).length - 1)] = x_1509951217[chckIndx(i_1509951234, 0, (x_1509951217).length - 1)];
            F.line = 93;
            res_436213092 = addInt(res_436213092, 1);
          }
      } while (false);
    } while (false);
    F.line = 1704;
    result_1509951219[chckIndx((x_1509951217).length, 0, (result_1509951219).length - 1)] = y_1509951218;
  framePtr = F.prev;

  return result_1509951219;

}

function utf8_with_replaced_characters_1509950988(str_1509950990, src_chars_1509950991, rep_chars_1509950992) {
          
function HEX3Aanonymous_1509951186(r_1509951187) {
            var result_1509951188 = false;

            var F = {procname: "utf8_with_replaced_characters.:anonymous", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
            framePtr = F;
              F.line = 181;
              result_1509951188 = HEX3DHEX3D_838861719(r_1509951187, str_l_1509951177[chckIndx(i_1509951178, 0, (str_l_1509951177).length - 1)]);
            framePtr = F.prev;

            return result_1509951188;

          }

  var result_1509951174 = [];

  var F = {procname: "utf8_with_replaced_characters.utf8_with_replaced_characters", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var src_l_1509951175 = toRunes_838864641(src_chars_1509950991);
    F.line = 173;
    var rep_l_1509951176 = toRunes_838864641(rep_chars_1509950992);
    F.line = 177;
    var str_l_1509951177 = toRunes_838864641(str_1509950990);
    F.line = 178;
    var i_1509951178 = 0;
    Label1: do {
      F.line = 179;
        Label2: while (true) {
        if (!(i_1509951178 < (str_l_1509951177).length)) break Label2;
          if (contains_838866100(src_l_1509951175, str_l_1509951177[chckIndx(i_1509951178, 0, (str_l_1509951177).length - 1)])) {
          F.line = 181;
          var k_1509951194 = first_1509950880(src_l_1509951175, HEX3Aanonymous_1509951186);
          F.line = 182;
          str_l_1509951177 = nimCopy(null, HEX26_1509951089(HEX26_1509951215(HEX5BHEX5D_1509951069(str_l_1509951177, HEX2EHEX2E_838861651(0, subInt(i_1509951178, 1))), rep_l_1509951176[chckIndx(k_1509951194, 0, (rep_l_1509951176).length - 1)]), HEX5BHEX5D_1509951132(str_l_1509951177, HEX2EHEX2E_805306448(addInt(i_1509951178, 1), 1))), NTI1509950698);
          }
          
          F.line = 183;
          i_1509951178 = addInt(i_1509951178, 1);
        }
    } while (false);
    F.line = 184;
    Label3: do {
      F.line = 1012;
      var iHEX60gensym34_1509951282 = 0;
      F.line = 1013;
      var resultHEX60gensym34_1509951289 = newSeq_419430869(chckRange((str_l_1509951177).length, 0, 2147483647));
      Label4: do {
        F.line = 1014;
        var it_1509951293 = 0;
        F.line = 235;
        var i_436213087 = 0;
        F.line = 236;
        var L_436213088 = (str_l_1509951177).length;
        Label5: do {
          F.line = 237;
            Label6: while (true) {
            if (!(i_436213087 < L_436213088)) break Label6;
              F.line = 1014;
              it_1509951293 = str_l_1509951177[chckIndx(i_436213087, 0, (str_l_1509951177).length - 1)];
              F.line = 184;
              resultHEX60gensym34_1509951289[chckIndx(iHEX60gensym34_1509951282, 0, (resultHEX60gensym34_1509951289).length - 1)] = nimCopy(null, HEX24_838861391(it_1509951293), NTI33554439);
              F.line = 1014;
              iHEX60gensym34_1509951282 = addInt(iHEX60gensym34_1509951282, 1);
              F.line = 239;
              i_436213087 = addInt(i_436213087, 1);
              if (!(((str_l_1509951177).length == L_436213088))) {
              F.line = 240;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_1509951174 = nimCopy(null, nsuJoinSep(resultHEX60gensym34_1509951289, []), NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1509951174;

}

function inflected_vowel_1509950760(vowel_1509950761, tone_1509950762) {
  var result_1509950951 = [];

  var F = {procname: "latin.inflected_vowel", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (!(contains_637535896(makeNimstrLit("ae\xC4\xB1ou"), vowel_1509950761))) {
    F.line = 132;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim(132, 9) `\"ae\xC4\xB1ou\".contains(vowel)` "));
    }
    
    F.line = 133;
    var targets_1509950957 = [];
    if (contains_805306411([makeNimstrLit("\xC2\xB4"), makeNimstrLit("\xCC\x81")], tone_1509950762)) {
    F.line = 135;
    targets_1509950957 = nimCopy(null, makeNimstrLit("\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA"), NTI33554439);
    }
    else {
    if (contains_805306411([makeNimstrLit("^"), makeNimstrLit("\xCC\x82")], tone_1509950762)) {
    F.line = 137;
    targets_1509950957 = nimCopy(null, makeNimstrLit("\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB"), NTI33554439);
    }
    else {
    if (contains_805306411([makeNimstrLit("\xC2\xA8"), makeNimstrLit("\xCC\x88")], tone_1509950762)) {
    F.line = 139;
    targets_1509950957 = nimCopy(null, makeNimstrLit("\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC"), NTI33554439);
    }
    else {
      F.line = 141;
      var fmtRes_1509950986 = [mnewString(0)];
      F.line = 141;
      fmtRes_1509950986[0].push.apply(fmtRes_1509950986[0], makeNimstrLit("Invalid tone: \xE2\x9F\xAA"));;
      F.line = 141;
      formatValue_1409286306(fmtRes_1509950986, 0, tone_1509950762, []);
      F.line = 141;
      fmtRes_1509950986[0].push.apply(fmtRes_1509950986[0], makeNimstrLit("\xE2\x9F\xAB"));;
      F.line = 141;
      raiseException({message: nimCopy(null, fmtRes_1509950986[0], NTI33554439), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }}
    F.line = 142;
    result_1509950951 = nimCopy(null, utf8_with_replaced_characters_1509950988(vowel_1509950761, makeNimstrLit("ae\xC4\xB1ou"), targets_1509950957), NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1509950951;

}

function inflected_from_lemma_1509950768(lemma_1509950769, tone_1509950770) {
    
function HEX3Aanonymous_1509950872(rune_1509950873) {
      var result_1509950874 = false;

      var F = {procname: "inflected_from_lemma.:anonymous", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
      framePtr = F;
        F.line = 124;
        result_1509950874 = contains_838866100(vowels_1509950853, rune_1509950873);
      framePtr = F.prev;

      return result_1509950874;

    }

  var result_1509950771 = [];

  var F = {procname: "latin.inflected_from_lemma", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (!((nucruneLen(tone_1509950770) == 1))) {
    F.line = 118;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim(118, 9) `runeLen(tone) == 1` "));
    }
    
    if (!(is_a_lemma_1509950656(lemma_1509950769))) {
    F.line = 119;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim(119, 9) `is_a_lemma(lemma)` "));
    }
    
    if (!(!(contains_1509950728(HEX2B_1509950020(functors_with_lexical_tone_1509950334, interjections_1509950364), lemma_1509950769)))) {
    F.line = 120;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/latin.nim(120, 9) `not (functors_with_lexical_tone + interjections).contains(lemma)` "));
    }
    
    F.line = 122;
    var lemma_rs_1509950852 = toRunes_838864641(lemma_1509950769);
    F.line = 124;
    var i_1509950885 = first_1509950880(lemma_rs_1509950852, HEX3Aanonymous_1509950872);
    F.line = 129;
    Label1: do {
      F.line = 126;
      var HEX3Atmp_1509950911 = with_replaced_interval_1509950886(lemma_rs_1509950852, i_1509950885, addInt(i_1509950885, 1), toRunes_838864641(inflected_vowel_1509950760(nuctoUTF8(lemma_rs_1509950852[chckIndx(i_1509950885, 0, (lemma_rs_1509950852).length - 1)]), tone_1509950770)));
      F.line = 1012;
      var iHEX60gensym21_1509950914 = 0;
      F.line = 1013;
      var resultHEX60gensym21_1509950921 = newSeq_419430869(chckRange((HEX3Atmp_1509950911).length, 0, 2147483647));
      Label2: do {
        F.line = 1014;
        var it_1509950925 = 0;
        F.line = 235;
        var i_436213058 = 0;
        F.line = 236;
        var L_436213059 = (HEX3Atmp_1509950911).length;
        Label3: do {
          F.line = 237;
            Label4: while (true) {
            if (!(i_436213058 < L_436213059)) break Label4;
              F.line = 1014;
              it_1509950925 = HEX3Atmp_1509950911[chckIndx(i_436213058, 0, (HEX3Atmp_1509950911).length - 1)];
              F.line = 129;
              resultHEX60gensym21_1509950921[chckIndx(iHEX60gensym21_1509950914, 0, (resultHEX60gensym21_1509950921).length - 1)] = nimCopy(null, nuctoUTF8(it_1509950925), NTI33554439);
              F.line = 1014;
              iHEX60gensym21_1509950914 = addInt(iHEX60gensym21_1509950914, 1);
              F.line = 239;
              i_436213058 = addInt(i_436213058, 1);
              if (!(((HEX3Atmp_1509950911).length == L_436213059))) {
              F.line = 240;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_1509950771 = nimCopy(null, nsuJoinSep(resultHEX60gensym21_1509950921, []), NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1509950771;

}

function NFD_cartoucheless_words_436210618() {
  var result_436210620 = ({data: [], counter: 0});

  var F = {procname: "deran\xC4\xB1_from_latin_js.NFD_cartoucheless_words", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 194;
    Label1: do {
      F.line = 197;
      Label2: do {
        F.line = 198;
        var HEX3Atmp_436210820 = HEX2D_436210645(functors_with_grammatical_tone_1509950250, predicatizers_1509949999);
        F.line = 1012;
        var iHEX60gensym68_436210823 = 0;
        F.line = 1013;
        var resultHEX60gensym68_436210885 = newSeq_419430869(chckRange(len_1509950082(HEX3Atmp_436210820), 0, 2147483647));
        Label3: do {
          F.line = 1014;
          var it_436210889 = [];
          F.line = 262;
          var length_436213035 = len_1509950082(HEX3Atmp_436210820);
          Label4: do {
            F.line = 263;
            var h_436213037 = 0;
            F.line = 75;
            var colontmp__436213038 = 0;
            F.line = 263;
            colontmp__436213038 = (HEX3Atmp_436210820.data).length - 1;
            F.line = 90;
            var res_436213039 = 0;
            Label5: do {
              F.line = 91;
                Label6: while (true) {
                if (!(res_436213039 <= colontmp__436213038)) break Label6;
                  F.line = 263;
                  h_436213037 = res_436213039;
                  if (isFilled_956301350(HEX3Atmp_436210820.data[chckIndx(h_436213037, 0, (HEX3Atmp_436210820.data).length - 1)].Field0)) {
                  F.line = 1014;
                  it_436210889 = HEX3Atmp_436210820.data[chckIndx(h_436213037, 0, (HEX3Atmp_436210820.data).length - 1)].Field1;
                  F.line = 199;
                  resultHEX60gensym68_436210885[chckIndx(iHEX60gensym68_436210823, 0, (resultHEX60gensym68_436210885).length - 1)] = nimCopy(null, inflected_from_lemma_1509950768(it_436210889, makeNimstrLit("\xC2\xB4")), NTI33554439);
                  F.line = 1014;
                  iHEX60gensym68_436210823 = addInt(iHEX60gensym68_436210823, 1);
                  if (!((len_1509950082(HEX3Atmp_436210820) == length_436213035))) {
                  F.line = 266;
                  failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim(266, 13) `len(s) == length` the length of the HashSet changed while iterating over it"));
                  }
                  
                  }
                  
                  F.line = 93;
                  res_436213039 = addInt(res_436213039, 1);
                }
            } while (false);
          } while (false);
        } while (false);
      } while (false);
      var HEX3Atmp_436210975 = HEX2B_1509950020(HEX2B_1509950020(HEX2B_1509950020(pronouns_1509950238, determiners_1509950003), functors_with_lexical_tone_1509950334), toHashSet_1509949545(resultHEX60gensym68_436210885));
      F.line = 1012;
      var iHEX60gensym71_436210978 = 0;
      F.line = 1013;
      var resultHEX60gensym71_436211040 = newSeq_419430869(chckRange(len_1509950082(HEX3Atmp_436210975), 0, 2147483647));
      Label7: do {
        F.line = 1014;
        var it_436211044 = [];
        F.line = 262;
        var length_436213042 = len_1509950082(HEX3Atmp_436210975);
        Label8: do {
          F.line = 263;
          var h_436213044 = 0;
          F.line = 75;
          var colontmp__436213045 = 0;
          F.line = 263;
          colontmp__436213045 = (HEX3Atmp_436210975.data).length - 1;
          F.line = 90;
          var res_436213046 = 0;
          Label9: do {
            F.line = 91;
              Label10: while (true) {
              if (!(res_436213046 <= colontmp__436213045)) break Label10;
                F.line = 263;
                h_436213044 = res_436213046;
                if (isFilled_956301350(HEX3Atmp_436210975.data[chckIndx(h_436213044, 0, (HEX3Atmp_436210975.data).length - 1)].Field0)) {
                F.line = 1014;
                it_436211044 = HEX3Atmp_436210975.data[chckIndx(h_436213044, 0, (HEX3Atmp_436210975.data).length - 1)].Field1;
                F.line = 201;
                resultHEX60gensym71_436211040[chckIndx(iHEX60gensym71_436210978, 0, (resultHEX60gensym71_436211040).length - 1)] = nimCopy(null, nsuReplaceStr(toNFD_1426064548(it_436211044), makeNimstrLit("i"), makeNimstrLit("\xC4\xB1")), NTI33554439);
                F.line = 1014;
                iHEX60gensym71_436210978 = addInt(iHEX60gensym71_436210978, 1);
                if (!((len_1509950082(HEX3Atmp_436210975) == length_436213042))) {
                F.line = 266;
                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sets.nim(266, 13) `len(s) == length` the length of the HashSet changed while iterating over it"));
                }
                
                }
                
                F.line = 93;
                res_436213046 = addInt(res_436213046, 1);
              }
          } while (false);
        } while (false);
      } while (false);
    } while (false);
    result_436210620 = nimCopy(result_436210620, toHashSet_1509949545(resultHEX60gensym71_436211040), NTI1509949529);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436210620;

}

function all_436211134(s_436211136, pred_436211138) {
  var result_436211139 = false;

  var F = {procname: "all.all", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/sequtils.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 694;
    Label1: do {
      F.line = 706;
      var i_436211143 = [];
      F.line = 8;
      var i_436213095 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_436213095 < (s_436211136).length)) break Label3;
            F.line = 706;
            i_436211143 = s_436211136[chckIndx(i_436213095, 0, (s_436211136).length - 1)];
            if (!(pred_436211138(i_436211143))) {
            F.line = 708;
            result_436211139 = false;
            break BeforeRet;
            }
            
            F.line = 11;
            i_436213095 = addInt(i_436213095, 1);
          }
      } while (false);
    } while (false);
    result_436211139 = true;
  } while (false);
  framePtr = F.prev;

  return result_436211139;

}

function add_t2_cartouche_436207646(m_436207647, s_436207648) {
      
function HEX3Aanonymous_436211131(s_436211132) {
        var result_436211133 = false;

        var F = {procname: "add_t2_cartouche.:anonymous", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
        framePtr = F;
          F.line = 208;
          result_436211133 = !(contains_637535896(w_436211069, s_436211132));
        framePtr = F.prev;

        return result_436211133;

      }

  var result_436211055 = [];

  var F = {procname: "deran\xC4\xB1_from_latin_js.add_t2_cartouche", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 206;
    var w_436211069 = HEX5BHEX5D_838861676(s_436207648, m_436207647.captures[chckIndx(0, 0, (m_436207647.captures).length - 1)][chckIndx(0, 0, (m_436207647.captures[chckIndx(0, 0, (m_436207647.captures).length - 1)]).length - 1)]);
    if (!(contains_1509950728(NFD_cartoucheless_words_436210618(), w_436211069))) {
    if (all_436211134([makeNimstrLit("hu\xCC\x81\xCC\xA3"), makeNimstrLit("hu\xCC\xA3\xCC\x81")], HEX3Aanonymous_436211131)) {
    F.line = 209;
    w_436211069 = nimCopy(null, (makeNimstrLit("\xF3\xB1\x9B\x98") || []).concat(w_436211069 || [],makeNimstrLit("\xF3\xB1\x9B\x99") || []), NTI33554439);
    }
    
    }
    
    F.line = 210;
    result_436211055 = nimCopy(null, w_436211069, NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436211055;

}

function re_436208006() {
  var result_436208009 = ({nfa: ({s: [], t: ({allZ: [], z: []})}), groupsCount: 0, namedGroups: ({data: [], counter: 0, first: 0, last: 0}), litOpt: ({lit: 0, nfa: ({s: [], t: ({allZ: [], z: []})})})});

  var F = {procname: "re.re", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 292;
    result_436208009 = nimCopy(result_436208009, {nfa: {s: [{kind: 45, cp: 35, next: [1], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 21, cp: 115, next: [2], isGreedy: false, uid: 1, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}, {kind: 46, cp: 35, next: [], isGreedy: false, uid: 0, idx: 0, isCapturing: false, name: [], flags: [], min: 0, max: 0, cps: {data: [], counter: 0}, ranges: [], shorthands: [], cc: 0, subExp: {nfa: {s: [], t: {allZ: [], z: []}}, rpn: {s: []}, reverseCapts: false}}], t: {allZ: [[-1], [-1], []], z: []}}, groupsCount: 0, namedGroups: {data: [{Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}, {Field0: 0, Field1: 0, Field2: [], Field3: 0}], counter: 0, first: -1, last: -1}, litOpt: {lit: 0, nfa: {s: [], t: {allZ: [], z: []}}}}, NTI1241514194);
  framePtr = F.prev;

  return result_436208009;

}

function add_t1_cartouche_436207649(m_436207650, s_436207651) {
      var Temporary1;

  var result_436211147 = [];

  var F = {procname: "deran\xC4\xB1_from_latin_js.add_t1_cartouche", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 213;
    var HEXCEHEXB1_436211161 = HEX5BHEX5D_838861676(s_436207651, m_436207650.captures[chckIndx(0, 0, (m_436207650.captures).length - 1)][chckIndx(0, 0, (m_436207650.captures[chckIndx(0, 0, (m_436207650.captures).length - 1)]).length - 1)]);
    F.line = 214;
    var HEXCEHEXB2_436211162 = [];
      if (!(1 <= (m_436207650.captures).length)) Temporary1 = false; else {        Temporary1 = (1 <= (m_436207650.captures[chckIndx(1, 0, (m_436207650.captures).length - 1)]).length);      }    if (Temporary1) {
    F.line = 216;
    HEXCEHEXB2_436211162 = nimCopy(null, HEX5BHEX5D_838861676(s_436207651, m_436207650.captures[chckIndx(1, 0, (m_436207650.captures).length - 1)][chckIndx(0, 0, (m_436207650.captures[chckIndx(1, 0, (m_436207650.captures).length - 1)]).length - 1)]), NTI33554439);
    }
    else {
      F.line = 218;
      HEXCEHEXB2_436211162 = nimCopy(null, [], NTI33554439);
    }
    
    F.line = 219;
    var r_436211182 = [];
    if (eqStrings(HEXCEHEXB1_436211161, [])) {
    F.line = 221;
    r_436211182 = nimCopy(null, makeNimstrLit("\xC2\xA0\xF3\xB1\x9B\x9A"), NTI33554439);
    }
    else {
      F.line = 223;
      HEXCEHEXB1_436211161 = nimCopy(null, replace_1056966097(HEXCEHEXB1_436211161, re_436208006(), makeNimstrLit("\xC2\xA0"), 0), NTI33554439);
      if (eqStrings(HEXCEHEXB2_436211162, [])) {
      F.line = 226;
      r_436211182 = nimCopy(null, (HEXCEHEXB1_436211161 || []).concat(makeNimstrLit("\xF3\xB1\x9B\x9A ") || []), NTI33554439);
      }
      else {
      if (contains_1509950728(toneless_particles_1509950360, HEXCEHEXB2_436211162)) {
      F.line = 228;
      r_436211182 = nimCopy(null, (HEXCEHEXB1_436211161 || []).concat(makeNimstrLit("\xF3\xB1\x9B\x9A ") || [],HEXCEHEXB2_436211162 || []), NTI33554439);
      }
      else {
        F.line = 230;
        F.line = 230;
        var fmtRes_436211247 = [mnewString(0)];
        F.line = 230;
        fmtRes_436211247[0].push.apply(fmtRes_436211247[0], makeNimstrLit(" \xF3\xB1\x9B\x98"));;
        F.line = 230;
        formatValue_1409286306(fmtRes_436211247, 0, HEXCEHEXB2_436211162, []);
        F.line = 230;
        fmtRes_436211247[0].push.apply(fmtRes_436211247[0], makeNimstrLit("\xF3\xB1\x9B\x99"));;
        r_436211182 = nimCopy(null, fmtRes_436211247[0], NTI33554439);
      }
      }
    }
    
    F.line = 231;
    result_436211147 = nimCopy(null, r_436211182, NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436211147;

}

function traverse_while_436207661(HEXE2HEX84HEX991_436207664, HEXE2HEX84HEX992_436207670, init_436207671, step_436207672) {
  var F = {procname: "deran\xC4\xB1_from_latin_js.traverse_while", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
    F.line = 176;
    var i_436210303 = init_436207671;
    Label1: do {
      F.line = 177;
        Label2: while (true) {
        if (!(HEXE2HEX84HEX991_436207664(i_436210303) && HEXE2HEX84HEX992_436207670(i_436210303))) break Label2;
          F.line = 178;
          i_436210303 = addInt(i_436210303, step_436207672);
        }
    } while (false);
  framePtr = F.prev;

  
}

function raiseKeyError_1056965108(key_1056965110) {
  var F = {procname: "raiseKeyError.raiseKeyError", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 234;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_1056965110 || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");
  framePtr = F.prev;

  
}

function HEX5BHEX5D_436209615(t_436209618, key_436209619) {
  var result_436209620 = null;
  var result_436209620_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 242;
    var hcHEX60gensym22_436209621 = [0];
    F.line = 243;
    var indexHEX60gensym22_436209628 = rawGet_436208173(t_436209618, key_436209619, hcHEX60gensym22_436209621, 0);
    if ((0 <= indexHEX60gensym22_436209628)) {
    F.line = 244;
    result_436209620 = t_436209618.data[chckIndx(indexHEX60gensym22_436209628, 0, (t_436209618.data).length - 1)]; result_436209620_Idx = "Field2";
    }
    else {
      F.line = 246;
    raiseKeyError_1056965108(key_436209619);
    }
    
  framePtr = F.prev;

  return [result_436209620, result_436209620_Idx];

}

function replace_1056966121(s_1056966122, pattern_1056966123, by_1056966127, limit_1056966128) {
            var Temporary4;
                        var Temporary9;

  var result_1056966129 = [[]];

  var F = {procname: "regex.replace", prev: framePtr, filename: "▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim", line: 0};
  framePtr = F;
    F.line = 855;
    result_1056966129[0] = nimCopy(null, [], NTI33554439);
    F.line = 856;
    var i_1056966130 = 0;
    F.line = 856;
    var j_1056966131 = 0;
    Label1: do {
      F.line = 857;
      var m_1056966132 = ({captures: [], namedGroups: ({data: [], counter: 0, first: 0, last: 0}), boundaries: ({a: 0, b: 0})});
      F.line = 554;
      var i_436213099 = 0;
      F.line = 555;
      var i2_436213100 = -1;
      F.line = 556;
      var m_436213101 = [({captures: [], namedGroups: ({data: [], counter: 0, first: 0, last: 0}), boundaries: ({a: 0, b: 0})})];
      F.line = 557;
      var ms_436213102 = [({a: null, b: null, m: ({s: [], i: 0}), c: [], look: ({ahead: null, behind: null, smL: ({s: [], i: 0})})})];
      Label2: do {
        F.line = 558;
          Label3: while (true) {
          if (!(i_436213099 <= (s_1056966122).length)) break Label3;
            if (!((i2_436213100 < i_436213099))) {
            F.line = 559;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.nimble/pkgs/regex-0.20.1/regex.nim(559, 13) `i > i2` "));
            }
            
            F.line = 559;
            i2_436213100 = i_436213099;
            F.line = 560;
            if (canOpt_1258291814(pattern_1056966123.litOpt)) {
            Temporary4 = findSomeOptImpl_1358955141(s_1056966122, pattern_1056966123, ms_436213102[0], chckRange(i_436213099, 0, 2147483647));
            }
            else {
            Temporary4 = findSomeImpl_1358954827(s_1056966122, pattern_1056966123, ms_436213102[0], chckRange(i_436213099, 0, 2147483647), ConstSet55);
            }
            
            i_436213099 = Temporary4;
            if ((i_436213099 < 0)) {
            F.line = 562;
            break Label2;
            }
            
            Label5: do {
              F.line = 563;
              var mi_436213105 = 0;
              Label6: do {
                F.line = 118;
                var i_436213107 = 0;
                F.line = 75;
                var colontmp__436213108 = 0;
                F.line = 118;
                colontmp__436213108 = subInt(len_1358954520(ms_436213102[0].m), 1);
                F.line = 90;
                var res_436213109 = 0;
                Label7: do {
                  F.line = 91;
                    Label8: while (true) {
                    if (!(res_436213109 <= colontmp__436213108)) break Label8;
                      F.line = 118;
                      i_436213107 = res_436213109;
                      F.line = 563;
                      mi_436213105 = i_436213107;
                      F.line = 563;
                      fillMatchImpl_1358954586(m_436213101[0], mi_436213105, ms_436213102[0], pattern_1056966123);
                      F.line = 857;
                      m_1056966132 = nimCopy(m_1056966132, m_436213101[0], NTI1241514197);
                      F.line = 857;
                      addsubstr_1056966075(result_1056966129, 0, s_1056966122, i_1056966130, subInt(m_1056966132.boundaries.a, 1));
                      F.line = 857;
                      result_1056966129[0].push.apply(result_1056966129[0], by_1056966127(m_1056966132, s_1056966122));;
                      F.line = 860;
                      i_1056966130 = addInt(m_1056966132.boundaries.b, 1);
                      F.line = 857;
                      j_1056966131 = addInt(j_1056966131, 1);
                        if (!(0 < limit_1056966128)) Temporary9 = false; else {                          Temporary9 = (j_1056966131 == limit_1056966128);                        }                      if (Temporary9) {
                      F.line = 862;
                      break Label1;
                      }
                      
                      F.line = 93;
                      res_436213109 = addInt(res_436213109, 1);
                    }
                } while (false);
              } while (false);
            } while (false);
            if ((i_436213099 == (s_1056966122).length)) {
            F.line = 567;
            break Label2;
            }
            
          }
      } while (false);
    } while (false);
    F.line = 863;
    addsubstr_1056966093(result_1056966129, 0, s_1056966122, i_1056966130);
  framePtr = F.prev;

  return result_1056966129[0];

}

function initTable_436211257(initialSize_436211260) {
  var result_436211261 = ({data: [], counter: 0});

  var F = {procname: "initTable.initTable", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 163;
    var correctSizeHEX60gensym77_436211263 = slotsNeeded_1023410218(chckRange(initialSize_436211260, 0, 2147483647));
    F.line = 167;
    result_436211261.counter = 0;
    F.line = 168;
    result_436211261.data = new Array(chckRange(correctSizeHEX60gensym77_436211263, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym77_436211263, 0, 2147483647) ; ++i) { result_436211261.data[i] = {Field0: 0, Field1: [], Field2: []}; }  framePtr = F.prev;

  return result_436211261;

}

function rawGet_436209786(t_436209789, key_436209790, hc_436209791, hc_436209791_Idx) {
            var Temporary3;

  var result_436209792 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 64;
    hc_436209791[hc_436209791_Idx] = hash_973078950(key_436209790);
    if ((hc_436209791[hc_436209791_Idx] == 0)) {
    F.line = 66;
    hc_436209791[hc_436209791_Idx] = 314159265;
    }
    
    if (((t_436209789.data).length == 0)) {
    F.line = 48;
    result_436209792 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_436209855 = (hc_436209791[hc_436209791_Idx] & (t_436209789.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_1023410207(t_436209789.data[chckIndx(h_436209855, 0, (t_436209789.data).length - 1)].Field0)) break Label2;
            if (!(t_436209789.data[chckIndx(h_436209855, 0, (t_436209789.data).length - 1)].Field0 == hc_436209791[hc_436209791_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_436209789.data[chckIndx(h_436209855, 0, (t_436209789.data).length - 1)].Field1, key_436209790);            }          if (Temporary3) {
          F.line = 56;
          result_436209792 = h_436209855;
          break BeforeRet;
          }
          
          F.line = 57;
          h_436209855 = nextTry_1023410210(h_436209855, (t_436209789.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_436209792 = subInt(-1, h_436209855);
  } while (false);
  framePtr = F.prev;

  return result_436209792;

}

function mustRehash_436211515(t_436211517) {
  var result_436211518 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_436211517.counter < (t_436211517.data).length))) {
    F.line = 29;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 30;
    result_436211518 = ((mulInt((t_436211517.data).length, 2) < mulInt(t_436211517.counter, 3)) || (subInt((t_436211517.data).length, t_436211517.counter) < 4));
  framePtr = F.prev;

  return result_436211518;

}

function rawInsert_436212024(t_436212028, data_436212029, data_436212029_Idx, key_436212030, val_436212031, hc_436212032, h_436212033) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 22;
    data_436212029[data_436212029_Idx][chckIndx(h_436212033, 0, (data_436212029[data_436212029_Idx]).length - 1)].Field1 = nimCopy(null, key_436212030, NTI33554439);
    F.line = 23;
    data_436212029[data_436212029_Idx][chckIndx(h_436212033, 0, (data_436212029[data_436212029_Idx]).length - 1)].Field2 = nimCopy(null, val_436212031, NTI33554439);
    F.line = 24;
    data_436212029[data_436212029_Idx][chckIndx(h_436212033, 0, (data_436212029[data_436212029_Idx]).length - 1)].Field0 = hc_436212032;
  framePtr = F.prev;

  
}

function enlarge_436211703(t_436211706) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 249;
    var n_436211709 = [];
    F.line = 250;
    n_436211709 = new Array(chckRange(mulInt((t_436211706.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_436211706.data).length, 2), 0, 2147483647) ; ++i) { n_436211709[i] = {Field0: 0, Field1: [], Field2: []}; }    F.line = 251;
    var Temporary1 = t_436211706.data; t_436211706.data = n_436211709; n_436211709 = Temporary1;    Label2: do {
      F.line = 252;
      var i_436211784 = 0;
      F.line = 43;
      var colontmp__436213118 = 0;
      F.line = 252;
      colontmp__436213118 = (n_436211709).length - 1;
      F.line = 65;
      var res_436213119 = 0;
      Label3: do {
        F.line = 66;
          Label4: while (true) {
          if (!(res_436213119 <= colontmp__436213118)) break Label4;
            F.line = 252;
            i_436211784 = res_436213119;
            F.line = 253;
            var eh_436211842 = n_436211709[chckIndx(i_436211784, 0, (n_436211709).length - 1)].Field0;
            if (isFilled_1023410207(eh_436211842)) {
            F.line = 255;
            var j_436211846 = (eh_436211842 & (t_436211706.data).length - 1);
            Label5: do {
              F.line = 256;
                Label6: while (true) {
                if (!isFilled_1023410207(t_436211706.data[chckIndx(j_436211846, 0, (t_436211706.data).length - 1)].Field0)) break Label6;
                  F.line = 257;
                  j_436211846 = nextTry_1023410210(j_436211846, (t_436211706.data).length - 1);
                }
            } while (false);
            F.line = 259;
            rawInsert_436212024(t_436211706, t_436211706, "data", n_436211709[chckIndx(i_436211784, 0, (n_436211709).length - 1)].Field1, n_436211709[chckIndx(i_436211784, 0, (n_436211709).length - 1)].Field2, eh_436211842, j_436211846);
            }
            
            F.line = 68;
            res_436213119 = addInt(res_436213119, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  
}

function rawGetKnownHC_436212205(t_436212208, key_436212209, hc_436212210) {
  var result_436212211 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (((t_436212208.data).length == 0)) {
    F.line = 48;
    result_436212211 = -1;
    break BeforeRet;
    }
    
    F.line = 49;
    var h_436212273 = (hc_436212210 & (t_436212208.data).length - 1);
    Label1: do {
      F.line = 50;
        Label2: while (true) {
        if (!isFilled_1023410207(t_436212208.data[chckIndx(h_436212273, 0, (t_436212208.data).length - 1)].Field0)) break Label2;
          if (((t_436212208.data[chckIndx(h_436212273, 0, (t_436212208.data).length - 1)].Field0 == hc_436212210) && eqStrings(t_436212208.data[chckIndx(h_436212273, 0, (t_436212208.data).length - 1)].Field1, key_436212209))) {
          F.line = 56;
          result_436212211 = h_436212273;
          break BeforeRet;
          }
          
          F.line = 57;
          h_436212273 = nextTry_1023410210(h_436212273, (t_436212208.data).length - 1);
        }
    } while (false);
    F.line = 58;
    result_436212211 = subInt(-1, h_436212273);
  } while (false);
  framePtr = F.prev;

  return result_436212211;

}

function HEX5BHEX5DHEX3D_436211316(t_436211319, key_436211320, val_436211321) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_436211319.data).length == 0)) {
    F.line = 163;
    var correctSizeHEX60gensym80_436211381 = slotsNeeded_1023410218(32);
    F.line = 167;
    t_436211319.counter = 0;
    F.line = 168;
    t_436211319.data = new Array(chckRange(correctSizeHEX60gensym80_436211381, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym80_436211381, 0, 2147483647) ; ++i) { t_436211319.data[i] = {Field0: 0, Field1: [], Field2: []}; }    }
    
    F.line = 57;
    var hc_436211386 = [0];
    F.line = 58;
    var index_436211393 = rawGet_436209786(t_436211319, key_436211320, hc_436211386, 0);
    if ((0 <= index_436211393)) {
    F.line = 59;
    t_436211319.data[chckIndx(index_436211393, 0, (t_436211319.data).length - 1)].Field2 = nimCopy(null, val_436211321, NTI33554439);
    }
    else {
      if (((t_436211319.data).length == 0)) {
      F.line = 163;
      var correctSizeHEX60gensym83_436211510 = slotsNeeded_1023410218(32);
      F.line = 167;
      t_436211319.counter = 0;
      F.line = 168;
      t_436211319.data = new Array(chckRange(correctSizeHEX60gensym83_436211510, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym83_436211510, 0, 2147483647) ; ++i) { t_436211319.data[i] = {Field0: 0, Field1: [], Field2: []}; }      }
      
      if (mustRehash_436211515(t_436211319)) {
      F.line = 49;
      enlarge_436211703(t_436211319);
      F.line = 50;
      index_436211393 = rawGetKnownHC_436212205(t_436211319, key_436211320, hc_436211386[0]);
      }
      
      F.line = 51;
      index_436211393 = subInt(-1, index_436211393);
      F.line = 52;
      rawInsert_436212024(t_436211319, t_436211319, "data", key_436211320, val_436211321, hc_436211386[0], index_436211393);
      F.line = 60;
      t_436211319.counter = addInt(t_436211319.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function toTable_436211252(pairs_436211255) {
  var result_436211256 = [({data: [], counter: 0})];

  var F = {procname: "toTable.toTable", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 314;
    result_436211256[0] = nimCopy(result_436211256[0], initTable_436211257((pairs_436211255).length), NTI436207633);
    Label1: do {
      F.line = 315;
      var key_436211274 = [];
      F.line = 315;
      var val_436211275 = [];
      F.line = 8;
      var i_436213113 = 0;
      Label2: do {
        F.line = 9;
          Label3: while (true) {
          if (!(i_436213113 < (pairs_436211255).length)) break Label3;
            F.line = 315;
            key_436211274 = pairs_436211255[chckIndx(i_436213113, 0, (pairs_436211255).length - 1)]["Field0"];
            F.line = 315;
            val_436211275 = pairs_436211255[chckIndx(i_436213113, 0, (pairs_436211255).length - 1)]["Field1"];
            F.line = 315;
            HEX5BHEX5DHEX3D_436211316(result_436211256[0], key_436211274, val_436211275);
            F.line = 11;
            i_436213113 = addInt(i_436213113, 1);
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_436211256[0];

}

function digraph_map_436207643() {
  var result_436212486 = ({data: [], counter: 0});

  var F = {procname: "deran\xC4\xB1_from_latin_js.digraph_map", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 281;
    result_436212486 = nimCopy(result_436212486, toTable_436211252([{Field0: makeNimstrLit("nh"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBD")}, {Field0: makeNimstrLit("ch"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBF")}, {Field0: makeNimstrLit("sh"), Field1: makeNimstrLit("\xF3\xB1\x9B\x80")}, {Field0: makeNimstrLit("a\xC4\xB1"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBA\xF3\xB1\x9B\x8E\xF3\xB1\x9A\xB9")}, {Field0: makeNimstrLit("ao"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBA\xF3\xB1\x9B\x8E\xF3\xB1\x9B\x83")}, {Field0: makeNimstrLit("o\xC4\xB1"), Field1: makeNimstrLit("\xF3\xB1\x9B\x83\xF3\xB1\x9B\x8E\xF3\xB1\x9A\xB9")}, {Field0: makeNimstrLit("e\xC4\xB1"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB4\xF3\xB1\x9B\x8E\xF3\xB1\x9A\xB9")}, {Field0: makeNimstrLit("[]"), Field1: makeNimstrLit("\xF3\xB1\x9B\x9A")}]), NTI436207633);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436212486;

}

function monograph_map_436207635() {
  var result_436211251 = ({data: [], counter: 0});

  var F = {procname: "deran\xC4\xB1_from_latin_js.monograph_map", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 269;
    result_436211251 = nimCopy(result_436211251, toTable_436211252([{Field0: makeNimstrLit("m"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB0")}, {Field0: makeNimstrLit("b"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB2")}, {Field0: makeNimstrLit("u"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB2")}, {Field0: makeNimstrLit("p"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB3")}, {Field0: makeNimstrLit("f"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB4")}, {Field0: makeNimstrLit("e"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB4")}, {Field0: makeNimstrLit("n"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB5")}, {Field0: makeNimstrLit("d"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB6")}, {Field0: makeNimstrLit("t"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB7")}, {Field0: makeNimstrLit("z"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB8")}, {Field0: makeNimstrLit("c"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB9")}, {Field0: makeNimstrLit("\xC4\xB1"), Field1: makeNimstrLit("\xF3\xB1\x9A\xB9")}, {Field0: makeNimstrLit("s"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBA")}, {Field0: makeNimstrLit("a"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBA")}, {Field0: makeNimstrLit("r"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBB")}, {Field0: makeNimstrLit("l"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBC")}, {Field0: makeNimstrLit("j"), Field1: makeNimstrLit("\xF3\xB1\x9A\xBE")}, {Field0: makeNimstrLit("\xEA\x9D\xA1"), Field1: makeNimstrLit("\xF3\xB1\x9B\x81")}, {Field0: makeNimstrLit("q"), Field1: makeNimstrLit("\xF3\xB1\x9B\x82")}, {Field0: makeNimstrLit("g"), Field1: makeNimstrLit("\xF3\xB1\x9B\x83")}, {Field0: makeNimstrLit("o"), Field1: makeNimstrLit("\xF3\xB1\x9B\x83")}, {Field0: makeNimstrLit("k"), Field1: makeNimstrLit("\xF3\xB1\x9B\x84")}, {Field0: makeNimstrLit("\xCA\xBC"), Field1: makeNimstrLit("\xF3\xB1\x9B\x85")}, {Field0: makeNimstrLit("\'"), Field1: makeNimstrLit("\xF3\xB1\x9B\x85")}, {Field0: makeNimstrLit("h"), Field1: makeNimstrLit("\xF3\xB1\x9B\x86")}, {Field0: makeNimstrLit("\xCC\x81"), Field1: makeNimstrLit("\xF3\xB1\x9B\x8A")}, {Field0: makeNimstrLit("\xCC\x88"), Field1: makeNimstrLit("\xF3\xB1\x9B\x8B")}, {Field0: makeNimstrLit("\xCC\x82"), Field1: makeNimstrLit("\xF3\xB1\x9B\x8C")}, {Field0: makeNimstrLit("-"), Field1: makeNimstrLit("\xF3\xB1\x9B\x92")}, {Field0: makeNimstrLit(":"), Field1: makeNimstrLit("\xF3\xB1\x9B\x93")}, {Field0: makeNimstrLit(","), Field1: makeNimstrLit(" \xF3\xB1\x9B\x94")}]), NTI436207633);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436211251;

}

function toHex_637534951(s_637534952) {
  var result_637534953 = [];

  var F = {procname: "strutils.toHex", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 953;
    result_637534953 = nimCopy(null, mnewString(chckRange(mulInt((s_637534952).length, 2), 0, 2147483647)), NTI33554439);
    Label1: do {
      F.line = 954;
      var pos_637534955 = 0;
      F.line = 954;
      var c_637534956 = 0;
      F.line = 187;
      var i_436213137 = 0;
      F.line = 188;
      var L_436213138 = (s_637534952).length;
      Label2: do {
        F.line = 189;
          Label3: while (true) {
          if (!(i_436213137 < L_436213138)) break Label3;
            F.line = 954;
            pos_637534955 = i_436213137;
            F.line = 954;
            c_637534956 = s_637534952[chckIndx(i_436213137, 0, (s_637534952).length - 1)];
            F.line = 955;
            var n_637534960 = c_637534956;
            F.line = 956;
            result_637534953[chckIndx(addInt(mulInt(pos_637534955, 2), 1), 0, (result_637534953).length - 1)] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_637534960 & 15), 0, (makeNimstrLit("0123456789ABCDEF")).length - 1)];
            F.line = 957;
            n_637534960 = (n_637534960 >> 4);
            F.line = 958;
            result_637534953[chckIndx(mulInt(pos_637534955, 2), 0, (result_637534953).length - 1)] = makeNimstrLit("0123456789ABCDEF")[chckIndx(n_637534960, 0, (makeNimstrLit("0123456789ABCDEF")).length - 1)];
            F.line = 191;
            i_436213137 = addInt(i_436213137, 1);
            if (!(((s_637534952).length == L_436213138))) {
            F.line = 192;
            failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(192, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
  framePtr = F.prev;

  return result_637534953;

}

function utf8_slice_of_436207657(s_436207658, i_436207659, j_436207660) {
  var result_436212519 = [];

  var F = {procname: "deran\xC4\xB1_from_latin_js.utf8_slice_of", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 300;
    var l_436212520 = (nucruneLen(s_436207658) >>> 0);
    if (!((i_436207659 <= l_436212520))) {
    F.line = 301;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim(301, 9) `i <= l` "));
    }
    
    if (!((j_436207660 <= l_436212520))) {
    F.line = 302;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim(302, 9) `j <= l` "));
    }
    
    if (!((i_436207659 <= j_436207660))) {
    F.line = 303;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim(303, 9) `i <= j` "));
    }
    
    F.line = 304;
    var k_436212536 = 0;
    F.line = 305;
    var r_436212537 = [];
    Label1: do {
      F.line = 306;
      var cp_436212538 = [];
      F.line = 287;
      var r_436213127 = [];
      F.line = 288;
      var i_436213128 = 0;
      Label2: do {
        F.line = 289;
        var b_436213130 = 0;
        F.line = 253;
        var i_436213131 = 0;
        F.line = 254;
        var L_436213132 = (s_436207658).length;
        Label3: do {
          F.line = 255;
            Label4: while (true) {
            if (!(i_436213131 < L_436213132)) break Label4;
              F.line = 289;
              b_436213130 = s_436207658[chckIndx(i_436213131, 0, (s_436207658).length - 1)];
              F.line = 289;
              addChar(r_436213127, b_436213130);;
              F.line = 289;
              i_436213128 = addInt(i_436213128, 1);
              if ((validateUtf8_838861077(r_436213127) == -1)) {
              F.line = 306;
              cp_436212538 = r_436213127;
              if ((k_436212536 < j_436207660)) {
              if ((i_436207659 <= k_436212536)) {
              F.line = 309;
              r_436212537.push.apply(r_436212537, cp_436212538);;
              }
              
              }
              else {
                F.line = 311;
                break Label1;
              }
              
              F.line = 306;
              k_436212536 = ((k_436212536 + 1) >>> 0);
              F.line = 294;
              (r_436213127.length = 0);
              }
              else {
              if ((4 <= (r_436213127).length)) {
              F.line = 297;
              var fmtRes_436213134 = [mnewString(0)];
              F.line = 297;
              fmtRes_436213134[0].push.apply(fmtRes_436213134[0], makeNimstrLit("Invalid UTF8 byte sequence: \xE2\x9F\xAA"));;
              F.line = 297;
              formatValue_1409286306(fmtRes_436213134, 0, toHex_637534951(r_436213127), []);
              F.line = 297;
              fmtRes_436213134[0].push.apply(fmtRes_436213134[0], makeNimstrLit("\xE2\x9F\xAB"));;
              F.line = 296;
              raiseException({message: nimCopy(null, fmtRes_436213134[0], NTI33554439), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
              }
              }
              F.line = 257;
              i_436213131 = addInt(i_436213131, 1);
              if (!(((s_436207658).length == L_436213132))) {
              F.line = 258;
              failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(258, 11) `len(a) == L` the length of the string changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    F.line = 313;
    result_436212519 = nimCopy(null, r_436212537, NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436212519;

}

function hasKey_436209779(t_436209782, key_436209783) {
  var result_436209784 = false;

  var F = {procname: "hasKey.hasKey", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 371;
    var hc_436209785 = [0];
    F.line = 372;
    result_436209784 = (0 <= rawGet_436209786(t_436209782, key_436209783, hc_436209785, 0));
  framePtr = F.prev;

  return result_436209784;

}

function HEX5BHEX5D_436210105(t_436210108, key_436210109) {
  var result_436210110 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 242;
    var hcHEX60gensym20_436210111 = [0];
    F.line = 243;
    var indexHEX60gensym20_436210118 = rawGet_436209786(t_436210108, key_436210109, hcHEX60gensym20_436210111, 0);
    if ((0 <= indexHEX60gensym20_436210118)) {
    F.line = 244;
    result_436210110 = nimCopy(null, t_436210108.data[chckIndx(indexHEX60gensym20_436210118, 0, (t_436210108.data).length - 1)].Field2, NTI33554439);
    }
    else {
      F.line = 246;
    raiseKeyError_1056965108(key_436210109);
    }
    
  framePtr = F.prev;

  return result_436210110;

}

function utf8_with_replaced_interval_436207652(s1_436207653, i_436207654, j_436207655, s2_436207656) {
  var result_436210313 = [];

  var F = {procname: "deran\xC4\xB1_from_latin_js.utf8_with_replaced_interval", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    if (!((i_436207654 < j_436207655))) {
    F.line = 186;
    failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim(186, 9) `i < j` "));
    }
    
    F.line = 188;
    result_436210313 = nimCopy(null, (utf8_slice_of_436207657(s1_436207653, 0, i_436207654) || []).concat(s2_436207656 || [],utf8_slice_of_436207657(s1_436207653, j_436207655, (nucruneLen(s1_436207653) >>> 0)) || []), NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436210313;

}

function deranHEXC4HEXB1_from_latin_436207629(lt_436207630, opts_436207631) {
    
function HEX3Aanonymous_436207981(m_436207982, s_436207983) {
      var result_436207984 = [];

      var F = {procname: "deran\xC4\xB1_from_latin.:anonymous", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
      framePtr = F;
        F.line = 137;
        result_436207984 = nimCopy(null, add_t2_cartouche_436207646(m_436207982, s_436207983), NTI33554439);
      framePtr = F.prev;

      return result_436207984;

    }
    
function HEX3Aanonymous_436207985(m_436207986, s_436207987) {
      var result_436207988 = [];

      var F = {procname: "deran\xC4\xB1_from_latin.:anonymous", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
      framePtr = F;
        F.line = 138;
        result_436207988 = nimCopy(null, add_t1_cartouche_436207649(m_436207986, s_436207987), NTI33554439);
      framePtr = F.prev;

      return result_436207988;

    }
    
function HEX3Aanonymous_436207989(m_436207990, s_436207991) {
      var result_436207992 = [];

      var F = {procname: "deran\xC4\xB1_from_latin.:anonymous", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
      framePtr = F;
        F.line = 140;
        result_436207992 = nimCopy(null, replace_1056966097(HEX5BHEX5D_838861676(s_436207991, m_436207990.captures[chckIndx(0, 0, (m_436207990.captures).length - 1)][chckIndx(0, 0, (m_436207990.captures[chckIndx(0, 0, (m_436207990.captures).length - 1)]).length - 1)]), re_436208006(), cartouche_space_436207741, 0), NTI33554439);
      framePtr = F.prev;

      return result_436207992;

    }
    
function HEX3Aanonymous_436209699(i_436209700) {
      var result_436209701 = false;

      var F = {procname: "deran\xC4\xB1_from_latin.:anonymous", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
      framePtr = F;
        F.line = 151;
        result_436209701 = (i_436209700 < (RRL_436207930).length);
      framePtr = F.prev;

      return result_436209701;

    }
    
function f_436209536(i_436209537) {
          var Temporary1;
        var Temporary2;

      var result_436209538 = false;

      var F = {procname: "deran\xC4\xB1_from_latin.f", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
      framePtr = F;
      BeforeRet: do {
        F.line = 144;
        var rr_436209539 = nimCopy(null, RRL_436207930[chckIndx(i_436209537, 0, (RRL_436207930).length - 1)], NTI436207754);
          if (!(0 < (rr_436209539["Field1"]).length)) Temporary1 = false; else {            Temporary1 = (rr_436209539["Field1"][chckIndx(0, 0, (rr_436209539["Field1"]).length - 1)] == 27);          }        if (Temporary1) {
        F.line = 146;
        var cb_436209698 = (Temporary2 = HEX5BHEX5D_436209615(callback_named_436209535[0], HEX5BHEX5D_838864026(rr_436209539["Field1"], HEX2EHEX2E_805306448(1, 1))), Temporary2)[0][Temporary2[1]];
        F.line = 147;
        r_436207931 = nimCopy(null, replace_1056966121(r_436207931, re_1056964626(rr_436209539["Field0"]), cb_436209698, 0), NTI33554439);
        }
        else {
          F.line = 149;
          r_436207931 = nimCopy(null, replace_1056966097(r_436207931, re_1056964626(rr_436209539["Field0"]), rr_436209539["Field1"], 0), NTI33554439);
        }
        
        F.line = 150;
        result_436209538 = true;
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_436209538;

    }
    
function HEX3Aanonymous_436210243(i_436210244) {
      var result_436210245 = false;

      var F = {procname: "deran\xC4\xB1_from_latin.:anonymous", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
      framePtr = F;
        F.line = 163;
        result_436210245 = (i_436210244 < nucruneLen(r_436207931));
      framePtr = F.prev;

      return result_436210245;

    }
    
function g_436209706(i_436209707) {
      var result_436209708 = false;

      var F = {procname: "deran\xC4\xB1_from_latin.g", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
      framePtr = F;
      BeforeRet: do {
        Label1: do {
          F.line = 154;
          var m_436209734 = ({data: [], counter: 0});
          F.line = 154;
          var l_436209735 = 0;
          F.line = 233;
          var colontmp__436212544 = [];
          F.line = 154;
          colontmp__436212544 = [nimCopy(null, {Field0: digraph_map_436207643(), Field1: 2}, NTI436208958), nimCopy(null, {Field0: monograph_map_436207635(), Field1: 1}, NTI436208958)];
          F.line = 235;
          var i_436212546 = 0;
          F.line = 236;
          var L_436212547 = (colontmp__436212544).length;
          Label2: do {
            F.line = 237;
              Label3: while (true) {
              if (!(i_436212546 < L_436212547)) break Label3;
                F.line = 154;
                m_436209734 = colontmp__436212544[chckIndx(i_436212546, 0, (colontmp__436212544).length - 1)]["Field0"];
                F.line = 154;
                l_436209735 = colontmp__436212544[chckIndx(i_436212546, 0, (colontmp__436212544).length - 1)]["Field1"];
                F.line = 155;
                var rl_436209736 = (nimMin(l_436209735, subInt(nucruneLen(r_436207931), i_436209707)) >>> 0);
                F.line = 156;
                var ui_436209737 = (i_436209707 >>> 0);
                F.line = 157;
                var s_436209738 = utf8_slice_of_436207657(r_436207931, ui_436209737, ((ui_436209737 + rl_436209736) >>> 0));
                if (hasKey_436209779(m_436209734, s_436209738)) {
                F.line = 159;
                var v_436210179 = HEX5BHEX5D_436210105(m_436209734, s_436209738);
                F.line = 160;
                r_436207931 = nimCopy(null, utf8_with_replaced_interval_436207652(r_436207931, ui_436209737, ((ui_436209737 + (nucruneLen(s_436209738) >>> 0)) >>> 0), v_436210179), NTI33554439);
                }
                
                F.line = 239;
                i_436212546 = addInt(i_436212546, 1);
                if (!(((colontmp__436212544).length == L_436212547))) {
                F.line = 240;
                failedAssertImpl_218103864(makeNimstrLit("▓▓▓▓/.choosenim/toolchains/nim-1.6.10/lib/system/iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        F.line = 162;
        result_436209708 = true;
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_436209708;

    }

  var result_436207740 = [];

  var F = {procname: "deran\xC4\xB1_from_latin_js.deran\xC4\xB1_from_latin", prev: framePtr, filename: "▓▓▓▓/github/toaq/chuotiai/nimtoaq/deran\xC4\xB1_from_latin_js.nim", line: 0};
  framePtr = F;
  BeforeRet: do {
    F.line = 56;
    var cartouche_space_436207741 = [];
    if (!((find_436207742(opts_436207631, makeNimstrLit("compatibility_space")) == -1))) {
    F.line = 58;
    cartouche_space_436207741 = nimCopy(null, makeNimstrLit("\xF3\xB1\x9B\x9B"), NTI33554439);
    }
    else {
      F.line = 60;
      cartouche_space_436207741 = nimCopy(null, makeNimstrLit("\xC2\xA0"), NTI33554439);
    }
    
    F.line = 73;
    var DET_436207789 = normalized_re_from_wordset_436207632(determiners_1509950003);
    F.line = 74;
    var TLP_436207790 = normalized_re_from_wordset_436207632(toneless_particles_1509950360);
    F.line = 75;
    var MS_436207791 = normalized_re_from_wordset_436207632(matrix_subordinators_1509949987);
    F.line = 76;
    var CONJ_436207792 = normalized_re_from_wordset_436207632(conjunctions_1509950176);
    F.line = 80;
    F.line = 81;
    var fmtRes_436207800 = [mnewString(0)];
    F.line = 81;
    fmtRes_436207800[0].push.apply(fmtRes_436207800[0], makeNimstrLit(",(\\s*"));;
    F.line = 81;
    formatValue_1409286306(fmtRes_436207800, 0, CONJ_436207792, []);
    F.line = 81;
    formatValue_1409286306(fmtRes_436207800, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 81;
    fmtRes_436207800[0].push.apply(fmtRes_436207800[0], makeNimstrLit("?\\s)"));;
    F.line = 83;
    var fmtRes_436207805 = [mnewString(0)];
    F.line = 83;
    fmtRes_436207805[0].push.apply(fmtRes_436207805[0], makeNimstrLit("(^|[^"));;
    F.line = 83;
    formatValue_1409286306(fmtRes_436207805, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 83;
    formatValue_1409286306(fmtRes_436207805, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 83;
    fmtRes_436207805[0].push.apply(fmtRes_436207805[0], makeNimstrLit("])(["));;
    F.line = 83;
    formatValue_1409286306(fmtRes_436207805, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3"), []);
    F.line = 83;
    fmtRes_436207805[0].push.apply(fmtRes_436207805[0], makeNimstrLit("]["));;
    F.line = 83;
    formatValue_1409286306(fmtRes_436207805, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 83;
    fmtRes_436207805[0].push.apply(fmtRes_436207805[0], makeNimstrLit("]?(s|f|c|g|b))"));;
    F.line = 85;
    var fmtRes_436207810 = [mnewString(0)];
    F.line = 85;
    fmtRes_436207810[0].push.apply(fmtRes_436207810[0], makeNimstrLit("(["));;
    F.line = 85;
    formatValue_1409286306(fmtRes_436207810, 0, makeNimstrLit("\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 85;
    fmtRes_436207810[0].push.apply(fmtRes_436207810[0], makeNimstrLit("]?h?["));;
    F.line = 85;
    formatValue_1409286306(fmtRes_436207810, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3"), []);
    F.line = 85;
    fmtRes_436207810[0].push.apply(fmtRes_436207810[0], makeNimstrLit("]["));;
    F.line = 85;
    formatValue_1409286306(fmtRes_436207810, 0, makeNimstrLit("\xCC\xA3"), []);
    F.line = 85;
    fmtRes_436207810[0].push.apply(fmtRes_436207810[0], makeNimstrLit("]?["));;
    F.line = 85;
    formatValue_1409286306(fmtRes_436207810, 0, makeNimstrLit("\xCC\x81"), []);
    F.line = 85;
    fmtRes_436207810[0].push.apply(fmtRes_436207810[0], makeNimstrLit("]["));;
    F.line = 85;
    formatValue_1409286306(fmtRes_436207810, 0, makeNimstrLit("\'bcdfghjklmnprstzq\xEA\x9D\xA1ae\xC4\xB1ou\xCC\xA3"), []);
    F.line = 85;
    fmtRes_436207810[0].push.apply(fmtRes_436207810[0], makeNimstrLit("]*)"));;
    F.line = 87;
    var fmtRes_436207815 = [mnewString(0)];
    F.line = 87;
    fmtRes_436207815[0].push.apply(fmtRes_436207815[0], makeNimstrLit("(?<!["));;
    F.line = 87;
    formatValue_1409286306(fmtRes_436207815, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 87;
    fmtRes_436207815[0].push.apply(fmtRes_436207815[0], makeNimstrLit("])("));;
    F.line = 87;
    formatValue_1409286306(fmtRes_436207815, 0, DET_436207789, []);
    F.line = 87;
    fmtRes_436207815[0].push.apply(fmtRes_436207815[0], makeNimstrLit("),?([^"));;
    F.line = 87;
    formatValue_1409286306(fmtRes_436207815, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 87;
    fmtRes_436207815[0].push.apply(fmtRes_436207815[0], makeNimstrLit("]+|$)"));;
    F.line = 87;
    var fmtRes_436207820 = [mnewString(0)];
    F.line = 87;
    fmtRes_436207820[0].push.apply(fmtRes_436207820[0], makeNimstrLit("$1"));;
    F.line = 87;
    formatValue_1409286306(fmtRes_436207820, 0, makeNimstrLit("\xC2\x86"), []);
    F.line = 87;
    fmtRes_436207820[0].push.apply(fmtRes_436207820[0], makeNimstrLit("$2"));;
    F.line = 87;
    formatValue_1409286306(fmtRes_436207820, 0, makeNimstrLit("\xC2\x87"), []);
    F.line = 88;
    var fmtRes_436207825 = [mnewString(0)];
    F.line = 88;
    formatValue_1409286306(fmtRes_436207825, 0, makeNimstrLit("\xC2\x86"), []);
    F.line = 88;
    fmtRes_436207825[0].push.apply(fmtRes_436207825[0], makeNimstrLit("([^"));;
    F.line = 88;
    formatValue_1409286306(fmtRes_436207825, 0, makeNimstrLit("\xC2\x87"), []);
    F.line = 88;
    fmtRes_436207825[0].push.apply(fmtRes_436207825[0], makeNimstrLit("]+)"));;
    F.line = 88;
    formatValue_1409286306(fmtRes_436207825, 0, makeNimstrLit("\xC2\x87"), []);
    F.line = 88;
    fmtRes_436207825[0].push.apply(fmtRes_436207825[0], makeNimstrLit("("));;
    F.line = 88;
    formatValue_1409286306(fmtRes_436207825, 0, makeNimstrLit("[\'bcdfghjklmnprstzq\xEA\x9D\xA1]?h?[ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3]\xCC\xA3?(?![\xCC\x81\xCC\x88\xCC\x82])[\'bcdfghjklmnprstzq\xEA\x9D\xA1ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\xCC\xA3]*"), []);
    F.line = 88;
    fmtRes_436207825[0].push.apply(fmtRes_436207825[0], makeNimstrLit(")?"));;
    F.line = 90;
    var fmtRes_436207830 = [mnewString(0)];
    F.line = 90;
    fmtRes_436207830[0].push.apply(fmtRes_436207830[0], makeNimstrLit("(?<!["));;
    F.line = 90;
    formatValue_1409286306(fmtRes_436207830, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 90;
    fmtRes_436207830[0].push.apply(fmtRes_436207830[0], makeNimstrLit("])(m\xC4\xB1\xCC\x81|shu\xCC\x81)([^"));;
    F.line = 90;
    formatValue_1409286306(fmtRes_436207830, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 90;
    fmtRes_436207830[0].push.apply(fmtRes_436207830[0], makeNimstrLit("]+)((?!("));;
    F.line = 90;
    formatValue_1409286306(fmtRes_436207830, 0, TLP_436207790, []);
    F.line = 90;
    fmtRes_436207830[0].push.apply(fmtRes_436207830[0], makeNimstrLit(")([^"));;
    F.line = 90;
    formatValue_1409286306(fmtRes_436207830, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 90;
    fmtRes_436207830[0].push.apply(fmtRes_436207830[0], makeNimstrLit("]|$))"));;
    F.line = 90;
    formatValue_1409286306(fmtRes_436207830, 0, makeNimstrLit("[\'bcdfghjklmnprstzq\xEA\x9D\xA1]?h?[ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3]\xCC\xA3?(?![\xCC\x81\xCC\x88\xCC\x82])[\'bcdfghjklmnprstzq\xEA\x9D\xA1ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\xCC\xA3]*"), []);
    F.line = 90;
    fmtRes_436207830[0].push.apply(fmtRes_436207830[0], makeNimstrLit(")(?!["));;
    F.line = 90;
    formatValue_1409286306(fmtRes_436207830, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 90;
    fmtRes_436207830[0].push.apply(fmtRes_436207830[0], makeNimstrLit("])"));;
    F.line = 91;
    var fmtRes_436207835 = [mnewString(0)];
    F.line = 91;
    fmtRes_436207835[0].push.apply(fmtRes_436207835[0], makeNimstrLit("\xF3\xB1\x9B\x98$1"));;
    F.line = 91;
    formatValue_1409286306(fmtRes_436207835, 0, makeNimstrLit("\xC2\x86"), []);
    F.line = 91;
    fmtRes_436207835[0].push.apply(fmtRes_436207835[0], makeNimstrLit("$2"));;
    F.line = 91;
    formatValue_1409286306(fmtRes_436207835, 0, makeNimstrLit("\xC2\x87"), []);
    F.line = 91;
    fmtRes_436207835[0].push.apply(fmtRes_436207835[0], makeNimstrLit("\xF3\xB1\x9B\x93$3\xF3\xB1\x9B\x93\xF3\xB1\x9B\x99"));;
    F.line = 92;
    var fmtRes_436207840 = [mnewString(0)];
    F.line = 92;
    fmtRes_436207840[0].push.apply(fmtRes_436207840[0], makeNimstrLit("(?<!["));;
    F.line = 92;
    formatValue_1409286306(fmtRes_436207840, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 92;
    fmtRes_436207840[0].push.apply(fmtRes_436207840[0], makeNimstrLit("])(m\xC4\xB1|shu)(["));;
    F.line = 92;
    formatValue_1409286306(fmtRes_436207840, 0, makeNimstrLit("\xCC\x88\xCC\x82"), []);
    F.line = 92;
    fmtRes_436207840[0].push.apply(fmtRes_436207840[0], makeNimstrLit("]?)([^"));;
    F.line = 92;
    formatValue_1409286306(fmtRes_436207840, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 92;
    formatValue_1409286306(fmtRes_436207840, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 92;
    fmtRes_436207840[0].push.apply(fmtRes_436207840[0], makeNimstrLit("]+)"));;
    F.line = 93;
    var fmtRes_436207845 = [mnewString(0)];
    F.line = 93;
    fmtRes_436207845[0].push.apply(fmtRes_436207845[0], makeNimstrLit("((?!("));;
    F.line = 93;
    formatValue_1409286306(fmtRes_436207845, 0, TLP_436207790, []);
    F.line = 93;
    fmtRes_436207845[0].push.apply(fmtRes_436207845[0], makeNimstrLit(")([^"));;
    F.line = 93;
    formatValue_1409286306(fmtRes_436207845, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 93;
    fmtRes_436207845[0].push.apply(fmtRes_436207845[0], makeNimstrLit("]|$))"));;
    F.line = 93;
    formatValue_1409286306(fmtRes_436207845, 0, makeNimstrLit("[\'bcdfghjklmnprstzq\xEA\x9D\xA1]?h?[ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3]\xCC\xA3?(?![\xCC\x81\xCC\x88\xCC\x82])[\'bcdfghjklmnprstzq\xEA\x9D\xA1ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\xCC\xA3]*"), []);
    F.line = 93;
    fmtRes_436207845[0].push.apply(fmtRes_436207845[0], makeNimstrLit(")(?!["));;
    F.line = 93;
    formatValue_1409286306(fmtRes_436207845, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 93;
    fmtRes_436207845[0].push.apply(fmtRes_436207845[0], makeNimstrLit("])"));;
    F.line = 94;
    var fmtRes_436207850 = [mnewString(0)];
    F.line = 94;
    fmtRes_436207850[0].push.apply(fmtRes_436207850[0], makeNimstrLit("$1$2"));;
    F.line = 94;
    formatValue_1409286306(fmtRes_436207850, 0, makeNimstrLit("\xC2\x86"), []);
    F.line = 94;
    fmtRes_436207850[0].push.apply(fmtRes_436207850[0], makeNimstrLit("$3"));;
    F.line = 94;
    formatValue_1409286306(fmtRes_436207850, 0, makeNimstrLit("\xC2\x87"), []);
    F.line = 94;
    fmtRes_436207850[0].push.apply(fmtRes_436207850[0], makeNimstrLit("\xF3\xB1\x9B\x93$4\xF3\xB1\x9B\x93"));;
    F.line = 98;
    var fmtRes_436207855 = [mnewString(0)];
    F.line = 98;
    fmtRes_436207855[0].push.apply(fmtRes_436207855[0], makeNimstrLit("(?<!["));;
    F.line = 98;
    formatValue_1409286306(fmtRes_436207855, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 98;
    fmtRes_436207855[0].push.apply(fmtRes_436207855[0], makeNimstrLit("])(mo["));;
    F.line = 98;
    formatValue_1409286306(fmtRes_436207855, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 98;
    fmtRes_436207855[0].push.apply(fmtRes_436207855[0], makeNimstrLit("]?)([^"));;
    F.line = 98;
    formatValue_1409286306(fmtRes_436207855, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 98;
    formatValue_1409286306(fmtRes_436207855, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 98;
    fmtRes_436207855[0].push.apply(fmtRes_436207855[0], makeNimstrLit("]+)"));;
    F.line = 99;
    var fmtRes_436207860 = [mnewString(0)];
    F.line = 99;
    fmtRes_436207860[0].push.apply(fmtRes_436207860[0], makeNimstrLit("([^"));;
    F.line = 99;
    formatValue_1409286306(fmtRes_436207860, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 99;
    fmtRes_436207860[0].push.apply(fmtRes_436207860[0], makeNimstrLit("]+)(teo)(?!["));;
    F.line = 99;
    formatValue_1409286306(fmtRes_436207860, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 99;
    fmtRes_436207860[0].push.apply(fmtRes_436207860[0], makeNimstrLit("])"));;
    F.line = 101;
    var fmtRes_436207865 = [mnewString(0)];
    F.line = 101;
    formatValue_1409286306(fmtRes_436207865, 0, makeNimstrLit("\xC2\x91"), []);
    F.line = 101;
    fmtRes_436207865[0].push.apply(fmtRes_436207865[0], makeNimstrLit("(["));;
    F.line = 101;
    formatValue_1409286306(fmtRes_436207865, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 101;
    fmtRes_436207865[0].push.apply(fmtRes_436207865[0], makeNimstrLit("]+)"));;
    F.line = 102;
    var fmtRes_436207870 = [mnewString(0)];
    F.line = 102;
    fmtRes_436207870[0].push.apply(fmtRes_436207870[0], makeNimstrLit("[:\xE2\x80\xB9](["));;
    F.line = 102;
    formatValue_1409286306(fmtRes_436207870, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 102;
    fmtRes_436207870[0].push.apply(fmtRes_436207870[0], makeNimstrLit("]+)[\xE2\x80\xBA:]"));;
    F.line = 105;
    var fmtRes_436207875 = [mnewString(0)];
    F.line = 105;
    fmtRes_436207875[0].push.apply(fmtRes_436207875[0], makeNimstrLit("\xCC\xA3([\xCC\x81\xCC\x82"));;
    F.line = 105;
    formatValue_1409286306(fmtRes_436207875, 0, makeNimstrLit("\xCC\xA3"), []);
    F.line = 105;
    fmtRes_436207875[0].push.apply(fmtRes_436207875[0], makeNimstrLit("]?["));;
    F.line = 105;
    formatValue_1409286306(fmtRes_436207875, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3"), []);
    F.line = 105;
    fmtRes_436207875[0].push.apply(fmtRes_436207875[0], makeNimstrLit("]?[mq]?)(["));;
    F.line = 105;
    formatValue_1409286306(fmtRes_436207875, 0, makeNimstrLit("\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 105;
    fmtRes_436207875[0].push.apply(fmtRes_436207875[0], makeNimstrLit("])"));;
    F.line = 107;
    var fmtRes_436207880 = [mnewString(0)];
    F.line = 107;
    fmtRes_436207880[0].push.apply(fmtRes_436207880[0], makeNimstrLit("(?!("));;
    F.line = 107;
    formatValue_1409286306(fmtRes_436207880, 0, makeNimstrLit("a\xC4\xB1|ao|e\xC4\xB1|o\xC4\xB1"), []);
    F.line = 107;
    fmtRes_436207880[0].push.apply(fmtRes_436207880[0], makeNimstrLit("))(["));;
    F.line = 107;
    formatValue_1409286306(fmtRes_436207880, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3"), []);
    F.line = 107;
    fmtRes_436207880[0].push.apply(fmtRes_436207880[0], makeNimstrLit("])(["));;
    F.line = 107;
    formatValue_1409286306(fmtRes_436207880, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3"), []);
    F.line = 107;
    fmtRes_436207880[0].push.apply(fmtRes_436207880[0], makeNimstrLit("])"));;
    F.line = 107;
    var fmtRes_436207885 = [mnewString(0)];
    F.line = 107;
    fmtRes_436207885[0].push.apply(fmtRes_436207885[0], makeNimstrLit("$2"));;
    F.line = 107;
    formatValue_1409286306(fmtRes_436207885, 0, makeNimstrLit("\xF3\xB1\x9B\x8D"), []);
    F.line = 107;
    fmtRes_436207885[0].push.apply(fmtRes_436207885[0], makeNimstrLit("$3"));;
    F.line = 109;
    var fmtRes_436207890 = [mnewString(0)];
    F.line = 109;
    fmtRes_436207890[0].push.apply(fmtRes_436207890[0], makeNimstrLit("(?<=["));;
    F.line = 109;
    formatValue_1409286306(fmtRes_436207890, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 109;
    formatValue_1409286306(fmtRes_436207890, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 109;
    fmtRes_436207890[0].push.apply(fmtRes_436207890[0], makeNimstrLit("])(\xF3\xB1\x9B\x93?\xF3\xB1\x9B\x99?([\\s]\xF3\xB1\x9B\x9A)?)([^,\xF3\xB1\x9B\x9A"));;
    F.line = 109;
    formatValue_1409286306(fmtRes_436207890, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 109;
    formatValue_1409286306(fmtRes_436207890, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 109;
    fmtRes_436207890[0].push.apply(fmtRes_436207890[0], makeNimstrLit("]+)(e|na|\xEA\x9D\xA1e|\xEA\x9D\xA1a)(["));;
    F.line = 109;
    formatValue_1409286306(fmtRes_436207890, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 109;
    fmtRes_436207890[0].push.apply(fmtRes_436207890[0], makeNimstrLit("])(?!["));;
    F.line = 109;
    formatValue_1409286306(fmtRes_436207890, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 109;
    fmtRes_436207890[0].push.apply(fmtRes_436207890[0], makeNimstrLit("])"));;
    F.line = 112;
    var fmtRes_436207895 = [mnewString(0)];
    F.line = 112;
    fmtRes_436207895[0].push.apply(fmtRes_436207895[0], makeNimstrLit(" (da)(?!["));;
    F.line = 112;
    formatValue_1409286306(fmtRes_436207895, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 112;
    formatValue_1409286306(fmtRes_436207895, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 112;
    fmtRes_436207895[0].push.apply(fmtRes_436207895[0], makeNimstrLit("])"));;
    F.line = 113;
    var fmtRes_436207900 = [mnewString(0)];
    F.line = 113;
    fmtRes_436207900[0].push.apply(fmtRes_436207900[0], makeNimstrLit("(?<=["));;
    F.line = 113;
    formatValue_1409286306(fmtRes_436207900, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 113;
    formatValue_1409286306(fmtRes_436207900, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 113;
    fmtRes_436207900[0].push.apply(fmtRes_436207900[0], makeNimstrLit("])(?<!mo)(?<!m["));;
    F.line = 113;
    formatValue_1409286306(fmtRes_436207900, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 113;
    fmtRes_436207900[0].push.apply(fmtRes_436207900[0], makeNimstrLit("]o)([\xF3\xB1\x9B\x93\xF3\xB1\x9B\x99]*)([^"));;
    F.line = 113;
    formatValue_1409286306(fmtRes_436207900, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 113;
    formatValue_1409286306(fmtRes_436207900, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 113;
    fmtRes_436207900[0].push.apply(fmtRes_436207900[0], makeNimstrLit("\xF3\xB1\x9B\x92]*)(("));;
    F.line = 113;
    formatValue_1409286306(fmtRes_436207900, 0, MS_436207791, []);
    F.line = 113;
    fmtRes_436207900[0].push.apply(fmtRes_436207900[0], makeNimstrLit(")(?!["));;
    F.line = 113;
    formatValue_1409286306(fmtRes_436207900, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 113;
    formatValue_1409286306(fmtRes_436207900, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 113;
    fmtRes_436207900[0].push.apply(fmtRes_436207900[0], makeNimstrLit("])|$)"));;
    F.line = 117;
    var fmtRes_436207905 = [mnewString(0)];
    F.line = 117;
    fmtRes_436207905[0].push.apply(fmtRes_436207905[0], makeNimstrLit(" (ka|ba|nha|doa|\xEA\x9D\xA1o|da\xCC\x82|mo\xCC\x82q)(\xC2\xA0\xF3\xB1\x9B\x95)?(?!["));;
    F.line = 117;
    formatValue_1409286306(fmtRes_436207905, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 117;
    formatValue_1409286306(fmtRes_436207905, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 117;
    fmtRes_436207905[0].push.apply(fmtRes_436207905[0], makeNimstrLit("])"));;
    F.line = 119;
    var fmtRes_436207910 = [mnewString(0)];
    F.line = 119;
    fmtRes_436207910[0].push.apply(fmtRes_436207910[0], makeNimstrLit(" (m\xC3\xB3q)(\xC2\xA0\xF3\xB1\x9B\x95)?(?!["));;
    F.line = 119;
    formatValue_1409286306(fmtRes_436207910, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3\'bcdfghjklmnprstzq\xEA\x9D\xA1"), []);
    F.line = 119;
    fmtRes_436207910[0].push.apply(fmtRes_436207910[0], makeNimstrLit("])"));;
    F.line = 121;
    var fmtRes_436207915 = [mnewString(0)];
    F.line = 121;
    fmtRes_436207915[0].push.apply(fmtRes_436207915[0], makeNimstrLit("(["));;
    F.line = 121;
    formatValue_1409286306(fmtRes_436207915, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3"), []);
    F.line = 121;
    fmtRes_436207915[0].push.apply(fmtRes_436207915[0], makeNimstrLit("])(["));;
    F.line = 121;
    formatValue_1409286306(fmtRes_436207915, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 121;
    fmtRes_436207915[0].push.apply(fmtRes_436207915[0], makeNimstrLit("])"));;
    F.line = 123;
    var fmtRes_436207920 = [mnewString(0)];
    F.line = 123;
    fmtRes_436207920[0].push.apply(fmtRes_436207920[0], makeNimstrLit("(["));;
    F.line = 123;
    formatValue_1409286306(fmtRes_436207920, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3"), []);
    F.line = 123;
    fmtRes_436207920[0].push.apply(fmtRes_436207920[0], makeNimstrLit("])m(?!["));;
    F.line = 123;
    formatValue_1409286306(fmtRes_436207920, 0, makeNimstrLit("ae\xC4\xB1ou\xC3\xA1\xC3\xA9\xC3\xAD\xC3\xB3\xC3\xBA\xC3\xA4\xC3\xAB\xC3\xAF\xC3\xB6\xC3\xBC\xC3\xA2\xC3\xAA\xC3\xAE\xC3\xB4\xC3\xBB\xE1\xBA\xA1\xE1\xBA\xB9\xC4\xB1\xCC\xA3\xE1\xBB\x8D\xE1\xBB\xA5\xC3\xA1\xCC\xA3\xC3\xA9\xCC\xA3\xC3\xAD\xCC\xA3\xC3\xB3\xCC\xA3\xC3\xBA\xCC\xA3\xC3\xA4\xCC\xA3\xC3\xAB\xCC\xA3\xC3\xAF\xCC\xA3\xC3\xB6\xCC\xA3\xC3\xBC\xCC\xA3\xC3\xA2\xCC\xA3\xC3\xAA\xCC\xA3\xC3\xAE\xCC\xA3\xC3\xB4\xCC\xA3\xC3\xBB\xCC\xA3"), []);
    F.line = 123;
    fmtRes_436207920[0].push.apply(fmtRes_436207920[0], makeNimstrLit("])"));;
    F.line = 125;
    var fmtRes_436207925 = [mnewString(0)];
    F.line = 125;
    fmtRes_436207925[0].push.apply(fmtRes_436207925[0], makeNimstrLit("[:;.\xE2\x80\xA6?!\xE2\x80\xB9\xE2\x80\xBA"));;
    F.line = 125;
    formatValue_1409286306(fmtRes_436207925, 0, makeNimstrLit("\xC2\x91"), []);
    F.line = 125;
    fmtRes_436207925[0].push.apply(fmtRes_436207925[0], makeNimstrLit("]"));;
    var RRL_436207930 = [nimCopy(null, {Field0: nimCopy(null, fmtRes_436207800[0], NTI33554439), Field1: makeNimstrLit("$1")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207805[0], NTI33554439), Field1: makeNimstrLit("$1\'$2")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207810[0], NTI33554439), Field1: makeNimstrLit("\x1Badd_t2_cartouche")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207815[0], NTI33554439), Field1: nimCopy(null, fmtRes_436207820[0], NTI33554439)}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207825[0], NTI33554439), Field1: makeNimstrLit("\x1Badd_t1_cartouche")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207830[0], NTI33554439), Field1: nimCopy(null, fmtRes_436207835[0], NTI33554439)}, NTI436207754), nimCopy(null, {Field0: (fmtRes_436207840[0] || []).concat(fmtRes_436207845[0] || []), Field1: nimCopy(null, fmtRes_436207850[0], NTI33554439)}, NTI436207754), nimCopy(null, {Field0: makeNimstrLit("\xC2\x86(.*)\xC2\x87"), Field1: makeNimstrLit("\x1Badd_deran\xC4\xB1_spaces")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207855[0], NTI33554439), Field1: makeNimstrLit("$1 \xF3\xB1\x9B\x93$2")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207860[0], NTI33554439), Field1: makeNimstrLit("$1\xF3\xB1\x9B\x93 $2")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207865[0], NTI33554439), Field1: makeNimstrLit("\xF3\xB1\x9B\x93$1\xF3\xB1\x9B\x93")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207870[0], NTI33554439), Field1: makeNimstrLit("\xF3\xB1\x9B\x93$1\xF3\xB1\x9B\x93")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207875[0], NTI33554439), Field1: makeNimstrLit("$1\xF3\xB1\x9B\x92$2")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207880[0], NTI33554439), Field1: nimCopy(null, fmtRes_436207885[0], NTI33554439)}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207890[0], NTI33554439), Field1: makeNimstrLit("$1\xC2\xA0\xF3\xB1\x9B\x94$3$4$5")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207895[0], NTI33554439), Field1: makeNimstrLit(" $1\xC2\xA0\xF3\xB1\x9B\x95")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207900[0], NTI33554439), Field1: makeNimstrLit("$1\xC2\xA0\xF3\xB1\x9B\x95$2$3")}, NTI436207754), nimCopy(null, {Field0: makeNimstrLit("\xF3\xB1\x9B\x95\xC2\xA0\xF3\xB1\x9B\x95"), Field1: makeNimstrLit("\xF3\xB1\x9B\x95")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207905[0], NTI33554439), Field1: makeNimstrLit(" $1\xC2\xA0\xF3\xB1\x9B\x96")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207910[0], NTI33554439), Field1: makeNimstrLit(" $1\xC2\xA0\xF3\xB1\x9B\x97")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207915[0], NTI33554439), Field1: makeNimstrLit("$2$1")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207920[0], NTI33554439), Field1: makeNimstrLit("$1\xF3\xB1\x9A\xB1")}, NTI436207754), nimCopy(null, {Field0: nimCopy(null, fmtRes_436207925[0], NTI33554439), Field1: []}, NTI436207754)];
    F.line = 129;
    var r_436207931 = toNFD_1426064548(lt_436207630);
    F.line = 130;
    r_436207931 = nimCopy(null, replace_1056966097(r_436207931, re_436207932(), makeNimstrLit("\xC2\x91$1"), 0), NTI33554439);
    F.line = 131;
    F.line = 131;
    var fmtRes_436207979 = [mnewString(0)];
    F.line = 131;
    fmtRes_436207979[0].push.apply(fmtRes_436207979[0], makeNimstrLit("(^|([.\xE2\x80\xA6?!]|mo["));;
    F.line = 131;
    formatValue_1409286306(fmtRes_436207979, 0, makeNimstrLit("\xCC\x81\xCC\x88\xCC\x82"), []);
    F.line = 131;
    fmtRes_436207979[0].push.apply(fmtRes_436207979[0], makeNimstrLit("])\\s+)"));;
    var s_436207980 = nimCopy(null, fmtRes_436207979[0], NTI33554439);
    F.line = 132;
    r_436207931 = nimCopy(null, replace_1056966097(r_436207931, re_1056964626((s_436207980 || []).concat(makeNimstrLit("\xC2\x91") || [])), makeNimstrLit("$1"), 0), NTI33554439);
    F.line = 133;
    r_436207931 = nimCopy(null, nuctoLowerStr(r_436207931), NTI33554439);
    F.line = 134;
    r_436207931 = nimCopy(null, nsuReplaceStr(r_436207931, makeNimstrLit("i"), makeNimstrLit("\xC4\xB1")), NTI33554439);
    F.line = 136;
    var callback_named_436209535 = [toTable_436208014([nimCopy(null, {Field0: makeNimstrLit("add_t2_cartouche"), Field1: HEX3Aanonymous_436207981}, NTI436208039), nimCopy(null, {Field0: makeNimstrLit("add_t1_cartouche"), Field1: HEX3Aanonymous_436207985}, NTI436208039), nimCopy(null, {Field0: makeNimstrLit("add_deran\xC4\xB1_spaces"), Field1: HEX3Aanonymous_436207989}, NTI436208039)])];
    F.line = 151;
    traverse_while_436207661(HEX3Aanonymous_436209699, f_436209536, 0, 1);
    F.line = 163;
    traverse_while_436207661(HEX3Aanonymous_436210243, g_436209706, 0, 1);
    F.line = 164;
    result_436207740 = nimCopy(null, r_436207931, NTI33554439);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_436207740;

}
